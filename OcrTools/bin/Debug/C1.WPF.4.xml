<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.WPF.4</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.C1TreeViewItem">
      <summary>C1TreeView コントロール内の選択可能な項目を実装します。</summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalPresenter">
      <summary>複数の項目と１つのヘッダーを含むコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnItemPrepared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnItemCleared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.IsAncestorOf(C1.WPF.C1HierarchicalPresenter)">
      <summary>
        <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />が子孫要素の祖先であるかどうかを決定します。
      </summary>
      <param name="descendant">
        子孫の
        <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />。
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.InitializeItem(C1.WPF.C1HierarchicalPresenter)">
      <summary>
        階層内に親およびルート要素を設定することで、
        <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />を初期化します。
      </summary>
      <remarks>このメソッドは、項目が表示される前に、項目を強制的に初期化する場合にのみ呼び出します。これを呼び出さない場合、項目は、表示される前に自動的に初期化されます。</remarks>
      <param name="rootPresenter">
        この項目が属する
        <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ToList``1">
      <summary>呼び出し時点で階層プレゼンタに存在するすべての項目コンテナを含むリストを作成します。</summary>
      <typeparam name="T">コンテナの型（C1TreeViewItem など）</typeparam>
      <returns>項目コンテナのリスト。</returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnHeaderChanged(System.Object)">
      <summary>
        <see cref="P:Header" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderProperty">
      <summary>
        <see cref="P:C1.WPF.C1HierarchicalPresenter.Header" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1HierarchicalPresenter" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.ItemPrepared">
      <summary>C1HierarchicalPresenter 子項目が準備された（PrepareContainerForItemOverride が呼び出された）ときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.ItemCleared">
      <summary>C1HierarchicalPresenter 子項目がクリアされた（ClearContainerForItemOverride が呼び出された）ときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemConverter">
      <summary>
        ItemConverter は、
        <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />インスタンスから文字列表現への変換を実行します。ユーザーが指定しない場合は、デフォルトのコンバータが使用されます。
      </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentCollection">
      <summary>この要素の親の項目コレクションを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentItemsSource">
      <summary>この要素の親の ItemsSource プロパティを返します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.Header">
      <summary>コントロールにラベルを付ける項目を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate">
      <summary>コントロールのヘッダーのコンテンツを表示するために使用されるテンプレートを取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1HierarchicalPresenter.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCreateAutomationPeer">
      <summary>コントロールのテストに使用される AutomationPeer を取得します。</summary>
      <returns>コントロールのテストに使用される AutomationPeer。</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpanding(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeViewItem.Expanding" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpanded(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeViewItem.Expanded" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCollapsing(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsing" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnCollapsed(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeViewItem.Collapsed" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeViewItem.Click" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemCleared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemCleared" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemPrepared(C1.WPF.ItemPreparedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1HierarchicalPresenter.ItemPrepared" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnHeaderChanged(System.Object)">
      <summary>
        <see cref="P:Header" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.MeasureOverride(System.Windows.Size)">
      <summary>コントロールを再測定するために呼び出されます。</summary>
      <param name="constraint">このメソッドから返すことができる最大サイズ。</param>
      <returns>コントロールのサイズ。最大値は constraint で指定されます。</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnExpandButtonClick">
      <summary>ユーザーが展開/折りたたみボタンをクリックしたときに呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>ユーザーが項目内で左マウスボタンを押したときに呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
      <summary>ユーザーがキーを押したときに呼び出され、キーボード自動検索およびノードナビゲーションを実行します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Items プロパティが変更されると呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.EnsureVisible">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeViewItem" />を表示範囲までスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.Collapse">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeViewItem" />を折りたたみます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.Expand">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeViewItem" />を展開します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateShowLines(System.Boolean)">
      <summary>ShowLines 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateExpandedStates(System.Boolean)">
      <summary>ExpandedStates 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateSelection(System.Boolean)">
      <summary>Selection 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextDecorationsProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.TextDecorations" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.TextWrappingProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.TextWrapping" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.IsSelectedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.IsSelected" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.IsExpandedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.IsExpanded" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.EditTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.EditTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.LineThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineStrokeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.LineStroke" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.LineDashArrayProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.LineDashArray" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewItem.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TreeView">
      <summary>
        この項目の親の
        <see cref="T:C1.Silverlight.C1TreeView" />を識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.ParentItem">
      <summary>
        この項目の親である
        <see cref="T:C1.WPF.C1TreeViewItem" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.Parent">
      <summary>
        この項目の親である
        <see cref="T:C1.WPF.C1TreeViewItem" />を取得します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.IsExpandedChanged">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewItem.IsExpanded" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Expanding">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />が展開される前に発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Expanded">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />が展開された後に発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Collapsing">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />が折りたたまれる前に発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Collapsed">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />が折りたたまれた後に発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewItem.Click">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />がクリックされると発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.Index">
      <summary>
        親項目コレクション内のこの
        <see cref="T:C1.Silverlight.C1TreeViewItem" />のインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.NextNode">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeView" />内のこのノードの次のノードを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.NextVisibleNode">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeView" />内のこのノードの次の可視ノードを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.PrevNode">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeView" />内のこのノードの前のノードを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.PrevVisibleNode">
      <summary>
        <see cref="T:C1.Silverlight.C1TreeView" />内のこのノードの前の可視ノードを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.FirstNode">
      <summary>このノードの最初の子を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LastNode">
      <summary>このノードの最後の子を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextAlignment">
      <summary>ヘッダー内のテキストコンテンツの水平方向の配置を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextDecorations">
      <summary>ヘッダーのテキストに適用される効果が含まれる TextDecorationCollection を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.TextWrapping">
      <summary>ヘッダー内でテキストの折り返し方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.IsSelected">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />コントロールが選択されているかどうかを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.IsExpanded">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewItem" />を展開するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.EditTemplate">
      <summary>項目のコンテンツを編集するために使用されるテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineThickness">
      <summary>接続線の太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineStroke">
      <summary>接続線の描画に使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.LineDashArray">
      <summary>接続線に使用される破線のパターンを示す System.Double 値のコレクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TreeView">
      <summary>展開/折りたたみ可能な項目を含むツリー構造内の階層データを表示するコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnCreateAutomationPeer">
      <summary>コントロールのテストに使用される AutomationPeer を取得します。</summary>
      <returns>コントロールのテストに使用される AutomationPeer。</returns>
    </member>
    <member name="F:C1.WPF.C1TreeView.IsVirtualizingProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.IsVirtualizing" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragStart(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1TreeView.DragStart" />イベントを発生させます。
      </summary>
      <param name="source">イベントのソースを設定するために使用されます。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Silverlight.DragDropEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragOver(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.DragOver" />イベントを発生させます。
      </summary>
      <param name="source">イベントのソースを設定するために使用されます。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Silverlight.DragDropEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnDragDrop(System.Object,C1.WPF.DragDropEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.DragDrop" />イベントを発生させます。
      </summary>
      <param name="source">イベントのソースを設定するために使用されます。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Silverlight.DragDropEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.ItemClick" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemExpanding(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.ItemExpanding" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemExpanded(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.ItemExpanded" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemCollapsing(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsing" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnItemCollapsed(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.ItemCollapsed" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.StartEditing">
      <summary>選択されている項目を編集状態にします</summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.StartEditing(C1.WPF.C1TreeViewItem)">
      <summary>項目を編集状態にします</summary>
      <param name="item">編集される項目を表します</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.FinishEditing">
      <summary>編集中の項目を編集終了状態にします</summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.FinishEditing(System.Boolean,System.Boolean)">
      <summary>編集中の項目を編集終了状態にします</summary>
      <param name="cancel">編集中の値をキャンセルするかどうかを決定します</param>
      <param name="focusElement">編集中の項目に編集後にフォーカスするかどうかを決定します</param>
    </member>
    <member name="M:C1.WPF.C1TreeView.FindItem(System.String)">
      <summary>検索パラメータとして使用されるテキストと正確に一致する最初の項目を返します。</summary>
      <param name="text">検索するテキスト。</param>
      <returns>検索パラメータと一致する項目。一致する項目が存在しない場合は null</returns>
    </member>
    <member name="M:C1.WPF.C1TreeView.GetNode(System.Windows.Point)">
      <summary>指定された場所に最も近い C1TreeViewItem を取得します。</summary>
      <param name="position">場所。</param>
      <returns>最も近い C1TreeViewItem。</returns>
    </member>
    <member name="M:C1.WPF.C1TreeView.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoSearchResetDelayProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.AutoSearchResetDelay" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedItemProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.SelectedItem" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AllowDragDropProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.AllowDragDrop" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoSearchProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.AutoSearch" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.KeyboardNavigationProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.KeyboardNavigation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectionModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.SelectionMode" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedItemsProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.SelectedItems" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ExpandOnClickProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.ExpandOnClick" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ExpandModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.ExpandMode" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ScrollBarStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.ScrollBarStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.AutoScrollModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.AutoScrollMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.EditTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.EditTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.LineThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineStrokeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.LineStroke" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ShowLinesProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.ShowLines" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.LineDashArrayProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.LineDashArray" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeView.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TreeView" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeView.DragDropArrowMarker">
      <summary>ドロップ場所を示すために使用される矢印要素を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.DragDropLineMarker">
      <summary>ドロップ場所を示すために使用されるライン要素を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.IsVirtualizing">
      <summary>ノードが仮想化されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragStart">
      <summary>ドラッグアンドドロップ処理が開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragOver">
      <summary>ドラッグアンドドロップ処理中に、ポインタが登録されたドロップ先上に移動したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.DragDrop">
      <summary>ドラッグアンドドロップ処理の最後に、ユーザーが登録されたドロップ先上でマウスボタンを放したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionChanged">
      <summary>現在の選択範囲が変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionChanging">
      <summary>現在の選択項目の変更が開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemClick">
      <summary>C1TreeViewItem がクリックされると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemExpanding">
      <summary>C1TreeViewItem が展開されるときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemExpanded">
      <summary>C1TreeViewItem が展開されると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemCollapsing">
      <summary>C1TreeViewItem が折りたたまれるときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.ItemCollapsed">
      <summary>C1TreeViewItem が折りたたまれると発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoSearchResetDelay">
      <summary>キーボード検索で使用される遅延（ミリ秒単位）の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedItem">
      <summary>
        <see cref="T:C1.WPF.C1TreeView" />内の選択された項目を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AllowDragDrop">
      <summary>
        この
        <see cref="T:C1.WPF.C1TreeView" />でドラッグアンドドロップ操作が許可されているかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoSearch">
      <summary>C1TreeView の AutoSearch 機能を有効または無効にします。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.KeyboardNavigation">
      <summary>C1TreeView のキーボードナビゲーション機能を有効または無効にします。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectionMode">
      <summary>C1TreeView の選択動作を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeView.SelectionModeChanged">
      <summary>
        <see cref="P:C1.WPF.C1TreeView.SelectionMode" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedItems">
      <summary>
        <see cref="T:C1.WPF.C1TreeView" />内の選択された項目を取得します（複数選択モードの場合）。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ExpandOnClick">
      <summary>ユーザーが C1TreeViewItem のヘッダーをクリックしたときにノードを展開したり折りたたんだりするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ExpandMode">
      <summary>展開できる C1TreeViewItem の数を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ScrollBarStyle">
      <summary>内部スクロールバーに使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.AutoScrollMode">
      <summary>現在の ViewPort 内にない（収まらない）C1treeViewItems に移動したときに、C1TreeView によって使用される自動スクロールモードを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.EditTemplate">
      <summary>項目のコンテンツを編集するために使用されるテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineThickness">
      <summary>接続線の太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineStroke">
      <summary>接続線の描画に使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ShowLines">
      <summary>接続線を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.LineDashArray">
      <summary>接続線に使用される破線のパターンを示す System.Double 値のコレクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeView.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TabItem">
      <summary>
        <see cref="T:C1.WPF.C1TabControl" />内の選択可能な１つの項目を表します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnCreateAutomationPeer">
      <summary>コントロールのテストに使用される AutomationPeer を取得します。</summary>
      <returns>コントロールのテストに使用される AutomationPeer。</returns>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnContentChanged(System.Object,System.Object)">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.Content" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.Header" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderTemplateSelectorProperty">
      <summary>HeaderTemplateSelector 依存プロパティを識別します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.HeaderTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectedProperty">
      <summary>
        <see cref="P:System.Windows.Controls.TabItem.IsSelected" />依存関係プロパティを識別します。
      </summary>
      <value>
        <see cref="P:System.Windows.Controls.TabItem.IsSelected" />依存関係プロパティの識別子。
      </value>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="P:System.Windows.Controls.TabItem.IsSelected" />プロパティが true に変化したことを示すために呼び出されます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="P:System.Windows.Controls.TabItem.IsSelected" />プロパティが false に変化したことを示すために呼び出されます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
        コントロールにフォーカスがある間にユーザーがキーを押して発生する
        <see cref="E:C1.WPF.C1TabItem.KeyDown" />イベントを処理するクラスを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1TabItem.MouseLeftButtonDown" />イベントが発生する前に呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.ChangeVisualStatePinMode(System.Boolean)">
      <summary>PinMode 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.TabShapeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.TabShape" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.CanUserCloseProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.CanUserClose" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectableProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.IsSelectable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.CanUserPinProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.CanUserPin" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1TabItem.Header">
      <summary>コントロールにラベルを付ける項目を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.HeaderTemplateSelector">
      <summary>ヘッダーの表示に使用されるテンプレートを選択するためのカスタムロジックを提供するデータテンプレートセレクタを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.HeaderTemplate">
      <summary>
        コントロールの
        <see cref="P:C1.WPF.C1TabItem.Header" />のコンテンツを表示するために使用されるデータテンプレートを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelected">
      <summary>
        <see cref="T:System.Windows.Controls.TabItem" />が現在選択されているかどうかを示す値を取得または設定します。
      </summary>
      <value>
        <see cref="T:System.Windows.Controls.TabItem" />が選択されている場合は true、そうでない場合は false。
      </value>
    </member>
    <member name="P:C1.WPF.C1TabItem.TabShape">
      <summary>コントロールのビジュアル形式を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.CanUserClose">
      <summary>
        ユーザーがこの
        <see cref="T:C1.WPF.C1TabItem" />を閉じることができるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelectable">
      <summary>
        ユーザーがこの
        <see cref="T:C1.WPF.C1TabItem" />を選択できるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.CanUserPin">
      <summary>
        ユーザーがこの
        <see cref="T:C1.WPF.C1TabItem" />を固定または固定解除できるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TabItem.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1TabItem.IsMouseOver" />プロパティが変更されると発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TabControl">
      <summary>画面上の同じ空間を共有して複数の項目を格納するコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnCreateAutomationPeer">
      <summary>コントロールのテストに使用される AutomationPeer を取得します。</summary>
      <returns>コントロールのテストに使用される AutomationPeer。</returns>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedItemProperty">
      <summary>
        <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />依存関係プロパティを識別します。
      </summary>
      <value>
        <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />依存関係プロパティの識別子。
      </value>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedIndexProperty">
      <summary>
        <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />依存関係プロパティを識別します。
      </summary>
      <value>
        <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />依存関係プロパティの識別子。
      </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.ScrollIntoView(System.Object)">
      <summary>オブジェクトを表示範囲内にスクロールします。</summary>
      <param name="item">スクロールするオブジェクト。</param>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedContentProperty">
      <summary>
        <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />依存関係プロパティを識別します。
      </summary>
      <value>
        <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />依存関係プロパティの識別子。
      </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.BeginUpdate">
      <summary>
        <see cref="M:C1.WPF.C1TabControl.EndUpdate" />メソッドが呼び出されるまでコントロールが更新されないようにすることで、項目が１つずつ TabControl に追加される間のパフォーマンスを維持します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.EndUpdate">
      <summary>
        <see cref="M:C1.WPF.C1TabControl.BeginUpdate" />メソッドによって一時停止された TabControl の更新を再開します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.Items" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ContentTemplateSelectorProperty">
      <summary>ContentTemplateSelectorProperty 依存プロパティを識別します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateShape(System.Boolean)">
      <summary>Shape 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ShowSingleTabProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.ShowSingleTab" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripPlacementProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripPlacement" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripOverlap" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapDirectionProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripOverlapDirection" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemShapeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabItemShape" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemCloseProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabItemClose" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ItemContainerStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.ItemContainerStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripMenuVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripMenuVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.CanUserReorderProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.CanUserReorder" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.UpdateSourceCollectionProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.UpdateSourceCollection" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripHorizontalAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripVerticalAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripVerticalAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ContentTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.ContentTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.UnselectedContentModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.UnselectedContentMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabControl.TabStripForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TabControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1TabControl.VisibleItemsChanged">
      <summary>可視項目が変化したときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.VisibleItems">
      <summary>
        <see cref="T:C1.WPF.C1TabControl" />内のすべての可視項目を含む読み取り専用コレクション
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedItem">
      <summary>
        現在選択されている
        <see cref="T:System.Windows.Controls.TabItem" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedIndex">
      <summary>
        現在選択されている
        <see cref="T:System.Windows.Controls.TabItem" />のインデックスを取得または設定します。
      </summary>
      <value>
        現在選択されている
        <see cref="T:System.Windows.Controls.TabItem" />のインデックス。
        <see cref="T:System.Windows.Controls.TabItem" />が選択されていない場合は -1。
      </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.SelectionChanged">
      <summary>選択範囲が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedContent">
      <summary>
        現在選択されている
        <see cref="T:System.Windows.Controls.TabItem" />のコンテンツを取得します。
      </summary>
      <value>
        現在選択されている
        <see cref="T:System.Windows.Controls.TabItem" />のコンテンツ。デフォルトは null です。
      </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.ItemsChanged">
      <summary>System.Windows.Controls.ItemsControl.Items プロパティの値が変更されたときに呼び出されます。</summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosed">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />が閉じられるときに発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosing">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />が閉じられる前に発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ContentTemplateSelector">
      <summary>コントロールのコンテンツの表示に使用されるテンプレートを選択するためのカスタムロジックを取得または設定します</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ShowSingleTab">
      <summary>コントロールに子が１つしかない場合に、タブストリップを表示するかどうかを決定する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripPlacement">
      <summary>タブストリップのコントロール全体に対する相対的な位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlap">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />間の重なりの長さを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlapDirection">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />の Z インデックス配置を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemShape">
      <summary>タブの形状を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemClose">
      <summary>［閉じる］ボタンの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ItemContainerStyle">
      <summary>
        含まれるすべての
        <see cref="T:C1.WPF.C1TabItem" />に適用される Style を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripMenuVisibility">
      <summary>タブメニューの表示/非表示を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.CanUserReorder">
      <summary>ユーザーがこの C1TabControl から C1TabItems をドラッグアンドドロップして並べ替えできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.UpdateSourceCollection">
      <summary>項目の順序の変更を Items または ItemsSource に書き込むかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />のグループの水平方向の配置を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripVerticalAlignment">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />のグループの垂直方向の配置を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ContentTemplate">
      <summary>ContentTemplate プロパティが定義されていない TabItem に適用される DataTemplate を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.UnselectedContentMode">
      <summary>選択されていない項目のコンテンツをどのように扱うかを取得または設定します。</summary>
      <remarks>デフォルトは OutsideVisualTree です。これは、選択されていない項目のコンテンツをビジュアルツリーから削除します。選択されていない項目のコンテンツを保持するようにこのプロパティを変更すると、メモリのコストパフォーマンスが向上します。</remarks>
    </member>
    <member name="E:C1.WPF.C1TabControl.IsMouseOverChanged">
      <summary>
        <see cref="P:IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripBackground">
      <summary>
        タブストリップの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripForeground">
      <summary>
        タブストリップの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.AutomationPeerFactory">
      <summary>このクラスは内部使用専用です。</summary>
    </member>
    <member name="M:C1.WPF.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type)">
      <summary>指定された C1 コントロールの AutomationPeer クラスのインスタンスを返します。</summary>
      <param name="peerOwner">オーナーコントロール。</param>
      <param name="ownerType">オーナーコントロールのタイプ。</param>
      <returns>オートメーションピアオブジェクト。</returns>
    </member>
    <member name="M:C1.WPF.AutomationPeerFactory.CreateAutomationPeer(System.Object,System.Type,System.Windows.Controls.Control)">
      <summary>指定された C1 コントロールの AutomationPeer クラスのインスタンスを返します。</summary>
      <param name="peerOwner">オーナーコントロール。</param>
      <param name="ownerType">オーナーコントロールのタイプ。</param>
      <param name="owningSelectorControl">所有側のセレクタコントロールの参照。AutomationPeer が SelectorItemAutomationPeer を継承している場合、必須です。</param>
      <returns>オートメーションピアオブジェクト。</returns>
    </member>
    <member name="T:C1.WPF.C1BrushBuilder">
      <summary>入力色、設計ブラシ、および設計ブラシを外挿する色基準からブラシを作成します。</summary>
    </member>
    <member name="M:C1.WPF.C1BrushBuilder.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1BrushBuilder" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignBrushProperty">
      <summary>デザイナによって作成された元のブラシ。通常、これは設計色に基づく色の度合いです。</summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignColorProperty">
      <summary>設計の基になった基本色を取得または設定します。</summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.InputProperty">
      <summary>設計ブラシの外挿先の色となる入力を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignBrush">
      <summary>設計ブラシを取得または設定します。デザイナによって作成された元のブラシ。通常、これは設計色に基づく色の度合いです。</summary>
      <value>設計ブラシ。</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignColor">
      <summary>設計の基になった基本色を取得または設定します。</summary>
      <value>設計の色。</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Input">
      <summary>設計ブラシの外挿先の色となる入力を取得または設定します。</summary>
      <value>入力。</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.ExtrapolationMethod">
      <summary>外挿法を取得または設定します。</summary>
      <value>外挿法。</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Output">
      <summary>設計ブラシを入力色に外挿した結果のブラシを取得します。</summary>
      <value>出力。</value>
    </member>
    <member name="E:C1.WPF.C1BrushBuilder.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.BrushBuilderExtrapolationMethod">
      <summary>色の外挿をどのように行うかを決定します。</summary>
    </member>
    <member name="F:C1.WPF.BrushBuilderExtrapolationMethod.Absolute">
      <summary>彩度と輝度の絶対差を加算または減算して、外挿を行います。</summary>
    </member>
    <member name="T:C1.WPF.C1HslColor">
      <summary>指定された色の明度を上げ下げできるクラス。</summary>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <see cref="T:C1.WPF.C1HslColor" />構造の新しいインスタンスを初期化します。
      </summary>
      <param name="h">色相は、０～１の間の値になります。</param>
      <param name="s">彩度は、０～１の間の値になります。</param>
      <param name="l">輝度は、０～１の間の値になります。</param>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Byte,System.Single,System.Single,System.Single)">
      <summary>
        <see cref="T:C1.WPF.C1HslColor" />構造の新しいインスタンスを初期化します。
      </summary>
      <param name="a">アルファチャンネル。</param>
      <param name="h">色相は、０～１の間の値になります。</param>
      <param name="s">彩度は、０～１の間の値になります。</param>
      <param name="l">輝度は、０～１の間の値になります。</param>
    </member>
    <member name="M:C1.WPF.C1HslColor.#ctor(System.Windows.Media.Color)">
      <summary>
        <see cref="T:C1.WPF.C1HslColor" />構造の新しいインスタンスを初期化します。
      </summary>
      <param name="rgbColor">HSL 色の初期化に使用される RGB 色。</param>
    </member>
    <member name="P:C1.WPF.C1HslColor.Hue">
      <summary>色の色相を取得または設定します。</summary>
      <remarks>色相は、０～１の間の値になります。</remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Saturation">
      <summary>色の彩度を取得または設定します。</summary>
      <remarks>彩度は、０～１の間の値になります。</remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Luminance">
      <summary>色の輝度を取得または設定します。</summary>
      <remarks>輝度は、０～１の間の値になります。</remarks>
    </member>
    <member name="P:C1.WPF.C1HslColor.Alpha">
      <summary>色のアルファチャンネルを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.ClearStyleExtensions">
      <summary>Microsoft コントロールにブラシを渡すために使用される添付プロパティ。</summary>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.MouseOverBrushProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールのマウスオーバー状態ビジュアルスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetMouseOverBrush(System.Windows.FrameworkElement)">
      <summary>マウスオーバー状態ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetMouseOverBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>マウスオーバー状態ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">マウスオーバー状態で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.PressedBrushProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールの押下状態ビジュアルスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetPressedBrush(System.Windows.FrameworkElement)">
      <summary>押下状態ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetPressedBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>押下状態ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">押下状態で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.FocusBrushProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールのフォーカス状態ビジュアルスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetFocusBrush(System.Windows.FrameworkElement)">
      <summary>フォーカス状態ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetFocusBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>フォーカス状態ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">フォーカス状態で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonBackgroundProperty">
      <summary>この添付プロパティで、クリアスタイルボタンの背景を変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonBackground(System.Windows.FrameworkElement)">
      <summary>クリアスタイルボタンの背景ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>クリアスタイルボタンの背景ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">クリアスタイルボタンの背景で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonForegroundProperty">
      <summary>この添付プロパティで、クリアスタイルボタンの前景を変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonForeground(System.Windows.FrameworkElement)">
      <summary>クリアスタイルボタンの前景ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonForeground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>クリアスタイルボタンの前景ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">クリアスタイルボタンの前景で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonCornerRadiusProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールのボタンの角の丸みを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonCornerRadius(System.Windows.FrameworkElement)">
      <summary>ボタンの CornerRadius を取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
      <summary>ボタンの CornerRadius を設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">境界で使用される CornerRadius。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CaretBrushProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールのカレット状態ビジュアルスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCaretBrush(System.Windows.FrameworkElement)">
      <summary>カレット状態ブラシを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCaretBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>カレット状態ブラシを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">カレット状態で使用されるブラシ。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CornerRadiusProperty">
      <summary>この添付プロパティで、クリアスタイルコントロールのフォーカス状態ビジュアルスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
      <summary>CornerRadius を取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
      <summary>CornerRadius を設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">境界で使用される CornerRadius。</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ScrollBarStyleProperty">
      <summary>この添付プロパティで、スクロールバーのスタイルを変更できます。</summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetScrollBarStyle(System.Windows.FrameworkElement)">
      <summary>スクロールバーのスタイルを取得します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetScrollBarStyle(System.Windows.FrameworkElement,System.Windows.Style)">
      <summary>スクロールバーのスタイルを設定します。</summary>
      <param name="element">この添付プロパティを持つ要素。</param>
      <param name="value">スクロールバーで使用されるスタイル。</param>
    </member>
    <member name="T:C1.WPF.ColorConverter">
      <summary>色とブラシを相互に変換します。</summary>
    </member>
    <member name="T:C1.WPF.C1EditableContentControl">
      <summary>TextBox を使って編集モードをサポートする ContenControl。</summary>
      <summary>TextBox を使って編集モードをサポートする ContenControl。</summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>
        <see cref="P:Content" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsEditableChanged(System.Boolean)">
      <summary>IsEditable 値が変更されました。</summary>
      <param name="oldValue">古い IsEditable 値</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsInEditModeChanged(System.Boolean)">
      <summary>コントロールはモードを変更しました。</summary>
      <param name="oldValue">古い IsInEditMode 値</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCompleted">
      <summary>
        <see cref="E:C1.Silverlight.C1EditableContentControl.EditCompleted" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCanceled">
      <summary>
        <see cref="E:C1.Silverlight.C1EditableContentControl.EditCanceled" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditStarted">
      <summary>
        <see cref="E:C1.Silverlight.C1EditableContentControl.EditStarted" />イベントを発生させます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ShouldEnterEditModeOnKeyDown(System.Windows.Input.Key)">
      <summary>特定のキーが押されたときにコントロールが編集モードに入るかどうかを定義するために呼び出されます。たとえば、矢印キーでは編集モードに入らないようにできます。</summary>
      <param name="key">押されたキー。</param>
      <returns>コントロールが編集モードに入った場合は true。</returns>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.UpdateVisualState">
      <summary>このコントロールの表示状態を更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsEditableProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.IsEditable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsInEditModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.IsInEditMode" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.EditControlProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.EditControl" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentControlProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.ContentControl" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentConverterProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.ContentConverter" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1EditableContentControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCompleted">
      <summary>ユーザーが編集を完了したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCanceled">
      <summary>ユーザーが変更なしで編集モードを終了したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditStarted">
      <summary>コントロールが編集モードに入ったときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsDirty">
      <summary>編集モード中に要素が編集されたかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsEditable">
      <summary>コントロールが編集可能かどうかを取得/設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsInEditMode">
      <summary>コントロールがいつ編集モードに入るかを取得/設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentControl">
      <summary>編集モードでない場合に表示されるコントロール。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentConverter">
      <summary>編集されたコンテンツからコントロールコンテンツを作成するために使用されます。</summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1EditableContentControl.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1FilePicker">
      <summary>１つまたは複数のファイルを選択できるダイアログボックスコントロールを開くファイルピッカー。</summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnSelectedFilesChanged(System.EventArgs)">
      <summary>SelectedFilesChanged イベントを発生させます。</summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OpenRead">
      <summary>読み取り用に選択されたファイルを開きます。</summary>
      <remarks>
        WPF の部分信頼状態では
        <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />にアクセスすることはできませんが、このメソッドは機能します。
      </remarks>
      <returns>選択されたファイルのストリーム。</returns>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ClearSelection">
      <summary>選択されたファイルを削除します。</summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.WatermarkProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.Watermark" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.BrowseContentProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.BrowseContent" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MultiselectProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.Multiselect" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.Filter" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterIndexProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.FilterIndex" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFileProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFilesProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.InitialDirectoryProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.InitialDirectory" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.SelectionBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.SelectionForeground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.ButtonBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.ButtonForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1FilePicker" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1FilePicker.SelectedFilesChanged">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFileName">
      <summary>選択されたファイルの名前を取得します。</summary>
      <remarks>
        WPF の部分信頼状態では
        <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />にアクセスすることはできませんが、このプロパティは機能します。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1FilePicker.HasSelectedFiles">
      <summary>ファイルが選択された場合は true。</summary>
    </member>
    <member name="E:C1.WPF.C1FilePicker.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.TextAlignment">
      <summary>
        テキストを
        <see cref="T:C1.WPF.C1FilePicker" />内に配置する方法を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.IsFocused">
      <summary>コントロールにフォーカスがある場合は true、そうでない場合は false を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Watermark">
      <summary>ウォーターマークの内容を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.BrowseContent">
      <summary>［参照］ボタンのコンテンツを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Multiselect">
      <summary>複数のファイルを選択できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Filter">
      <summary>
        <see cref="T:System.Windows.Controls.OpenFileDialog" />に適用されるフィルタを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FilterIndex">
      <summary>
        <see cref="T:System.Windows.Controls.OpenFileDialog" />に適用されるフィルタインデックスを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFile">
      <summary>ユーザーが選択したファイルを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFiles">
      <summary>ユーザーが選択したファイルを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.InitialDirectory">
      <summary>ファイルダイアログに表示される初期ディレクトリを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.C1FilePicker.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1FilePicker.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonBackground">
      <summary>
        コントロール内のボタンの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonForeground">
      <summary>
        コントロール内のボタンの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TextEditableContentControl">
      <summary>
        編集モードでは
        <see cref="T:System.Windows.Controls.TextBox" />、読み取り専用モードでは
        <see cref="T:System.Windows.Controls.ContentControl" />を提供するデュアルコントロール。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.ChangeVisualStateWatermark(System.Boolean)">
      <summary>Watermark 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.WatermarkProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.Watermark" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.IsWatermarkedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.IsWatermarked" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionForeground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.CaretBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextEditableContentControl.CaretBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TextEditableContentControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.ValidateInput">
      <summary>編集が完了したときに発生するイベント。新しい入力を検証するには、このイベントを処理します。</summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyDown">
      <summary>EditableTextBox でキーが押されたときに発生するイベント。</summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyUp">
      <summary>EditableTextBox でキーが放されたときに発生するイベント。</summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextEdited">
      <summary>EditableTextBox でテキストが編集されたときに発生するイベント。</summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.EditTextBox">
      <summary>
        編集モード中に使用される
        <see cref="T:C1.Silverlight.C1TextBoxBase" />。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.TextAlignment">
      <summary>
        テキストを
        <see cref="T:C1.WPF.C1TextEditableContentControl" />内に配置する方法を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.Watermark">
      <summary>コントロールが空のときに表示されるウォーターマークの内容を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.IsWatermarked">
      <summary>ウォーターマークが表示されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.CaretBrush">
      <summary>
        入力コントロールの点滅カーソルの
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.ValidateInputEventArgs">
      <summary>入力を検証するために発生するイベントの引数。</summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.Input">
      <summary>新しいテキスト入力。</summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.IsValidInput">
      <summary>このフラグを使用して、入力が無効な場合に編集を元に戻します。</summary>
    </member>
    <member name="T:C1.WPF.ISpellChecker">
      <summary>スペルチェックサービスを提供します。</summary>
      <remarks>このインターフェイスは、C1.Silverlight.SpellChecker アセンブリの C1SpellChecker によって実装されます。</remarks>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckText(System.String)">
      <summary>テキストを含む文字列をチェックし、スペルミスのリストを返します。</summary>
      <param name="text">スペルチェックされるテキスト。</param>
      <returns>
        スペルミスを記述する
        <see cref="T:C1.WPF.ICharRange" />オブジェクトのリスト。
      </returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.GetSuggestions(System.String,System.Int32)">
      <summary>スペルミスの単語に対する正しいスペルの候補のリストを取得します。</summary>
      <param name="word">正しいスペルの候補が提案される単語。</param>
      <param name="maxSuggestions">提供する候補の最大数。</param>
      <returns>
        <paramref name="word" />パラメータに対する正しいスペルの候補のリスト。
      </returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.ShowSuggestionsMenu(System.Object,System.Windows.Point,System.String,System.Action{System.String})">
      <summary>スペルミスの単語に対する正しいスペルの候補を含むコンテキストメニューを表示します。</summary>
      <param name="editor">内容をスペルチェックするエディタコントロール。</param>
      <param name="position">メニューを開く位置の絶対プラグイン座標。</param>
      <param name="word">スペルミスの単語。</param>
      <param name="correctCallback">修正候補が選択されたときに呼び出されるコールバック。</param>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckControlAsync(System.Object)">
      <summary>エディタコントロールのスペルチェックダイアログを表示します。</summary>
      <param name="editor">スペルチェックされるテキストを含むオブジェクト。</param>
    </member>
    <member name="P:C1.WPF.ISpellChecker.IgnoreList">
      <summary>スペルチェック時に無視する単語のリストを取得します。</summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.UserDictionary">
      <summary>スペルチェックに使用するユーザー辞書を取得します。</summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.Enabled">
      <summary>メインのスペル辞書がロードされているかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.ISpellChecker.DictionaryChanged">
      <summary>いずれかのスペル辞書が変更された場合に発生するイベント。</summary>
      <remarks>このイベントは、スペル辞書が変更されており、テキストを再チェックする必要があることをリスナーに通知します。たとえば、ユーザー辞書に単語が追加された場合や、新しい辞書がロードされた場合に発生します。</remarks>
    </member>
    <member name="T:C1.WPF.ICharRange">
      <summary>
        文字列内の文字の範囲を表します。これは、テキスト内で見つかったスペルミスを表すために
        <see cref="T:C1.WPF.ISpellChecker" />によって使用されます。
      </summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Start">
      <summary>範囲の始まりのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Length">
      <summary>範囲の長さを取得します。</summary>
    </member>
    <member name="T:C1.WPF.TextEditedEventArgs">
      <summary>AutoComplete イベントの詳細。</summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.LastKey">
      <summary>最終キーを取得または設定します。</summary>
      <value>最後のキー。</value>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentText">
      <summary>現在のテキスト。</summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentSelectionStart">
      <summary>現在の選択の開始。</summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewText">
      <summary>AutoComplete 後にコントロールに配置されるテキスト。</summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewSelectionStart">
      <summary>AutoComplete 後に選択が開始されるインデックス。</summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.Cancel">
      <summary>新しいテキストの入力をキャンセルします。</summary>
    </member>
    <member name="T:C1.WPF.C1DragHelper">
      <summary>慣性をサポートするドラッグジェスチャを監視するクロスプラットフォームヘルパー。</summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.#ctor(System.Windows.UIElement,C1.WPF.C1DragHelperMode,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        新しい
        <see cref="T:C1.WPF.C1DragHelper" />を初期化します。
      </summary>
      <param name="element">
        ドラッグジェスチャを監視する対象の
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="mode">監視されるドラッグの種類を示します。操作終了後に DragDelta イベントが発生するように慣性フラグを他のフラグと組み合わせます（C1DragHelperMode.FreeDrag | C1DragHelperMode.Inertia など）。</param>
      <param name="initialThreshold">何ピクセル動いたところでジェスチャが開始されるかを指定します。０を設定すると、ジェスチャはポインタダウンで開始され、指定されたパラメータにかかわらず captureElementOnPointerPressed は true になります。そうでない場合、ジェスチャはマウスの移動で開始されます。デフォルト値は１です</param>
      <param name="captureElementOnPointerPressed">
        ポインタ押下イベント（SL と WPF の MouseLeftButtonDown および WinRT の PointerPressed）で要素をキャプチャするか、最初のポインタ移動イベント（SL と WPF の MouseMove および WinRT の PointerMoved）で要素をキャプチャするかを示します。initialThreshold が０の場合、このパラメータは無視されます。
        <remarks>マウスダウンで要素をキャプチャすると、サブ要素（ビジュアルツリー内のネストされた要素）で Click、DoubleClick、および MouseLeftButtonUp イベントが発生しなくなりますが、最初のマウス移動で要素をキャプチャすると、エンドユーザーが小さい要素をすばやくドラッグすることが難しくなる可能性があります。</remarks></param>
      <param name="handledEventsToo">マウスイベントが既に処理された後もドラッグジェスチャを監視するかどうかを示します。(これは、マウスジェスチャにのみ適用されます)</param>
      <param name="useManipulationEvents">true に設定すると、Manipulation イベントを使用してジェスチャを監視します。そうでない場合は、Pointer イベントを使用します。</param>
      <param name="useRightButton">
        <c>true</c>に設定すると、左マウスボタンイベントではなく、右マウスボタンダウン/アップイベントを監視します（WinRT では、useManipulationEvents が false に設定されている場合にのみこれが適用されます）。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragHelper.FinalizeDrag">
      <summary>すべてのイベントハンドラをデタッチし、キャプチャした要素を解放します。</summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.Complete">
      <summary>ドラッグジェスチャを終了します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragStarting">
      <summary>ドラッグジェスチャが開始されようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragStarted">
      <summary>ドラッグジェスチャが開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragDelta">
      <summary>ドラッグジェスチャの実行中に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragCompleted">
      <summary>ドラッグジェスチャの完了後に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragHelper.DragInertiaStarted">
      <summary>慣性が開始しようとするときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1DragEventArgs">
      <summary>ドラッグイベントの情報が含まれます。</summary>
    </member>
    <member name="T:C1.WPF.C1InputEventArgs">
      <summary>ドラッグイベントの情報が含まれます。</summary>
    </member>
    <member name="M:C1.WPF.C1InputEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>ドラッグジェスチャを実行しているポインタの指定された要素に対する相対的な位置を取得します。</summary>
      <param name="relativeTo">同じオブジェクトツリーに接続された UIElement 派生オブジェクト。座標系全体に対するオブジェクトの位置を指定するには、relativeTo の値を null にします。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1InputEventArgs.GetPosition(System.Windows.RoutedEventArgs,System.Windows.UIElement)">
      <summary>ポインタまたは指の位置を取得します。</summary>
      <param name="args">
        操作データを含む
        <see cref="T:System.Windows.RoutedEventArgs" />インスタンス。
      </param>
      <param name="relativeTo">同じオブジェクトツリーに接続された UIElement 派生オブジェクト。座標系全体に対するオブジェクトの位置を指定するには、relativeTo の値を null にします。</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.OriginalEventArgs">
      <summary>このイベントを発生させた元のイベントの引数を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.Handled">
      <summary>ルーティングされたイベントを処理済みとマークする値を取得または設定します。true に設定すると、このイベントルート上にあるほとんどのハンドラは、このイベントを再度処理しなくなります。</summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.OriginalSource">
      <summary>イベントを発生させたオブジェクトへの参照を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1InputEventArgs.PointerDeviceType">
      <summary>アクションを実行したポインタのタイプを取得します。</summary>
      <remarks>Silverlight で正しいデバイスタイプを受け取るには、'windowless' プラグインパラメータが false に設定されている必要があります。そうでない場合は、実際のデバイスタイプではなく、'Mouse' が返されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1DragEventArgs.DragHelper">
      <summary>
        イベントを生成した
        <see cref="T:C1.WPF.C1DragHelper" />への参照を取得します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1DragStartingEventArgs">
      <summary>DragStarting イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.Mode">
      <summary>監視されるドラッグの種類を示すモードを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.CaptureElementOnPointerPressed">
      <summary>
        ポインタ押下イベント（SL と WPF の MouseLeftButtonDown および WinRT の PointerPressed）で要素をキャプチャするか、最初のポインタ移動イベント（SL と WPF の MouseMove および WinRT の PointerMoved）で要素をキャプチャするかを示す値を取得または設定します。
        <remarks>マウスダウンで要素をキャプチャすると、サブ要素（ビジュアルツリー内のネストされた要素）で Click、DoubleClick、および MouseLeftButtonUp イベントが発生しなくなりますが、最初のマウス移動で要素をキャプチャすると、エンドユーザーが小さい要素をすばやくドラッグすることが難しくなる可能性があります。</remarks></summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.InitialThreshold">
      <summary>開始するまでにジェスチャが通過するピクセルの数を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragStartingEventArgs.Cancel">
      <summary>このジェスチャの認識がキャンセルされたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1DragStartedEventArgs">
      <summary>DragStarted イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1DragStartedEventArgs.Origin">
      <summary>ジェスチャが開始された絶対ポイントを取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1DragDeltaEventArgs">
      <summary>DragDelta イベントの情報が含まれます。</summary>
    </member>
    <member name="M:C1.WPF.C1DragDeltaEventArgs.Complete">
      <summary>慣性を適用することなく操作を完了します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.DeltaTranslation">
      <summary>平行移動の変化量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.CumulativeTranslation">
      <summary>平行移動の累積量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragDeltaEventArgs.IsInertial">
      <summary>このイベントが直接の操作で発生したか、慣性であるかを示す値を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1DragInertiaStartedEventArgs">
      <summary>DragInertiaStarted イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1DragInertiaStartedEventArgs.Velocity">
      <summary>慣性の開始前のジェスチャの速度を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1DragInertiaStartedEventArgs.DesiredDeceleration">
      <summary>ドラッグ慣性の減速度を取得または設定します（ピクセル/ミリ秒）。</summary>
    </member>
    <member name="T:C1.WPF.C1DragCompletedEventArgs">
      <summary>DragCompleted イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1DragCompletedEventArgs.CumulativeTranslation">
      <summary>平行移動の累積量を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1PointerDeviceType">
      <summary>ドラッグ操作を実行できる各種デバイスを列挙します。</summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Mouse">
      <summary>マウスデバイス</summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Touch">
      <summary>タッチ画面</summary>
    </member>
    <member name="F:C1.WPF.C1PointerDeviceType.Pen">
      <summary>ペンデバイス</summary>
    </member>
    <member name="T:C1.WPF.C1DragHelperMode">
      <summary>監視されるドラッグジェスチャの種類を決定します。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateX">
      <summary>x 座標のみを考慮してドラッグを行います。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateY">
      <summary>y 座標のみを考慮してドラッグを行います。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateXY">
      <summary>ジェスチャで x 座標と y 座標の両方が考慮されます。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.Inertia">
      <summary>ドラッグの終了時に慣性を適用します。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateRailX">
      <summary>x 方向にドラッグが開始された場合に x 座標でドラッグを行います。</summary>
    </member>
    <member name="F:C1.WPF.C1DragHelperMode.TranslateRailY">
      <summary>y 方向にドラッグが開始された場合に y 座標でドラッグを行います。</summary>
    </member>
    <member name="T:C1.WPF.C1ScrollHelper">
      <summary>マウスホイールを使用したスクロールジェスチャを監視するクロスプラットフォームヘルパー。</summary>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        新しい
        <see cref="T:C1.WPF.C1ScrollHelper" />を初期化します。
      </summary>
      <param name="element">
        ズームジェスチャを監視する対象の
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="avoidIfCtrlPressed">ジェスチャを開始するために［Ctrl］キーを押す必要があるかどうかを設定します。</param>
      <param name="continuousScroll">true に設定すると、連続するスクロールを実行する中間イベントが発生します。そうでない場合は、ネイティブマウスホイールイベントからイベントが発生します。</param>
      <param name="handleMouseWheel">マウスホイールイベントの Handled プロパティを true に設定するかどうかを設定します。</param>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.FinalizeScroll">
      <summary>すべてのイベントハンドラをデタッチします。</summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollStarted">
      <summary>スクロールジェスチャが開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollDelta">
      <summary>スクロールジェスチャの実行中に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ScrollHelper.ScrollCompleted">
      <summary>スクロールジェスチャの完了後に発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1ScrollEventArgs">
      <summary>スクロールイベントの情報が含まれます。</summary>
    </member>
    <member name="T:C1.WPF.C1ScrollStartedEventArgs">
      <summary>ScrollStarted イベントの情報が含まれます。</summary>
    </member>
    <member name="T:C1.WPF.C1ScrollDeltaEventArgs">
      <summary>ScrollDelta イベントの情報が含まれます。</summary>
    </member>
    <member name="M:C1.WPF.C1ScrollDeltaEventArgs.Complete">
      <summary>慣性を適用することなく操作を完了します。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollDeltaEventArgs.DeltaScroll">
      <summary>スクロールの変化量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollDeltaEventArgs.CumulativeScroll">
      <summary>スクロールの累積量を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1ScrollCompletedEventArgs">
      <summary>ScrollCompleted イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollCompletedEventArgs.CumulativeScroll">
      <summary>スクロールの累積量を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1TapHelper">
      <summary>タップイベントとダブルタップイベントを監視するクロスプラットフォームヘルパー。</summary>
    </member>
    <member name="M:C1.WPF.C1TapHelper.#ctor(System.Windows.UIElement,System.Boolean)">
      <summary>
        <see cref="T:C1.WPF.C1TapHelper" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="element">
        タップジェスチャを監視する対象の
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="handledEventsToo">マウスイベントが既に処理された後もタップジェスチャを監視するかどうかを示します。(これは、マウスジェスチャにのみ適用されます)</param>
    </member>
    <member name="E:C1.WPF.C1TapHelper.Tapped">
      <summary>要素がタップ（マウスの場合はクリック）されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.DoubleTapped">
      <summary>要素がダブルタップ（マウスの場合はダブルクリック）されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.RightTapped">
      <summary>要素が右マウスボタンでタップされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1TapHelper.Holding">
      <summary>要素上でホールドジェスチャが実行されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1TappedEventArgs">
      <summary>タップイベントの情報が含まれます。</summary>
    </member>
    <member name="M:C1.WPF.C1TappedEventArgs.#ctor(System.Windows.RoutedEventArgs,System.Boolean)">
      <summary>
        <see cref="T:C1.WPF.C1TappedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="originalArgs">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />インスタンス。
      </param>
      <param name="isRightTapped">
        イベントがマウスの右ボタンを使用して実行された場合は、
        <c>true</c>に設定されます。
      </param>
    </member>
    <member name="P:C1.WPF.C1TappedEventArgs.IsRightTapped">
      <summary>イベントがマウスの右ボタンを使用して実行されたかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomHelper">
      <summary>マウスまたは指を使用したズームジェスチャを監視するクロスプラットフォームヘルパー。</summary>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        新しい
        <see cref="T:C1.WPF.C1ZoomHelper" />を初期化します。
      </summary>
      <param name="element">
        ズームジェスチャを監視する対象の
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="ctrlRequired">ジェスチャを開始するために［Ctrl］キーを押す必要があるかどうかを設定します。</param>
      <param name="continuousZoom">true に設定すると、連続するズームを実行する中間イベントが発生します。そうでない場合は、ネイティブマウスホイールイベントからイベントが発生します。</param>
      <param name="handleMouseWheel">マウスホイールイベントの Handled プロパティを true に設定するかどうかを設定します。</param>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.FinalizeZoom">
      <summary>すべてのイベントハンドラをデタッチし、キャプチャした要素を解放します。</summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomStarted">
      <summary>ズームジェスチャが開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomDelta">
      <summary>ズームジェスチャの実行中に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ZoomHelper.ZoomCompleted">
      <summary>ズームジェスチャの完了後に発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomEventArgs">
      <summary>ズームイベントの情報が含まれます。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomStartedEventArgs">
      <summary>ZoomStarted イベントの情報が含まれます。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomDeltaEventArgs">
      <summary>ZoomDelta イベントの情報が含まれます。</summary>
    </member>
    <member name="M:C1.WPF.C1ZoomDeltaEventArgs.Complete">
      <summary>慣性を適用することなく操作を完了します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.DeltaScale">
      <summary>スケーリングの変化量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.CumulativeScale">
      <summary>スケーリングの累積量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.UniformDeltaScale">
      <summary>一様スケーリングの変化量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.UniformCumulativeScale">
      <summary>一様スケーリングの累積量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.DeltaTranslation">
      <summary>平行移動の変化量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomDeltaEventArgs.CumulativeTranslation">
      <summary>平行移動の累積量を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomCompletedEventArgs">
      <summary>ZoomCompleted イベントの情報が含まれます。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.CumulativeScale">
      <summary>スケーリングの累積量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.UniformCumulativeScale">
      <summary>一様スケーリングの累積量を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomCompletedEventArgs.CumulativeTranslation">
      <summary>平行移動の累積量を取得します。</summary>
    </member>
    <member name="T:C1.WPF.ItemPreparedEventArgs">
      <summary>項目準備/クリアイベントのイベントデータを保持します。このイベントは、C1HierarchicalPresenter から派生されたクラスの PrepareContainerForItemOverride メソッドと ClearContainerForItemOverride メソッドに関連付けられます。PrepareContainerForItemOverride と ClearContainerForItemOverride は、ビジュアル要素を準備/クリアして、指定されたデータ連結項目を表示するために呼び出されます。</summary>
    </member>
    <member name="P:C1.WPF.ItemPreparedEventArgs.Element">
      <summary>指定された項目を表示するときに使用される要素。</summary>
    </member>
    <member name="P:C1.WPF.ItemPreparedEventArgs.Item">
      <summary>表示する項目。</summary>
    </member>
    <member name="T:C1.WPF.C1ItemsControl">
      <summary>項目のコレクションを表すために使用できるコントロールを表します。</summary>
    </member>
    <member name="F:C1.WPF.C1ItemsControl.ItemStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1ItemsControl.ItemStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ItemsControl.ItemTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ItemsControl.ItemTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ItemsControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ItemsControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ItemsControl.ItemStyle">
      <summary>この項目コントロールのすべての項目に適用されるスタイルです。</summary>
    </member>
    <member name="P:C1.WPF.C1ItemsControl.ItemTemplate">
      <summary>リストのすべての項目に適用されるテンプレートです。</summary>
    </member>
    <member name="T:C1.WPF.C1HeaderedItemsControl">
      <summary>ヘッダーとコンテンツを持つ項目のコレクションを表すために使用できるコントロールを表します。</summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedItemsControl.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelectorProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelector" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedItemsControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1HeaderedItemsControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplate">
      <summary>リストのすべての項目のヘッダーに適用されるテンプレートです。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedItemsControl.HeaderTemplateSelector">
      <summary>項目のヘッダーに適用されるさまざまなテンプレートを指定するために使用されるテンプレートセレクタ。</summary>
    </member>
    <member name="T:C1.WPF.C1ListBox">
      <summary>負荷の大きいテンプレートおよびすばやくスクロールするためのプレビューテンプレートと共に使用できる項目のリスト。</summary>
      <remarks>このコントロールは、クロススライドジェスチャによる選択をサポートします。</remarks>
    </member>
    <member name="T:C1.WPF.C1ListViewer">
      <summary>負荷の大きいテンプレートおよびすばやくスクロールするためのプレビューテンプレートと共に使用できる項目のリスト。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.InitializeScrollViewerPart">
      <summary>スクロールビューアパートを初期化します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.InitializePanel">
      <summary>パネルが初めてロードされるときに、パネルを初期化します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.GetIndexAt(System.Windows.Point)">
      <summary>画面内の指定された位置にある項目のインデックスを取得します。</summary>
      <param name="screenPoint">このコントロールに相対的な画面内のポイント。</param>
      <returns>項目のインデックス。そうでない場合は、-1</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ScrollToVerticalOffset(System.Double)">
      <summary>指定された垂直方向のオフセット位置までコンテンツをスクロールします。</summary>
      <param name="offset">垂直方向のオフセット位置。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>指定された水平方向のオフセット位置までコンテンツをスクロールします。</summary>
      <param name="offset">水平方向のオフセット位置。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.IsItemItsOwnContainerOverride(System.Object)">
      <summary>指定された項目が自身のコンテナである（になることができる）かどうかを指定します。</summary>
      <param name="item">チェックする項目。</param>
      <returns>項目が自身のコンテナである（になることができる）場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.GetContainerForItemOverride">
      <summary>指定された項目を表示するときに使用される要素を作成または識別します。</summary>
      <returns>指定された項目を表示するために使用される要素。</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewer.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>指定された項目を表示するために指定された要素を準備します。</summary>
      <param name="element">指定された項目を表示するときに使用される要素。</param>
      <param name="item">表示する項目。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
        <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" />メソッドの効果を元に戻します。
      </summary>
      <param name="element">コンテナ要素。</param>
      <param name="item">項目。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnItemTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>項目の１つがタップされたときに呼び出されます。</summary>
      <param name="sender">タップされた項目。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.WPF.C1TappedEventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnItemHolding(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>項目の１つが Hold イベントを受け取ったときに呼び出されます。</summary>
      <param name="sender">Hold イベントを受け取った項目。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.WPF.C1TappedEventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.BringIntoView(System.Windows.Rect,System.Boolean,System.Action)">
      <summary>指定された四角形領域をビューに表示します。</summary>
      <param name="area">ビューに表示する領域。</param>
      <param name="changeZoomIfNecessary">true にすると、領域全体が表示されるようにズームが変更されます。</param>
      <param name="completed">操作が完了した後に呼び出されるアクション。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.ZoomAnimation(System.Double,System.Windows.Point,System.Action)">
      <summary>ズームアニメーションを呼び出します。</summary>
      <param name="targetZoom">ターゲットズーム。</param>
      <param name="screenPoint">アニメーションの固定位置となる画面ポイント。</param>
      <param name="completed">アニメーションが完了したときに呼び出されるアクション。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewer.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ItemWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ItemWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ItemHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ItemHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.PreviewItemTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.PreviewItemTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.Orientation" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.RefreshWhileScrollingProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.RefreshWhileScrolling" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ViewportGapProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ViewportGap" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ViewportPreviewGapProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ViewportPreviewGap" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ZoomProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.Zoom" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MinZoomProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.MinZoom" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MaxZoomProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.MaxZoom" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ZoomModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ZoomMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.VerticalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.VerticalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.HorizontalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ButtonBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ButtonBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.ButtonForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.ButtonForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewer.IsSwipeEnabledProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewer.IsSwipeEnabled" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ListViewer" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ListViewer" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1ListViewer.VerticalOffsetChanged">
      <summary>垂直方向のオフセットが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.HorizontalOffsetChanged">
      <summary>水平方向のオフセットが変更されると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ZoomChanged">
      <summary>ズームが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemContainerLoaded">
      <summary>コンテナがロードされた後に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemContainerUnloading">
      <summary>コンテナがアンロードされる前に発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemClick">
      <summary>項目がクリックされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemTapped">
      <summary>項目がタップされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewer.ItemHolding">
      <summary>項目が保持されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsScrolling">
      <summary>このリストがスクロール中であるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualZoom">
      <summary>実際のズームを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualMinZoom">
      <summary>実際の最小ズームを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ActualMaxZoom">
      <summary>実際の最大ズームを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsZooming">
      <summary>このリストがズーム中であるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ItemWidth">
      <summary>各項目の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ItemHeight">
      <summary>各項目の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.PreviewItemTemplate">
      <summary>項目のプレビューに使用されるテンプレートを取得または設定します。</summary>
      <remarks>プレビュー項目を使用するのは、パフォーマンスの理由によります。</remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Orientation">
      <summary>リストを表示する方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.RefreshWhileScrolling">
      <summary>スクロールの実行中にビューポイントを更新する必要があるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ViewportGap">
      <summary>毎回のレイアウトパスでビューポートのサイズを決定する係数を取得または設定します。０を指定すると、ビューポートのサイズはスクロールビューアのビューポートと同じになります。0.5 を指定すると、ビューポートが元のビューポートの両側に合わせて画面の半分だけ大きくなるように拡大されます。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ViewportPreviewGap">
      <summary>毎回のレイアウトパスでプレビューモードの項目をレンダリングするためのビューポートのサイズを決定する係数を取得または設定します。</summary>
      <remarks>有効にするには、この係数を ViewportGap より大きくする必要があります。</remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Zoom">
      <summary>このリストに適用されるズームを取得または設定します。</summary>
      <remarks>ズームは、MinZoom&gt;MaxZoom&gt;Zoom の優先順位に従い、MinZoom プロパティと MaxZoom プロパティに合わせて調整されます</remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MinZoom">
      <summary>使用できる最小ズームを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MaxZoom">
      <summary>使用できる最大ズームを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ZoomMode">
      <summary>ズームが有効か無効かを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.VerticalScrollBarVisibility">
      <summary>垂直スクロールバーを表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.HorizontalScrollBarVisibility">
      <summary>水平方向の ScrollBar を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ButtonBackground">
      <summary>
        コントロール内のボタンの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ButtonForeground">
      <summary>
        コントロール内のボタンの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.IsSwipeEnabled">
      <summary>このビューがスワイプ操作の個別入力処理をサポートしているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.InitializePanel">
      <summary>パネルが初めてロードされるときに、パネルを初期化します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.OnItemTapped(System.Object,C1.WPF.C1TappedEventArgs)">
      <summary>項目の１つがタップされたときに呼び出されます。</summary>
      <param name="sender">タップされた項目。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.WPF.C1TappedEventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1ListBox.ClearSelection">
      <summary>選択範囲をクリアします。</summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.OnSelectionChanged(System.Object,System.EventArgs)">
      <summary>選択範囲が変更されたときに呼び出されます。</summary>
      <param name="sender">送信元。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />インスタンス。
      </param>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectionModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBox.SelectionMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedItemProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBox.SelectedItem" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedItemsProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBox.SelectedItems" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBox.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBox.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBox.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListBox.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ListBox" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1ListBox.SelectionChanged">
      <summary>選択が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectionMode">
      <summary>選択範囲が無効、単一、複数、拡張のどれかであるかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedItem">
      <summary>選択されている項目を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedItems">
      <summary>選択されている項目のリストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListBox.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1ListViewerItem">
      <summary>
        <see cref="T:C1.WPF.C1ListViewer" />内で使用されるビジュアル要素。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.ChangeVisualStatePreview(System.Boolean)">
      <summary>Preview 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.StateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewerItem.State" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.PreviewContentProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewerItem.PreviewContent" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerItem.PreviewContentTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewerItem.PreviewContentTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ListViewerItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerItem.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ListViewerItem" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.State">
      <summary>項目の状態（Preview または Full）を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.PreviewContent">
      <summary>プレビュー状態のコンテンツを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerItem.PreviewContentTemplate">
      <summary>プレビュー状態の場合に使用する DataTemplate を取得または設定します。</summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItem.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBoxItem.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItem.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListBoxItem.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListBoxItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ListBoxItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListBoxItem.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ListBoxItem" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ListBoxItem.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ListBoxItem.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1ListBoxItemState">
      <summary>
        <see cref="T:C1.WPF.C1ListBoxItem" />の状態。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItemState.Preview">
      <summary>
        <see cref="T:C1.WPF.C1ListBoxItem" />のプレビューテンプレートを表示します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListBoxItemState.Full">
      <summary>
        <see cref="T:C1.WPF.C1ListBoxItem" />のフルテンプレートを表示します。
      </summary>
    </member>
    <member name="T:C1.WPF.ZoomMode">
      <summary>ScrollViewer コンテンツのズーム動作の現在のモードを示します。</summary>
    </member>
    <member name="F:C1.WPF.ZoomMode.Disabled">
      <summary>コンテンツのズームは無効です。</summary>
    </member>
    <member name="F:C1.WPF.ZoomMode.Enabled">
      <summary>コンテンツのズームは有効です。</summary>
    </member>
    <member name="T:C1.WPF.C1ListViewerPanel">
      <summary>すばやくスクロールするためのプレビューテンプレートをサポートする仮想化スタックパネル。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ListViewerPanel" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ListViewerPanel.ZoomProperty">
      <summary>
        <see cref="P:C1.WPF.C1ListViewerPanel.Zoom" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.Refresh">
      <summary>すべての子を削除して再度作成することで、このインスタンスをリフレッシュします。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.MeasureOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Measure の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Measure の受け渡し動作を定義することができます。</summary>
      <param name="availableSize">
        このオブジェクトが子オブジェクトに与えることができるサイズ。無限大（
        <see cref="F:System.Double.PositiveInfinity" />）は、どのようなコンテンツにもオブジェクトのサイズを合わせられることを示す値として指定できます。
      </param>
      <returns>このオブジェクトがレイアウトの際に必要と判断したサイズ。子オブジェクトに割り当てられたサイズが計算されるほか、固定のコンテナサイズなどの事項が考慮されます。</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Arrange の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Arrange の受け渡し動作を定義することができます。</summary>
      <param name="finalSize">親の内部で、このオブジェクトがそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>要素がレイアウトに配置された後で使用される実際のサイズ。</returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.OnClearChildren">
      <summary>
        子要素のコレクションが基本
        <see cref="T:System.Windows.Controls.Panel" />クラスによってクリアされるときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
        この
        <see cref="T:System.Windows.Controls.Panel" />の
        <see cref="T:System.Windows.Controls.ItemsControl" />に関連付けられている
        <see cref="P:System.Windows.Controls.ItemsControl.Items" />コレクションが変更されたときに呼び出されます。
      </summary>
      <param name="sender">
        イベントを発生させた
        <see cref="T:System.Object" />。
      </param>
      <param name="args">
        <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" />イベントのデータを提供します。
      </param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.AfterItemPrepared(C1.WPF.C1ListViewerItem)">
      <summary>項目をパネルに表示する準備ができた後に呼び出されます。</summary>
      <param name="listBoxItem">今準備された項目コンテナ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.BeforeItemRecycled(C1.WPF.C1ListViewerItem)">
      <summary>項目が再利用される前に呼び出されます。</summary>
      <param name="listBoxItem">再利用される項目コンテナ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.CalculateExtentSize">
      <summary>パネルのサイズを決定する範囲のサイズを計算します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.NeedsMoreItems">
      <summary>ビューポートが下端に近いときは true を取得します。</summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetItemsCountInViewport">
      <summary>ビューポート内の項目の数を取得します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Size)">
      <summary>サイズを絶対座標からレンダリング座標に変換します。</summary>
      <param name="size">変換されるサイズ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Point)">
      <summary>ポイントを絶対座標からレンダリング座標に変換します。</summary>
      <param name="size">変換されるポイント。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Windows.Rect)">
      <summary>四角形を絶対座標からレンダリング座標に変換します。</summary>
      <param name="rect">変換される四角形。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToRenderCoordinates(System.Double)">
      <summary>ズームパネルを簡単に実装できるように、長さを絶対座標からレンダリング座標に変換します。</summary>
      <param name="length">変換される長さ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Windows.Size)">
      <summary>サイズを絶対座標からレイアウト座標に変換します。</summary>
      <param name="size">変換されるサイズ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Windows.Point)">
      <summary>ポイントを絶対座標からレイアウト座標に変換します。</summary>
      <param name="size">変換されるポイント。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToLayoutCoordinates(System.Double)">
      <summary>長さを絶対座標からレイアウト座標に変換します。</summary>
      <param name="length">長さ。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertFromLayoutCoordinates(System.Windows.Size)">
      <summary>長さをレイアウト座標から絶対座標に変換します。</summary>
      <param name="size">サイズ。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertFromLayoutCoordinates(System.Double)">
      <summary>長さをレイアウト座標から絶対座標に変換します。</summary>
      <param name="length">長さ。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Size)">
      <summary>サイズをレンダリング座標から絶対座標に変換します。</summary>
      <param name="size">変換されるサイズ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Rect)">
      <summary>四角形をレンダリング座標から絶対座標に変換します。</summary>
      <param name="area">変換される四角形。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Windows.Point)">
      <summary>ポイントをレンダリング座標から絶対座標に変換します。</summary>
      <param name="point">変換されるポイント。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.ConvertToAbsoluteCoordinates(System.Double)">
      <summary>ズームパネルを簡単に実装できるように、長さをレンダリング座標から絶対座標に変換します。</summary>
      <param name="length">変換される長さ。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetIndexAt(System.Windows.Point)">
      <summary>指定された位置にある項目のインデックスを取得します。</summary>
      <param name="point">ポイント。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.GetItemPosition(System.Int32)">
      <summary>このパネル内の項目の推定位置を取得します。</summary>
      <param name="index">照会される項目のインデックス。</param>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Owner">
      <summary>このパネルの親である項目コントロールを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Zoom">
      <summary>このパネルに適用されているズームを取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1ListViewerPanel.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ItemWidth">
      <summary>各項目の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ItemHeight">
      <summary>各項目の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Padding">
      <summary>項目のリストのパディングを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.Orientation">
      <summary>リストを表示する方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ViewportGap">
      <summary>毎回のレイアウトパスでビューポートのサイズを決定する係数を取得します。０を指定すると、ビューポートのサイズはスクロールビューアのビューポートと同じになります。0.5 を指定すると、ビューポートが元のビューポートの両側に合わせて画面の半分だけ大きくなるように拡大されます。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ViewportPreviewGap">
      <summary>毎回のレイアウトパスでプレビューモードの項目をレンダリングするためのビューポートのサイズを決定する係数を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ActualZoom">
      <summary>実際のズームを取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1Menu">
      <summary>C1Menu コントロールは、イベントハンドラに関連付けられた要素を階層的に整理できるようにします。</summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemClick" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemOpening" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpened(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemOpened" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemClosing" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosed(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemClosed" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemChecked(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemChecked" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1Menu.ItemUnchecked" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoCloseChanged(System.Boolean)">
      <summary>プロパティ AutoClose が変更されたときに呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosing(System.ComponentModel.CancelEventArgs)">
      <summary>AutoClosing イベントを発生させます。</summary>
      <param name="e">CancelEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosed(System.EventArgs)">
      <summary>AutoClosed イベントを発生させます。</summary>
      <param name="e">EventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1Menu.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.FirstLevelTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.NonFirstLevelTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.MenuOpenDelayProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.MenuOpenDelay" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.AutoCloseProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.AutoClose" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DetectBoundariesProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.DetectBoundaries" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.Orientation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SubMenuMaxHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.SubMenuMaxHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SeparatorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.SeparatorStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.FirstLevelStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.NonFirstLevelStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.HighlightedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.HighlightedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OpenedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1Menu.OpenedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1Menu" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClick">
      <summary>C1MenuItem がクリックされると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpening">
      <summary>C1MenuItem が開こうとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpened">
      <summary>C1MenuItem が開かれたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosing">
      <summary>C1MenuItem が閉じようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosed">
      <summary>C1MenuItem が閉じられたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemChecked">
      <summary>C1MenuItem がチェックされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemUnchecked">
      <summary>C1MenuItem のチェックが外されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosing">
      <summary>メニューが自動的に閉じようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosed">
      <summary>メニューが自動的に閉じられた場合に発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelTemplate">
      <summary>最初のレベルにあるすべてのメニュー項目に適用されるテンプレートを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelTemplate">
      <summary>最初のレベルにないすべてのメニュー項目に適用されるテンプレートを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.MenuOpenDelay">
      <summary>サブメニューを開くときに使用される遅延の値（ミリ秒単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.AutoClose">
      <summary>ユーザーがメニューの外側をクリックしたときに自動的にメニューを閉じるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DetectBoundaries">
      <summary>サブメニューがアプリケーションの境界に近い場所にある場合に、サブメニューの位置を自動的に更新するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.Orientation">
      <summary>Menu コントロールを表示する方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SubMenuMaxHeight">
      <summary>SubMenu の MaxHeight を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SeparatorStyle">
      <summary>
        この
        <see cref="T:C1.WPF.C1Menu" />内に配置されている
        <see cref="T:C1.WPF.C1Separator" />に適用されるデフォルトのスタイル。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelStyle">
      <summary>最初のレベルにあるすべてのメニュー項目に適用されるスタイルを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelStyle">
      <summary>最初のレベルにないすべてのメニュー項目に適用されるスタイルを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1Menu.HighlightedBackground">
      <summary>
        メニュー項目を強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.OpenedBackground">
      <summary>
        開かれているメニュー項目に使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1MenuItem">
      <summary>C1Menu コントロール内の選択可能な１つの項目を表します。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpened(C1.WPF.SourcedEventArgs)">
      <summary>SubmenuOpened イベントを発生させて、項目を開くアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosed(C1.WPF.SourcedEventArgs)">
      <summary>SubmenuClosed イベントを発生させて、項目を閉じるアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>Click イベントを発生させて、クリックアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>SubmenuClosing イベントを発生させて、項目を閉じるアクションに応答します。</summary>
      <param name="e">CancelSourceEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>SubmenuOpening イベントを発生させて、項目を開くアクションに応答します。</summary>
      <param name="e">CancelSourceEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnChecked(C1.WPF.SourcedEventArgs)">
      <summary>Checked イベントを発生させて、項目をチェックするアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>Unchecked イベントを発生させて、項目のチェックを外すアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>マウスポインタがヘッダー要素の範囲内に入ると呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>マウスポインタがヘッダー要素の範囲を離れると呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>System.Windows.UIElement.MouseRightButtonDown イベントが発生する前に呼び出されます。</summary>
      <param name="e">イベントデータを含む System.Windows.Input.MouseButtonEventArgs。</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseClick(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>ユーザーが項目をクリックしたときに呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateOpened(System.Boolean)">
      <summary>Opened 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateHighlighted(System.Boolean)">
      <summary>Highlighted 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextDecorationsProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.TextDecorations" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextWrappingProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.TextWrapping" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IconProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.Icon" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsSubmenuOpenProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.IsSubmenuOpen" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckableProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.IsCheckable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckedProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.IsChecked" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsHighlightedProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.IsHighlighted" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.GroupNameProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.GroupName" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.SubMenuMaxHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.SubMenuMaxHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.Command" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandParameterProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.CommandParameter" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HighlightedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.HighlightedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.OpenedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.OpenedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.HeaderBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1MenuItem.HeaderForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1MenuItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1MenuItem.ParentItem">
      <summary>
        この項目の親である
        <see cref="T:C1.WPF.C1MenuItem" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Parent">
      <summary>
        この項目の親である
        <see cref="T:C1.WPF.C1MenuItem" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Menu">
      <summary>
        この項目の親の
        <see cref="T:C1.Silverlight.C1Menu" />を識別します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Click">
      <summary>
        <see cref="T:C1.WPF.C1MenuItem" />がクリックされると発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpened">
      <summary>IsSubmenuOpen プロパティの状態が true に変化すると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosed">
      <summary>IsSubmenuOpen プロパティの状態が false に変化すると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpening">
      <summary>サブメニューが開こうとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosing">
      <summary>サブメニューが閉じようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Checked">
      <summary>C1MenuItem がチェックされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Unchecked">
      <summary>C1MenuItem のチェックが外されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Index">
      <summary>
        親項目コレクション内のこの
        <see cref="T:C1.Silverlight.C1MenuItem" />のインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextAlignment">
      <summary>ヘッダー内のテキストコンテンツの水平方向の配置を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextDecorations">
      <summary>ヘッダーのテキストに適用される効果が含まれる TextDecorationCollection を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextWrapping">
      <summary>ヘッダー内でテキストの折り返し方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Icon">
      <summary>C1MenuItem に表示されるアイコンを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsSubmenuOpen">
      <summary>C1MenuItem のサブメニューが開いているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsCheckable">
      <summary>
        <see cref="T:C1.WPF.C1MenuItem" />をチェックできるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsChecked">
      <summary>
        <see cref="T:C1.WPF.C1MenuItem" />がチェックされているかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsHighlighted">
      <summary>
        <see cref="T:C1.WPF.C1MenuItem" />が強調表示されているかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.GroupName">
      <summary>相互に排他的な MenuItem（チェック可能な場合）を指定するための名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.SubMenuMaxHeight">
      <summary>SubMenu の MaxHeight を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Command">
      <summary>このボタンが押されたときに呼び出されるコマンドを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.CommandParameter">
      <summary>Command プロパティに渡すパラメータを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HighlightedBackground">
      <summary>
        メニュー項目を強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.OpenedBackground">
      <summary>
        開かれているメニュー項目に使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderBackground">
      <summary>ヘッダーの背景ブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderForeground">
      <summary>ヘッダーの前景ブラシを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1MenuList">
      <summary>メニュー項目のリスト。このリストをドロップダウンのコンテンツとして設定して、ドロップダウンリストを作成できます。</summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1MenuList" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>指定された項目を表示するために指定された要素を準備します。</summary>
      <param name="element">指定された項目を表示するときに使用される要素。</param>
      <param name="item">表示する項目。</param>
    </member>
    <member name="T:C1.WPF.IOrderedSet`1">
      <summary>順序付きセットを操作するためのメソッドを定義します。</summary>
      <typeparam name="T">コレクションの要素の型。</typeparam>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.AddRange(`0,`0)">
      <summary>要素の範囲を追加します。</summary>
      <param name="from">開始要素。</param>
      <param name="to">終了要素。</param>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.RemoveRange(`0,`0)">
      <summary>要素の範囲を削除します。</summary>
      <param name="from">開始要素。</param>
      <param name="to">終了要素。</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.IOrderedSet`1.Item(System.Int32)">
      <summary>指定されたインデックスにある項目を取得します。</summary>
      <value>指定されたインデックスにある要素。</value>
    </member>
    <member name="T:C1.WPF.C1OrderedSet">
      <summary>
        並べ替えられた
        <see cref="T:System.Int32" />のコレクションです。
      </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1OrderedSet" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor(C1.WPF.C1OrderedSet)">
      <summary>
        <see cref="T:C1.WPF.C1OrderedSet" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="set">新しいセットにコピーされる要素のコレクション。</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />に項目を１つ追加します。
      </summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />に追加するオブジェクト。
      </param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(C1.WPF.C1OrderedSet)">
      <summary>指定されたセットを結合します。</summary>
      <param name="set">結合するセット。</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.AddRange(System.Int32,System.Int32)">
      <summary>要素の範囲を追加します。</summary>
      <param name="from">開始要素。</param>
      <param name="to">終了要素。</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />からすべての項目を削除します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Contains(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />に特定の値が含まれるかどうかを判定します。
      </summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />内で検索するオブジェクト。
      </param>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />内で
        <paramref name="item" />が見つかった場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />の要素を特定の
        <see cref="T:System.Array" />インデックス位置から順に
        <see cref="T:System.Array" />にコピーします。
      </summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />からコピーされる要素のコピー先になる１次元
        <see cref="T:System.Array" />。
        <see cref="T:System.Array" />のインデックスは０から始まります。
      </param>
      <param name="arrayIndex">
        コピーを開始する位置の０から始まる
        <paramref name="array" />のインデックス。
      </param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(System.Int32)">
      <summary>
        最初に見つかった特定のオブジェクトを
        <see cref="T:System.Collections.Generic.ICollection`1" />から削除します。
      </summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />から削除するオブジェクト。
      </param>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />から
        <paramref name="item" />が正常に削除された場合は true、そうでない場合は false。このメソッドは、元の
        <see cref="T:System.Collections.Generic.ICollection`1" />に
        <paramref name="item" />が見つからなかった場合にも false を返します。
      </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" />プロパティは読み取り専用です。
      </exception>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
      <summary>要素の範囲を削除します。</summary>
      <param name="from">開始要素。</param>
      <param name="to">終了要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(C1.WPF.C1OrderedSet)">
      <summary>指定された項目を削除します。</summary>
      <param name="removedItems">削除された項目。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>
        コレクションの反復処理に使用できる
        <see cref="T:System.Collections.Generic.IEnumerator`1" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.ToString">
      <summary>
        現在の
        <see cref="T:System.Object" />を表す
        <see cref="T:System.String" />を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:System.Object" />を表す
        <see cref="T:System.String" />。
      </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Item(System.Int32)">
      <summary>
        指定されたインデックスにある
        <see cref="T:System.Int32" />を取得します。
      </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Count">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />に含まれる要素の数を取得します。
      </summary>
      <value>
      </value>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />に含まれる要素の数。
      </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />が読み取り専用かどうかを示す値を取得します。
      </summary>
      <value>
      </value>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />が読み取り専用である場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="T:C1.WPF.C1SelectionMode">
      <summary>SelectionMode プロパティをサポートする C1treeView などのコントロールの選択動作を定義します。</summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.None">
      <summary>ユーザーはどの項目も選択できません。</summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Single">
      <summary>ユーザーは、一度に１つの項目のみを選択できます。</summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Multiple">
      <summary>ユーザーは、修飾キーを押し続けずに複数の項目を選択できます。</summary>
    </member>
    <member name="F:C1.WPF.C1SelectionMode.Extended">
      <summary>ユーザーは、対応する修飾キーを押しながら複数の連続する項目を選択できます。</summary>
    </member>
    <member name="T:C1.WPF.C1Separator">
      <summary>メニュー内の項目を分けるために使用されるコントロール。</summary>
    </member>
    <member name="M:C1.WPF.C1Separator.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1Separator.FirstLevelTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1Separator.FirstLevelTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Separator.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1Separator.Orientation" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1Separator" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1Separator.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1Separator.FirstLevelTemplate">
      <summary>最上位のメニューで使用されるすべてのセパレータ項目に適用するテンプレートを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1Separator.Orientation">
      <summary>セパレータの方向を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1Separator.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1Separator.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TileListBox">
      <summary>項目のサイズによって決定される、列内に表示される項目のリスト。</summary>
    </member>
    <member name="M:C1.WPF.C1TileListBox.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TileListBox" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TileListBoxPanel">
      <summary>項目のサイズに従って列内の項目をレンダリングする仮想化パネル。</summary>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.GetIndexAt(System.Windows.Point)">
      <summary>指定された位置にある項目のインデックスを取得します。</summary>
      <param name="point">ポイント。</param>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.CalculateExtentSize">
      <summary>パネルのサイズを決定する範囲のサイズを計算します。</summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.MeasureOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Measure の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Measure の受け渡し動作を定義することができます。</summary>
      <param name="availableSize">
        このオブジェクトが子オブジェクトに与えることができるサイズ。無限大（
        <see cref="F:System.Double.PositiveInfinity" />）は、どのようなコンテンツにもオブジェクトのサイズを合わせられることを示す値として指定できます。
      </param>
      <returns>このオブジェクトがレイアウトの際に必要と判断したサイズ。子オブジェクトに割り当てられたサイズが計算されるほか、固定のコンテナサイズなどの事項が考慮されます。</returns>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Arrange の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Arrange の受け渡し動作を定義することができます。</summary>
      <param name="finalSize">親の内部で、このオブジェクトがそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>要素がレイアウトに配置された後で使用される実際のサイズ。</returns>
    </member>
    <member name="P:C1.WPF.C1TileListBoxPanel.VisibleColumnsCount">
      <summary>
        <see cref="T:System.Windows.Controls.Orientation" />に基づいて、表示される列または行の数を取得します。
      </summary>
    </member>
    <member name="T:C1.WPF.ExpandMode">
      <summary>ExpandMode 列挙は、展開できる C1TreeViewItem の数を指定するために C1TreeView で使用されます。</summary>
    </member>
    <member name="F:C1.WPF.ExpandMode.Single">
      <summary>一度に１つの項目のみを展開できます。</summary>
    </member>
    <member name="F:C1.WPF.ExpandMode.Multiple">
      <summary>複数の項目を同時に展開できます。</summary>
    </member>
    <member name="T:C1.WPF.AutoScrollMode">
      <summary>ExpandMode 列挙は、展開できる C1TreeViewItem の数を指定するために C1TreeView で使用されます。</summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.Vertical">
      <summary>垂直方向に自動スクロールします。</summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.Both">
      <summary>縦横に自動的にスクロールします。</summary>
    </member>
    <member name="F:C1.WPF.AutoScrollMode.None">
      <summary>自動スクロールしません。</summary>
    </member>
    <member name="T:C1.WPF.SelectionChangingEventArgs">
      <summary>SelectionChanging イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.WPF.SelectionChangingEventArgs.Cancel">
      <summary>選択操作をキャンセルします。</summary>
    </member>
    <member name="T:C1.WPF.DropAction">
      <summary>ユーザーがドラッグ元をドロップ先要素にドロップしたときに実行されるアクションを指定します。</summary>
    </member>
    <member name="F:C1.WPF.DropAction.None">
      <summary>アクションなし。</summary>
    </member>
    <member name="F:C1.WPF.DropAction.Move">
      <summary>ドラッグ元要素をドラッグ先要素に移動します。</summary>
    </member>
    <member name="F:C1.WPF.DropAction.Copy">
      <summary>ドラッグ元要素をドラッグ先要素にコピーします。</summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewPanel">
      <summary>仮想化スタックパネル。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewPanel" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>
        この
        <see cref="T:System.Windows.Controls.Panel" />の
        <see cref="T:System.Windows.Controls.ItemsControl" />に関連付けられている
        <see cref="P:System.Windows.Controls.ItemsControl.Items" />コレクションが変更されたときに呼び出されます。
      </summary>
      <param name="sender">
        イベントを発生させた
        <see cref="T:System.Object" />。
      </param>
      <param name="args">
        <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" />イベントのデータを提供します。
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.AfterItemPrepared(C1.WPF.C1TreeViewItem)">
      <summary>項目をパネルに表示する準備ができた後に呼び出されます。</summary>
      <param name="treeViewItem">今準備された項目コンテナ。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.BeforeItemRecycled(C1.WPF.C1TreeViewItem)">
      <summary>項目が再利用される前に呼び出されます。</summary>
      <param name="treeViewItem">再利用される項目コンテナ。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.MeasureOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Measure の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Measure の受け渡し動作を定義することができます。</summary>
      <param name="availableSize">
        このオブジェクトが子オブジェクトに与えることができるサイズ。無限大（
        <see cref="F:System.Double.PositiveInfinity" />）は、どのようなコンテンツにもオブジェクトのサイズを合わせられることを示す値として指定できます。
      </param>
      <returns>このオブジェクトがレイアウトの際に必要と判断したサイズ。子オブジェクトに割り当てられたサイズが計算されるほか、固定のコンテナサイズなどの事項が考慮されます。</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Arrange の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Arrange の受け渡し動作を定義することができます。</summary>
      <param name="finalSize">親の内部で、このオブジェクトがそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>要素がレイアウトに配置された後で使用される実際のサイズ。</returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.CalculateExtentSize">
      <summary>パネルのサイズを決定する範囲のサイズを計算します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.AfterItemMeasure(System.Int32,System.Windows.Size,System.Boolean)">
      <summary>スクロール中の構造を更新するために、項目が測定された後に呼び出されます。</summary>
      <param name="index">測定された項目のインデックス。</param>
      <param name="desiredSize">今測定された項目の目的のサイズ。</param>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.OnClearChildren">
      <summary>
        子要素のコレクションが基本
        <see cref="T:System.Windows.Controls.Panel" />クラスによってクリアされるときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.GetIndexAt(System.Windows.Point)">
      <summary>指定された位置にある項目のインデックスを取得します。</summary>
      <param name="point">ポイント。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.Refresh">
      <summary>すべての子を削除して再度作成することで、このインスタンスをリフレッシュします。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.Owner">
      <summary>このパネルの親である項目コントロールを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.Padding">
      <summary>項目のリストのパディングを取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnit">
      <summary>固定値、ビューポートに対する相対値などで表されるズームを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.#ctor(System.Double)">
      <summary>
        <see cref="T:C1.WPF.C1ZoomUnit" />構造の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.#ctor(System.Double,C1.WPF.C1ZoomUnitType)">
      <summary>
        <see cref="T:C1.WPF.C1ZoomUnit" />構造の新しいインスタンスを初期化します。
      </summary>
      <param name="value">値。</param>
      <param name="type">ズームを表すために使用される単位のタイプ。</param>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.op_Equality(C1.WPF.C1ZoomUnit,C1.WPF.C1ZoomUnit)">
      <summary>２つの C1ZoomUnit 構造体が等しいかどうかを比較します。</summary>
      <param name="gl1">比較する最初の C1ZoomUnit のインスタンス。</param>
      <param name="gl2">比較する２番目の C1ZoomUnit のインスタンス。</param>
      <returns>C1ZoomUnit の２つのインスタンスが同じ値と C1ZoomUnitType を持つ場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.op_Inequality(C1.WPF.C1ZoomUnit,C1.WPF.C1ZoomUnit)">
      <summary>２つの C1ZoomUnit 構造を比較し、それらが等しいかどうかを判定します。</summary>
      <param name="gl1">比較する最初の C1ZoomUnit のインスタンス。</param>
      <param name="gl2">比較する２番目の C1ZoomUnit のインスタンス。</param>
      <returns>C1ZoomUnit の２つのインスタンスが同じ値と C1ZoomUnitType を持たない場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.Equals(System.Object)">
      <summary>
        指定された
        <see cref="T:System.Object" />がこのインスタンスと等しいかどうかを判定します。
      </summary>
      <param name="obj">
        このインスタンスと比較する
        <see cref="T:System.Object" />。
      </param>
      <returns>
        指定された
        <see cref="T:System.Object" />がこのインスタンスと等しい場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.GetHashCode">
      <summary>このインスタンスのハッシュコードを返します。</summary>
      <returns>このインスタンスのハッシュコード。これは、ハッシュアルゴリズムやハッシュテーブルなどのデータ構造での使用に適しています。</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnit.ToString">
      <summary>
        このインスタンスを表す
        <see cref="T:System.String" />を返します。
      </summary>
      <returns>
        このインスタンスを表す
        <see cref="T:System.String" />。
      </returns>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Type">
      <summary>単位のタイプを取得します。</summary>
      <value>タイプ。</value>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Value">
      <summary>値を取得します。</summary>
      <value>値。</value>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsFixed">
      <summary>ズームが固定値であるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsFill">
      <summary>ビューポートに合わせてズームを調整するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.IsOneItem">
      <summary>１つの項目全体を表示するようにズームを調整するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.Fill">
      <summary>ビューポートに合わせて自動調整するズームを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ZoomUnit.OneItem">
      <summary>ビューポートに１つの項目全体を表示するように自動調整するズームを取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnitType">
      <summary>ズームの種類を表します。</summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.Fixed">
      <summary>固定値によって決定されるズームを表します。１はズームなしを意味します。</summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.Fill">
      <summary>ビューポートに合わせて調整される、ビューポートに相対的なズーム値を表します。</summary>
    </member>
    <member name="F:C1.WPF.C1ZoomUnitType.OneItem">
      <summary>１つの項目全体を表示するように調整される、ビューポートに相対的なズーム値を表します。</summary>
    </member>
    <member name="T:C1.WPF.C1ZoomUnitTypeConverter">
      <summary>
        文字列と
        <see cref="T:C1.WPF.C1ZoomUnit" />を相互に変換します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ZoomUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>型コンバータが指定された型からこのコンバータの型にオブジェクトを変換できるかどうかを返します。</summary>
      <param name="context">書式コンテキストを提供するオブジェクト。</param>
      <param name="sourceType">変換元の型。</param>
      <returns>このコンバータが変換を実行できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.WPF.C1ZoomUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定された値を目的の変換タイプのコンバータに変換します。</summary>
      <param name="context">書式コンテキストを提供するオブジェクト。</param>
      <param name="culture">
        現在のカルチャとして使用する
        <see cref="T:System.Globalization.CultureInfo" />。
      </param>
      <param name="value">このコンバータの型に変換する値。</param>
      <returns>変換後の値。</returns>
      <exception cref="T:System.NotImplementedException">
        基本
        <see cref="T:System.ComponentModel.TypeConverter" />で実装されていない
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />。
      </exception>
    </member>
    <member name="T:C1.WPF.C1TreeViewLine">
      <summary>垂直方向の接続線。</summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLine.Stroke" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLine.StrokeThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLine.StrokeDashArrayProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLine.StrokeDashArray" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLine.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewLine" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLine.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1TreeViewLine" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.Stroke">
      <summary>接続線の描画に使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.StrokeThickness">
      <summary>接続線の太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLine.StrokeDashArray">
      <summary>接続線に使用される破線のパターンを示す System.Double 値のコレクションを取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1TreeViewLine.StrokeDashArrayChanged">
      <summary>
        <see cref="P:StrokeDashArray" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewLinePanel">
      <summary>垂直線を含むパネル。</summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineStrokeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLinePanel.LineStroke" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLinePanel.LineThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineDashArrayProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLinePanel.LineDashArray" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TreeViewLinePanel.LineStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TreeViewLinePanel.LineStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewLinePanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TreeViewLinePanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineStroke">
      <summary>接続線の描画に使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineThickness">
      <summary>接続線の太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineDashArray">
      <summary>接続線に使用される破線のパターンを示す System.Double 値のコレクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewLinePanel.LineStyle">
      <summary>C1TreeViewLinePanel パネルの線のスタイルを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1TreeViewExpandButton">
      <summary>展開/折りたたみ</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewExpandButton.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1TreeViewExpandButton" />コントロールのビジュアルツリーを作成します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewExpandButton.ChangeVisualStateShowIcon(System.Boolean)">
      <summary>ShowIcons 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="T:C1.WPF.IC1SupportIncrementalLoading">
      <summary>C1ListBox のソースでこのインタフェースを実装すると、項目をオンデマンドでロードできます。</summary>
    </member>
    <member name="M:C1.WPF.IC1SupportIncrementalLoading.BeginLoadMoreItems(System.UInt32,System.AsyncCallback,System.Object)">
      <summary>追加項目のロード操作を開始します。</summary>
      <param name="count">ロードされる項目数。</param>
      <param name="callback">非同期のコールバック。</param>
      <param name="state">状態。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.IC1SupportIncrementalLoading.EndLoadMoreItems(System.IAsyncResult,System.Windows.Threading.Dispatcher)">
      <summary>追加項目のロード操作を終了します。</summary>
      <param name="ar">BeginLoadMoreItems で返される非同期の結果。</param>
      <param name="dispatcher">NotifyCollectionChanged イベントを発生させるために使用される UI スレッドディスパッチャ。</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.IC1SupportIncrementalLoading.HasMoreItems">
      <summary>ほかに項目があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:C1.WPF.SelectionChangedEventArgs`1">
      <summary>SelectionChanged イベントのデータを提供します。</summary>
    </member>
    <member name="M:C1.WPF.SelectionChangedEventArgs`1.#ctor(C1.WPF.IOrderedSet{`0},C1.WPF.IOrderedSet{`0})">
      <summary>
        <see cref="T:C1.WPF.SelectionChangedEventArgs`1" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="addedItems">追加された項目。</param>
      <param name="removedItems">削除された項目。</param>
    </member>
    <member name="P:C1.WPF.SelectionChangedEventArgs`1.AddedItems">
      <summary>選択された項目を含むコレクションを取得します。</summary>
      <value>このイベントで選択された項目。</value>
    </member>
    <member name="P:C1.WPF.SelectionChangedEventArgs`1.RemovedItems">
      <summary>選択されなかった項目を含むコレクションを取得します。</summary>
      <value>このイベントで選択されなかった項目。</value>
    </member>
    <member name="T:C1.WPF.BreakLine">
      <summary>
        <see cref="T:C1.Silverlight.C1WrapPanel" />で要素の前後の強制改行を指定します。
      </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.None">
      <summary>強制改行なし。十分なスペースがある場合は、次の要素を同じ行に配置します。</summary>
    </member>
    <member name="F:C1.WPF.BreakLine.After">
      <summary>この要素の後に強制改行を追加します。次の要素は次の行に配置されます。</summary>
    </member>
    <member name="F:C1.WPF.BreakLine.Before">
      <summary>この要素の前に強制改行を追加します。</summary>
    </member>
    <member name="F:C1.WPF.BreakLine.AfterAndBefore">
      <summary>この要素の前後に強制改行を追加します。これは１行に単独で配置されます。</summary>
    </member>
    <member name="T:C1.WPF.C1DockPanel">
      <summary>いくつかの子要素を水平方向または垂直方向に相互に相対的に配置するための領域を定義します。</summary>
    </member>
    <member name="F:C1.WPF.C1DockPanel.LastChildFillProperty">
      <summary>
        <see cref="P:C1.WPF.C1DockPanel.LastChildFill" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DockPanel.GetDock(System.Windows.DependencyObject)">
      <summary>指定された要素の Dock 添付プロパティの値を取得します。</summary>
      <param name="element">添付プロパティが読み取られる要素。</param>
      <returns>Dock プロパティの値。</returns>
    </member>
    <member name="M:C1.WPF.C1DockPanel.SetDock(System.Windows.DependencyObject,C1.WPF.Dock)">
      <summary>指定された要素の Dock 添付プロパティの値を設定します。</summary>
      <param name="element">添付プロパティが書き込まれる要素。</param>
      <param name="value">設定するプロパティ値。</param>
    </member>
    <member name="F:C1.WPF.C1DockPanel.DockProperty">
      <summary>Dock 添付プロパティを識別します。</summary>
    </member>
    <member name="M:C1.WPF.C1DockPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1DockPanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DockPanel.LastChildFill">
      <summary>パネルの最後の子が残りのスペース全体を占めるかどうかを示す値を取得または設定します。このプロパティが true に設定されている場合は、最後の子要素のドッキングプロパティが無視され、パネルは空のスペース全体を使用するように試みます。</summary>
      <remarks>このプロパティが true に設定されている場合は、最後の子要素の Dock プロパティが無視され、パネルは空のスペース全体を使用するように試みます。</remarks>
    </member>
    <member name="T:C1.WPF.C1ExpandDirection">
      <summary>
        <see cref="T:C1.Silverlight.Extended.C1Expander" />コントロールが開く方向を指定します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Down">
      <summary>
        <see cref="T:C1.Silverlight.Extended.C1Expander" />コントロールは下に開きます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Up">
      <summary>
        <see cref="T:C1.Silverlight.Extended.C1Expander" />コントロールは上に開きます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Left">
      <summary>
        <see cref="T:C1.Silverlight.Extended.C1Expander" />コントロールは左に開きます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ExpandDirection.Right">
      <summary>
        <see cref="!:C1Expander" />コントロールは右に開きます。
      </summary>
    </member>
    <member name="T:C1.WPF.C1HeaderedContentControl">
      <summary>単一のコンテンツと１つのヘッダーを含むすべてのコントロールの基本実装を提供します。</summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.Header" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontFamilyProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontSizeProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStretchProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontWeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderPaddingProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderPadding" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderForeground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1HeaderedContentControl" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.Header">
      <summary>このコントロールのヘッダーを取得/設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate">
      <summary>ヘッダーの表示に使用されるデータテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily">
      <summary>ヘッダーのフォントファミリを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize">
      <summary>ヘッダーのフォントサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch">
      <summary>ヘッダーのフォントストレッチを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle">
      <summary>ヘッダーのフォントスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight">
      <summary>ヘッダーのフォントウェイトを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderPadding">
      <summary>ヘッダーのパディングを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment">
      <summary>ヘッダーの HorizontalContentAlignment を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment">
      <summary>ヘッダーの VerticalContentAlignment を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderBackground">
      <summary>ヘッダーの背景ブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderForeground">
      <summary>ヘッダーの前景ブラシを取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1HeaderedContentControl.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1HeaderedContentControl.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="T:C1.WPF.ValidationState">
      <summary>連結の検証状態を列挙します。</summary>
    </member>
    <member name="F:C1.WPF.ValidationState.Valid">
      <summary>すべての連結が有効です。</summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidFocused">
      <summary>連結は無効で、このコントロールにフォーカスがあります。</summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidUnfocused">
      <summary>連結は無効で、このコントロールにフォーカスがありません。</summary>
    </member>
    <member name="T:C1.WPF.C1ValidationDecorator">
      <summary>連結の検証エラーを表示します。</summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.ChangeVisualStateValidationStates(System.Boolean)">
      <summary>ValidationStates 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.ValidationStateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.TargetProperty">
      <summary>
        <see cref="P:C1.WPF.C1ValidationDecorator.Target" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1ValidationDecorator.CornerRadius" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ValidationDecorator" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.ValidationState">
      <summary>
        <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.Target">
      <summary>検証のターゲットを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.CornerRadius">
      <summary>角の丸みを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1LayoutRounder">
      <summary>WPF 3.5 のレイアウト丸みを取得するためのラッパー。</summary>
    </member>
    <member name="M:C1.WPF.C1LayoutRounder.MeasureOverride(System.Windows.Size)">
      <summary>レイアウトの Measure の受け渡し動作を提供します。</summary>
    </member>
    <member name="T:C1.WPF.C1LayoutTransformer">
      <summary>レイアウト変換をコンテンツに適用するコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ApplyLayoutTransform">
      <summary>LayoutTransformer コントロールのコンテンツにレイアウト変換を適用します。</summary>
      <remarks>高度なシナリオでのみ使用されます（LayoutTransform のアニメーション表示など）。Transform プロパティの一部が変更されたことを LayoutTransformer コントロールに通知するために使用する必要があります。</remarks>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.MeasureOverride(System.Windows.Size)">
      <summary>レイアウトの「Measure」の受け渡し動作を提供します。</summary>
      <param name="availableSize">この要素が子要素に与えることができるサイズ。</param>
      <returns>この要素がレイアウトの際に必要と判断するサイズ。子要素のサイズの計算に基づきます。</returns>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ArrangeOverride(System.Windows.Size)">
      <summary>レイアウトの「Arrange」の受け渡し動作を提供します。</summary>
      <param name="finalSize">親の内部で、この要素がそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>実際に使用するサイズ。</returns>
      <remarks>わかりやすいように、Silverlight の finalSize ではなく、WPF パラメータ名の finalSize を使用します。</remarks>
    </member>
    <member name="F:C1.WPF.C1LayoutTransformer.LayoutTransformProperty">
      <summary>
        <see cref="P:C1.WPF.C1LayoutTransformer.LayoutTransform" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1LayoutTransformer" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1LayoutTransformer.LayoutTransform">
      <summary>LayoutTransformer コントロールのコンテンツに適用するレイアウト変換を取得または設定します。</summary>
      <remarks>UIElement.LayoutTransform に対応します。</remarks>
    </member>
    <member name="T:C1.WPF.C1ScrollViewer">
      <summary>他の可視要素を格納できるスクロール可能な領域を表します。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveUpCommand">
      <summary>上にスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveDownCommand">
      <summary>下にスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightCommand">
      <summary>右にスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftCommand">
      <summary>左にスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveTopCommand">
      <summary>上端までスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveBottomCommand">
      <summary>下端までスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightEndCommand">
      <summary>右端までスクロールするためのコマンド。</summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftEndCommand">
      <summary>左端までスクロールするためのコマンド。</summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>垂直方向オフセットまでスクロールします。</summary>
      <param name="offset">オフセット。</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>水平方向オフセットまでスクロールします。</summary>
      <param name="offset">オフセット。</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollUp">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツを上に
        <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" />ピクセルだけスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollDown">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツを下に
        <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" />ピクセルだけスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollRight">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツを右に
        <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" />ピクセルだけスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollLeft">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツを左に
        <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" />ピクセルだけスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHome">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの先頭まで垂直方向にスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToEnd">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの末尾まで垂直方向にスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToTop">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの先頭まで垂直方向にスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToBottom">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの末尾まで垂直方向にスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToRightEnd">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの末尾まで水平方向にスクロールします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToLeftEnd">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />コンテンツの先頭まで水平方向にスクロールします。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ExtentHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ExtentWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalOffsetProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.HorizontalOffset" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ScrollableHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ScrollableWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalOffsetProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.VerticalOffset" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ViewportHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ViewportWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollUpProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.CanScrollUp" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollRightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.CanScrollRight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollLeftProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.CanScrollLeft" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollDownProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.CanScrollDown" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalSmallChangeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalSmallChangeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ScrollViewer.ScrollMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ScrollViewer" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ScrollViewer" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentHeight">
      <summary>範囲の垂直サイズを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentWidth">
      <summary>範囲の水平サイズを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalOffset">
      <summary>スクロールされたコンテンツの水平方向のオフセットを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableHeight">
      <summary>スクロールできるコンテンツ要素の垂直方向のサイズを表す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableWidth">
      <summary>スクロールできるコンテンツ要素の水平方向のサイズを表す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalOffset">
      <summary>スクロールされたコンテンツの垂直方向のオフセットを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportHeight">
      <summary>コンテンツのビューポートの垂直サイズを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportWidth">
      <summary>コンテンツのビューポートの水平サイズを含む値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollUp">
      <summary>垂直スクロールが上端にないかどうかを示す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollRight">
      <summary>垂直スクロールが右端にないかどうかを示す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollLeft">
      <summary>垂直スクロールが左端にないかどうかを示す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollDown">
      <summary>垂直スクロールが下端にないかどうかを示す値を取得します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange">
      <summary>スクロールが移動したときに、水平方向のオフセット値に加算または減算する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalSmallChange">
      <summary>スクロールが移動したときに、垂直方向のオフセット値に加算または減算する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility">
      <summary>垂直方向のスクロールバーを表示するかどうかを示す値を取得または設定します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility">
      <summary>水平方向のスクロールバーを表示するかどうかを示す値を取得または設定します。これは依存プロパティです。</summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollMode">
      <summary>スクロールイベントを発生させるタイミングを指定します。</summary>
    </member>
    <member name="T:C1.WPF.OpacityConverter">
      <summary>
        <see cref="T:System.Boolean" />値を Opacity 値に変換するために使用されるコンバータ。true = 1、false = 0 です。
      </summary>
    </member>
    <member name="M:C1.WPF.OpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>UI で表示するためにソースデータをターゲットに渡す前に、ソースデータを変更します。</summary>
      <param name="value">ターゲットに渡されているソースデータ。</param>
      <param name="targetType">
        ターゲットの依存プロパティが求めるデータの
        <see cref="T:System.Type" />。
      </param>
      <param name="parameter">コンバータロジックで使用されるオプションパラメータ。</param>
      <param name="culture">変換のカルチャ。</param>
      <returns>ターゲットの依存プロパティに渡される値。</returns>
    </member>
    <member name="M:C1.WPF.OpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        ターゲットデータをソースオブジェクトに渡す前に、ターゲットデータを変更します。このメソッドは
        <see cref="F:System.Windows.Data.BindingMode.TwoWay" />結合でのみ呼び出されます。
      </summary>
      <param name="value">ソースに渡されているターゲットデータ。</param>
      <param name="targetType">
        ソースオブジェクトが求めるデータの
        <see cref="T:System.Type" />。
      </param>
      <param name="parameter">コンバータロジックで使用されるオプションパラメータ。</param>
      <param name="culture">変換のカルチャ。</param>
      <returns>ソースオブジェクトに渡される値。</returns>
    </member>
    <member name="T:C1.WPF.C1SlideContentControl">
      <summary>
        ０～１の値を指定して、レイアウトに影響するスライドアニメーションを実行するための
        <see cref="T:System.Windows.Controls.ContentControl" />。
      </summary>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1SlideContentControl" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1SlideContentControl.SlideDirectionProperty">
      <summary>
        <see cref="P:C1.WPF.C1SlideContentControl.SlideDirection" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1SlideContentControl.SlideProperty">
      <summary>
        <see cref="P:C1.WPF.C1SlideContentControl.Slide" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.MeasureOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Measure の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Measure の受け渡し動作を定義することができます。</summary>
      <param name="availableSize">
        このオブジェクトが子オブジェクトに与えることができるサイズ。無限大（
        <see cref="F:System.Double.PositiveInfinity" />）は、どのようなコンテンツにもオブジェクトのサイズを合わせられることを示す値として指定できます。
      </param>
      <returns>このオブジェクトがレイアウトの際に必要と判断したサイズ。子オブジェクトに割り当てられたサイズが計算されるほか、固定のコンテナサイズなどの事項が考慮されます。</returns>
    </member>
    <member name="M:C1.WPF.C1SlideContentControl.ArrangeOverride(System.Windows.Size)">
      <summary>Silverlight レイアウトの Arrange の受け渡し動作を提供します。クラスはこのメソッドをオーバーライドして、クラス自体の Arrange の受け渡し動作を定義することができます。</summary>
      <param name="finalSize">親の内部で、このオブジェクトがそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>要素がレイアウトに配置された後で使用される実際のサイズ。</returns>
    </member>
    <member name="P:C1.WPF.C1SlideContentControl.SlideDirection">
      <summary>展開方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1SlideContentControl.Slide">
      <summary>コントロールの表示パーセンテージを指定する０～１の値を取得または設定します。 値０はコンテンツが表示されないことを意味し、１は完全に表示されることを意味します。</summary>
    </member>
    <member name="T:C1.WPF.C1WrapPanel">
      <summary>
        <see cref="P:C1.WPF.C1WrapPanel.Orientation" />プロパティの値に基づいて、子要素を上から下または右から左に順番に配置します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1WrapPanel.Orientation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1WrapPanel.ItemWidth" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1WrapPanel.ItemHeight" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.GetBreakLine(System.Windows.DependencyObject)">
      <summary>指定された要素の BreakLine 添付プロパティの値を取得します。</summary>
      <param name="element">添付プロパティが読み取られる要素。</param>
      <returns>BreakLine プロパティの値。</returns>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.SetBreakLine(System.Windows.DependencyObject,C1.WPF.BreakLine)">
      <summary>指定された要素の BreakLine 添付プロパティの値を設定します。</summary>
      <param name="element">添付プロパティが書き込まれる要素。</param>
      <param name="value">設定するプロパティ値。</param>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.BreakLineProperty">
      <summary>BreakLine 添付プロパティを識別します。</summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1WrapPanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.Orientation">
      <summary>子要素を並べる方向を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemWidth">
      <summary>パネル内にあるすべての項目の幅を指定する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemHeight">
      <summary>パネル内にあるすべての項目の高さを指定する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.Dock">
      <summary>
        コントロールを
        <see cref="T:C1.Silverlight.C1DockPanel" />コントロール内でどのようにサイズ設定して配置するかを指定します。
      </summary>
    </member>
    <member name="F:C1.WPF.Dock.Left">
      <summary>コントロールの左端を外側のコントロールの左端にドッキングします。</summary>
    </member>
    <member name="F:C1.WPF.Dock.Right">
      <summary>コントロールの右端を外側のコントロールの右端にドッキングします。</summary>
    </member>
    <member name="F:C1.WPF.Dock.Top">
      <summary>コントロールの上端を外側のコントロールの上にドッキングします。</summary>
    </member>
    <member name="F:C1.WPF.Dock.Bottom">
      <summary>コントロールの下端を外側のコントロールの下にドッキングします。</summary>
    </member>
    <member name="T:C1.WPF.DockExtensions">
      <summary>
        <see cref="T:C1.WPF.Dock" />の拡張メソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOrientation(C1.WPF.Dock)">
      <summary>方向を取得します。</summary>
      <param name="dock">ドック。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOpposite(C1.WPF.Dock)">
      <summary>反対方向を取得します。</summary>
      <param name="dock">ドック。</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Anchor">
      <summary>ビジュアル要素のアンカーポイントを指定します。</summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopLeft">
      <summary>ビジュアル要素の左上隅。</summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopRight">
      <summary>ビジュアル要素の右上隅。</summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomLeft">
      <summary>ビジュアル要素の左下隅。</summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomRight">
      <summary>ビジュアル要素の右下隅。</summary>
    </member>
    <member name="F:C1.WPF.Anchor.Center">
      <summary>ビジュアル要素の中央。</summary>
    </member>
    <member name="T:C1.WPF.AnchorMatching">
      <summary>２つの要素の間のアンカー対応を指定します。</summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.FixedElementAnchor">
      <summary>固定要素のアンカー。</summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.MoveableElementAnchor">
      <summary>検索される要素のアンカー。</summary>
    </member>
    <member name="T:C1.WPF.C1ComboBox">
      <summary>C1ComboBox コントロールは、編集可能なテキストボックスと自動検索ドロップダウンリストの組み合わせです。このリストは、コントロールのドロップダウン矢印をクリックすることで、表示または非表示にできます。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnSelectionCommitted">
      <summary>SelectionCommitted イベントを発生させます。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.BeginEdit(System.String)">
      <summary>編集を開始します。</summary>
      <param name="text">テキスト。</param>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
        <see cref="!:Items" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
        <see cref="E:MouseLeftButtonDown" />イベントが発生する前に呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnEditCompleted">
      <summary>EditCompleted イベントを発生させます。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.IsOpenKey(System.Windows.Input.Key)">
      <summary>そのキーでコンボボックスを開く場合は、true を返します。独自のキーボード選択方式を処理する場合はオーバーライドします。</summary>
      <param name="key">押されたキー。</param>
      <returns>押されたキーでコンボボックスを開く場合は true。</returns>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>DropDownOpen 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedItemProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedItem" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedIndexProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedIndex" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValuePathProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedValuePath" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedValue" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.Text" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemConverterProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ItemConverter" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.AutoCompleteProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.AutoComplete" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownItemsProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.MaxDropDownItems" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DefaultItemHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.DefaultItemHeight" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsEditableProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.IsEditable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.WatermarkProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.Watermark" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemContainerStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ItemContainerStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsDropDownOpenProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.IsDropDownOpen" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.DropDownHeight" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.DropDownWidth" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.MaxDropDownHeight" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.MaxDropDownWidth" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownDirectionProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.DropDownDirection" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ScrollBarStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ScrollBarStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.CaretBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.CaretBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ConditionProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.Condition" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectionBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectionForeground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ButtonBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.ButtonForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectionCommitted">
      <summary>選択したアイテムがコミットされたときに発生するイベントです。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.EditCompleted">
      <summary>ユーザーがいつ編集を完了したかを調べる場合は、このイベントを処理します。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.ValidateInput">
      <summary>編集可能な C1ComboBox に新しいテキストが追加されたときに発生するイベント。新しい入力を検証するには、このイベントをキャッチします。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.KeyDownInPopup">
      <summary>ポップアップが開かれたときに独自のカスタムナビゲーションを提供する場合は、このイベントを処理します。押されたキーと現在のインデックスを受け取り、新しく選択するインデックスを返します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedItem">
      <summary>現在選択されている項目を取得または設定します。選択がない場合は null を返します。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedItemChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedItem" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedIndex">
      <summary>現在選択されているインデックスを取得または設定します。選択がないか、選択が Items コレクションに属していない場合は、-1 を返します。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedIndexChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedIndex" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValuePath">
      <summary>SelectedItem から SelectedValue を取得するために使用されるパスを取得または設定します。</summary>
      <remarks>SelectedValue を取得するために使用されるパスを返します。デフォルト値は、空の文字列です。</remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValue">
      <summary>SelectedValuePath を使って取得された SelectedItem の値を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedValueChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectedValue" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Text">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />内のテキストを取得または設定します。この動作は、AutoComplete プロパティと IsEditable プロパティに依存します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemConverter">
      <summary>項目と文字列を相互に変換するために使用される項目コンバータ。</summary>
      <remarks>ItemTemplate と組み合わせて使用して、項目の視覚化をカスタマイズする際の AutoComplete と編集をサポートします。</remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.AutoComplete">
      <summary>コントロールがリスト項目を項目ソースとして使って自動的にエントリを補完するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownItems">
      <summary>ドロップダウンボックスに表示される項目の最大数を取得または設定します（自動的にサイズ変更する場合は０に設定）。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DefaultItemHeight">
      <summary>高さが自動的に計算されない場合に使用される各項目のデフォルトの高さ。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsEditable">
      <summary>
        ユーザーが
        <see cref="T:C1.WPF.C1ComboBox" />の Items コレクションに含まれない値を選択できるかどうかを取得/設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Watermark">
      <summary>コントロールが空のときに表示されるウォーターマークの内容を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemContainerStyle">
      <summary>
        内部
        <see cref="T:C1.WPF.C1ComboBox" />の項目に使用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.TextAlignment">
      <summary>テキストコンテンツの水平方向の配置を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsDropDownOpen">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />ポップアップが開いているか閉じているかを表します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsDropDownOpenChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.IsDropDownOpen" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownHeight">
      <summary>ドロップダウンの高さを取得または設定します（自動的にサイズ指定する場合はゼロに設定）。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownWidth">
      <summary>ドロップダウンボックスの幅を取得または設定します（自動的にサイズ指定する場合はゼロに設定）。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownHeight">
      <summary>ドロップダウンボックスの最大高さ制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownWidth">
      <summary>ドロップダウンボックスの最大幅制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownDirection">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />ドロップダウンの展開方向を指定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ScrollBarStyle">
      <summary>内部スクロールバーに使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.CaretBrush">
      <summary>
        入力コントロールの点滅カーソルの
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Condition">
      <summary>項目ソースのフィルタ条件を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonBackground">
      <summary>
        コントロール内のボタンの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonForeground">
      <summary>
        コントロール内のボタンの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.Condition">
      <summary>コンボボックスの項目をフィルタ処理する方法を定義します。</summary>
    </member>
    <member name="F:C1.WPF.Condition.StartWith">
      <summary>入力テキストで開始する項目を選択します。</summary>
    </member>
    <member name="F:C1.WPF.Condition.Contains">
      <summary>入力テキストを含む項目をリストします。</summary>
    </member>
    <member name="T:C1.WPF.C1ComboBoxItem">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />内の選択可能な項目を実装します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnContentChanged(System.Object,System.Object)">
      <summary>
        <see cref="P:Content" />プロパティの値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateSelection(System.Boolean)">
      <summary>Selection 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.IsSelectedProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBoxItem.IsSelected" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBoxItem.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBoxItem.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBoxItem.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ComboBoxItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.IsSelected">
      <summary>
        この
        <see cref="T:C1.WPF.C1ComboBoxItem" />が選択されていることを示すブール値を取得または設定します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBoxItem.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1ComboBoxItem.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1DropDown">
      <summary>C1DropDown には、コントロールのドロップダウン部分が閉じているときに表示される内容を決定する Header プロパティと、ドロップダウン部分に表示される内容を決定する Content プロパティがあります。</summary>
    </member>
    <member name="T:C1.WPF.C1DropDownButton">
      <summary>C1DropDown には、コントロールのドロップダウン部分が閉じているときに表示される内容を決定する Header プロパティと、ドロップダウン部分に表示される内容を決定する Content プロパティがあります。</summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.GetPreferedLocations">
      <summary>
        ドロップダウンが、開かれた
        <see cref="T:System.Windows.Controls.Primitives.Popup" />の配置を試みる場所を取得します。
      </summary>
      <returns>
        試みる
        <see cref="T:C1.WPF.AnchorMatching" />の順序付きリスト。
      </returns>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>DropDownOpen 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.IsDropDownOpenProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.IsDropDownOpen" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.DropDownHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.DropDownWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownHeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.MinDropDownHeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownWidthProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.MinDropDownWidth" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownDirectionProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.DropDownDirection" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.AutoCloseProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.AutoClose" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.AutoSizeModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.AutoSizeMode" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDownButton.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1DropDownButton" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1DropDownButton" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.IsDropDownOpen">
      <summary>コントロールのドロップダウンボックスを開閉します。</summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsDropDownOpenChanged">
      <summary>
        <see cref="P:IsDropDownOpen" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownHeight">
      <summary>ドロップダウンボックスの高さを取得または設定します。自動的にサイズ指定する場合は Double.NaN に設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownWidth">
      <summary>ドロップダウンボックスの幅を取得または設定します。自動的にサイズ指定する場合は Double.NaN に設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownHeight">
      <summary>ドロップダウンボックスの最大高さ制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownWidth">
      <summary>ドロップダウンボックスの最大幅制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownHeight">
      <summary>ドロップダウンボックスの最小高さ制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownWidth">
      <summary>ドロップダウンボックスの最小幅制約を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownDirection">
      <summary>コントロールのドロップダウンボックスの展開方向を指定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.AutoClose">
      <summary>ドロップダウン以外の場所をクリックすると自動的に閉じます。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.AutoSizeMode">
      <summary>コンテンツのサイズが変化したときにポップアップのコンテンツのサイズを変更する方法を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsMouseOverChanged">
      <summary>
        <see cref="P:IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.ShowButtonProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDown.ShowButton" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDown.FocusCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1DropDown.DisabledCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1DropDown" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1DropDown.ShowButton">
      <summary>
        <see cref="T:System.Windows.Controls.Primitives.ToggleButton" />が表示されるかどうかを取得/設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DropDown.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがある項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1DropDown.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっている項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.PrepareDropDownEventArgs">
      <summary>ドロップダウンボックスが開かれる前に発生するイベントの引数。</summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownWidth">
      <summary>DropDown の幅。カスタムサイズを設定する場合は変更し、デフォルトを使用する場合は double.NaN を設定します。</summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownHeight">
      <summary>DropDown の高さ。カスタムサイズを設定する場合は変更し、デフォルトを使用する場合は double.NaN を設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1MessageBox">
      <summary>メッセージボックスを表示します。</summary>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>メッセージ、タイトルバーのキャプション、ボタン、およびアイコンを含むメッセージボックスを表示し、結果と共にコールバックします。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="button">
        どのボタンを表示するかを指定する
        <see cref="T:C1.WPF.C1MessageBoxButton" />値。
      </param>
      <param name="icon">
        表示するアイコンを指定する
        <see cref="T:C1.WPF.C1MessageBoxIcon" />値。
      </param>
      <param name="callback">
        メッセージボックスの結果として呼び出される
        <see cref="T:System.Action`1" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>メッセージを含むメッセージボックスを表示し、結果と共にコールバックします。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="callback">
        メッセージボックスの結果として呼び出される
        <see cref="T:System.Action`1" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>メッセージとタイトルバーのキャプションを含むメッセージボックスを表示し、結果と共にコールバックします。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="callback">
        メッセージボックスの結果として呼び出される
        <see cref="T:System.Action`1" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,System.Action{System.Windows.MessageBoxResult})">
      <summary>メッセージ、タイトルバーのキャプション、およびボタンを含むメッセージボックスを表示し、結果と共にコールバックします。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="button">
        どのボタンを表示するかを指定する
        <see cref="T:C1.WPF.C1MessageBoxButton" />値。
      </param>
      <param name="callback">
        メッセージボックスの結果として呼び出される
        <see cref="T:System.Action`1" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>メッセージ、タイトルバーのキャプション、およびアイコンを含むメッセージボックスを表示し、結果と共にコールバックします。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="icon">
        表示するアイコンを指定する
        <see cref="T:C1.WPF.C1MessageBoxIcon" />値。
      </param>
      <param name="callback">
        メッセージボックスの結果として呼び出される
        <see cref="T:System.Action`1" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String)">
      <summary>メッセージを含むメッセージボックスを表示します。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String)">
      <summary>メッセージとタイトルバーのキャプションを含むメッセージボックスを表示します。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton)">
      <summary>メッセージ、タイトルバーのキャプション、およびボタンを含むメッセージボックスを表示します。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="button">
        どのボタンを表示するかを指定する
        <see cref="T:C1.WPF.C1MessageBoxButton" />値。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon)">
      <summary>メッセージ、タイトルバーのキャプション、およびアイコンを含むメッセージボックスを表示します。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="icon">
        表示するアイコンを指定する
        <see cref="T:C1.WPF.C1MessageBoxIcon" />値。
      </param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon)">
      <summary>メッセージ、タイトルバーのキャプション、およびアイコンを含むメッセージボックスを表示します。</summary>
      <param name="message">メッセージとして表示するテキスト。</param>
      <param name="caption">タイトルバーのキャプション。</param>
      <param name="button">
        どのボタンを表示するかを指定する
        <see cref="T:C1.WPF.C1MessageBoxButton" />値。
      </param>
      <param name="icon">
        表示するアイコンを指定する
        <see cref="T:C1.WPF.C1MessageBoxIcon" />値。
      </param>
    </member>
    <member name="P:C1.WPF.C1MessageBox.WindowStyle">
      <summary>
        ウィンドウの外観を定義する
        <see cref="T:System.Windows.Style" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBox.ContentStyle">
      <summary>
        ウィンドウのコンテンツの外観を定義する
        <see cref="T:System.Windows.Style" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxButton">
      <summary>メッセージボックスに表示されるボタンを指定します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OK">
      <summary>メッセージボックスに［OK］ボタンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OKCancel">
      <summary>メッセージボックスに［OK］ボタンと［キャンセル］ボタンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNoCancel">
      <summary>メッセージボックスに［はい］ボタン、［いいえ］ボタン、［キャンセル］ボタンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNo">
      <summary>メッセージボックスに［はい］ボタンと［いいえ］ボタンを表示します。</summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxIcon">
      <summary>メッセージボックスに表示されるアイコンを指定します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.None">
      <summary>アイコンは表示されません。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Error">
      <summary>メッセージボックスにエラーアイコンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Warning">
      <summary>メッセージボックスに警告アイコンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Information">
      <summary>メッセージボックスに情報アイコンを表示します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Question">
      <summary>メッセージボックスに質問アイコンを表示します。</summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxContent">
      <summary>
        メッセージボックスのコンテンツを表示するコントロール。
        <see cref="T:C1.Silverlight.C1Window" />内で使用することを意図しています。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateIcon(System.Boolean)">
      <summary>Icon 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.OKTextProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.OKText" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.CancelTextProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.CancelText" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.YesTextProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.YesText" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.NoTextProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.NoText" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.MessageProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.Message" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.ButtonStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.Button" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.IconProperty">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.Icon" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1MessageBoxContent" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.ButtonClick">
      <summary>ボタンが押されたときに発生するイベント。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.OKText">
      <summary>［OK］ボタンに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.CancelText">
      <summary>［キャンセル］ボタンに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.YesText">
      <summary>［はい］ボタンに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.NoText">
      <summary>［いいえ］ボタンに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Message">
      <summary>メッセージボックスに表示されるメッセージテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.ButtonStyle">
      <summary>メッセージボックスのボタンに適用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Button">
      <summary>
        メッセージボックスに表示するボタンを指定する
        <see cref="T:C1.WPF.C1MessageBoxButton" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Icon">
      <summary>
        メッセージボックスに表示するアイコンを指定する
        <see cref="T:C1.WPF.C1MessageBoxIcon" />を取得または設定します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1MessageBoxContent.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="T:C1.WPF.AutoSizeMode">
      <summary>コンテンツのサイズが変わったときにポップアップのサイズを変更する方法を決定します。</summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowAndShrink">
      <summary>コンテンツのサイズに基づいてサイズを変更します。</summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowOnly">
      <summary>コンテンツが大きくなった場合はサイズを拡大しますが、コンテンツのサイズが小さくなった場合は変更しません。</summary>
    </member>
    <member name="F:C1.WPF.AutoSizeMode.GrowHorizontally">
      <summary>水平方向にサイズを拡大しますが、必要に応じて垂直方向には縮小します。</summary>
    </member>
    <member name="T:C1.WPF.C1SplitButton">
      <summary>ポップアップを開くボタンを右側に別に持つボタン。</summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1SplitButton" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1SplitButton" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1SplitButton.Click">
      <summary>System.Windows.Controls.Button がクリックされると発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1Window">
      <remarks>
        このコントロールを別のコントロールの子として追加してはなりません。これは、
        <see cref="M:C1.WPF.C1Window.Show" />メソッドを呼び出して
        <see cref="T:System.Windows.Controls.Primitives.Popup" />として開くか、
        <see cref="P:C1.WPF.C1Window.Canvas" />プロパティを使って
        <see cref="P:C1.WPF.C1Window.Canvas" />内に表示することができます。
      </remarks>
      <summary>WPF 内のウィンドウにコンテンツを表示します。</summary>
    </member>
    <member name="M:C1.WPF.C1Window.BringToFront">
      <summary>このウィンドウをすべてのウィンドウの前に表示します。</summary>
    </member>
    <member name="M:C1.WPF.C1Window.CenterOnScreen">
      <summary>ウィンドウをコンテナの中心に配置します。</summary>
      <remarks>ウィンドウがロードされていない場合は、ロードされるまで配置が遅れます。</remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Show">
      <summary>ウィンドウを開きます。</summary>
      <remarks>
        Show を呼び出すと、このウィンドウが他のウィンドウの前に表示され、アクティブになります。ウィンドウを閉じると、再度開くことができなくなります。
        <see cref="M:C1.Silverlight.C1Window.Hide" />プロパティや
        <see cref="T:System.Windows.Visibility" />プロパティを使用すると、ウィンドウを閉じることなく非表示にすることができます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ShowModal">
      <summary>ウィンドウをモーダルとして開きます。</summary>
      <remarks>淡色表示レイヤの上にウィンドウを開き、このウィンドウを閉じるまでユーザーが他の操作を何も実行できないようにします。</remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Hide">
      <summary>ウィンドウを閉じることなく非表示にします。</summary>
    </member>
    <member name="M:C1.WPF.C1Window.Close">
      <summary>ウィンドウを閉じます。</summary>
      <remarks>ウィンドウを閉じると、再度開くことができなくなります。</remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateActive(System.Boolean)">
      <summary>Active 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateWindowState(System.Boolean)">
      <summary>WindowState 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateDrag(System.Boolean)">
      <summary>Drag 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1Window.LeftProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.Left" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.TopProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.Top" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsActiveProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.IsActive" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsResizableProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.IsResizable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ModalBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ModalBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMaximizeButtonProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ShowMaximizeButton" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowCloseButtonProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ShowCloseButton" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.DialogResultProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.DialogResult" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMinimizeButtonProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ShowMinimizeButton" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.WindowStateProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.WindowState" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsDraggableProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.IsDraggable" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ButtonBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1Window.ButtonForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Window.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1Window" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1Window.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1Window.Closed">
      <summary>
        ユーザーまたは
        <see cref="M:C1.WPF.C1Window.Close" />メソッドによってウィンドウが閉じられたときに発生するイベント。
      </summary>
    </member>
    <member name="E:C1.WPF.C1Window.Closing">
      <summary>ウィンドウが閉じようとするときに発生するイベント。ウィンドウが閉じるのを停止することができます。</summary>
    </member>
    <member name="E:C1.WPF.C1Window.PositionChanged">
      <summary>ウィンドウの位置が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.Canvas">
      <summary>
        ウィンドウの表示に使用される
        <see cref="P:C1.WPF.C1Window.Canvas" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ThemeResources">
      <summary>
        <see cref="T:C1.WPF.C1Window" />に適用される ResourceDictionary。通常は、アプリケーションの何らかの場所で使用される C1Theme のコピーと組み合わせて使用されます。Silverlight では、親が指定されていない
        <see cref="T:System.Windows.Controls.Primitives.Popup" />までテーマが自動的に伝搬されないためです。
      </summary>
      <example>C1Window.ThemeResources = myTheme.GetNewResourceDictionary();</example>
    </member>
    <member name="P:C1.WPF.C1Window.Left">
      <summary>ウィンドウの左辺からコンテナの左辺までの距離を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.Top">
      <summary>ウィンドウの上辺からコンテナの上辺までの距離を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsActive">
      <summary>ウィンドウがアクティブウィンドウであるかどうかを取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1Window.IsActiveChanged">
      <summary>
        <see cref="P:C1.WPF.C1Window.IsActive" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsResizable">
      <summary>ウィンドウをサイズ変更および最大化できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.ModalBackground">
      <summary>モーダルウィンドウを表示するときにバックグラウンドで使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMaximizeButton">
      <summary>このウィンドウの最大化ボタンを表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowCloseButton">
      <summary>このウィンドウの閉じるボタンを表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.DialogResult">
      <summary>ウィンドウのダイアログの結果を取得または設定します。</summary>
      <remarks>
        このプロパティを None 以外の値に設定すると、ウィンドウが自動的に閉じます。ウィンドウキャプションバーの［閉じる］ボタンをクリックすると、DialogResult が
        <see cref="F:System.Windows.MessageBoxResult.Cancel" />に設定され、ウィンドウが閉じます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMinimizeButton">
      <summary>このウィンドウの最小化ボタンを表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.WindowState">
      <summary>ウィンドウが元のサイズに戻す、最小化、または最大化のどの状態かを示す値を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1Window.WindowStateChanged">
      <summary>
        <see cref="P:C1.WPF.C1Window.WindowState" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsDraggable">
      <summary>ウィンドウをドラッグできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1Window.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonBackground">
      <summary>
        コントロール内のボタンの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonForeground">
      <summary>
        コントロール内のボタンの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.PositionChangedEventArgs">
      <summary>
        <see cref="E:C1.WPF.C1Window.PositionChanged" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.PositionChangedEventArgs.#ctor(System.Windows.Point)">
      <summary>
        新しい
        <see cref="T:C1.WPF.PositionChangedEventArgs" />を初期化します。
      </summary>
      <param name="previousPosition">
        <see cref="P:C1.WPF.PositionChangedEventArgs.PreviousPosition" />プロパティの値。
      </param>
    </member>
    <member name="P:C1.WPF.PositionChangedEventArgs.PreviousPosition">
      <summary>ウィンドウの前の位置を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1WindowState">
      <summary>ウィンドウが最小化、最大化、または浮動化されているかどうかを指定します。</summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Floating">
      <summary>ウィンドウは浮動化されています（最大化でも最小化でもない）。</summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Maximized">
      <summary>ウィンドウは最大化されています。</summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Minimized">
      <summary>ウィンドウは最小化されています。</summary>
    </member>
    <member name="T:C1.WPF.DropDownDirection">
      <summary>
        <see cref="T:C1.Silverlight.C1ComboBox" />のサポートされている展開方向を提供します。
      </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.BelowOrAbove">
      <summary>
        ドロップダウン
        <see cref="T:C1.Silverlight.C1ComboBox" />をヘッダーの下に表示するように試みます。表示できない場合は、その上に表示するように試みます。
      </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.AboveOrBelow">
      <summary>
        ドロップダウン
        <see cref="T:C1.Silverlight.C1ComboBox" />をヘッダーの上に表示するように試みます。表示できない場合は、その下に表示するように試みます。
      </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.ForceBelow">
      <summary>
        ドロップダウン
        <see cref="T:C1.Silverlight.C1ComboBox" />をヘッダーの下に強制的に表示します。
      </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.ForceAbove">
      <summary>
        <see cref="T:C1.WPF.C1ComboBox" />のコンテンツをヘッダーの上に強制的に表示します。
      </summary>
    </member>
    <member name="T:C1.WPF.PopupUtil">
      <summary>ポップアップのユーティリティメソッド。</summary>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
        Popup 内の指定されたポイントが FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.Controls.Primitives.Popup" />を配置します。
      </summary>
      <param name="popup">配置するポップアップ。</param>
      <param name="popupAnchor">
        Popup 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,System.Windows.Point)">
      <summary>
        指定された絶対位置に
        <see cref="T:System.Windows.Controls.Primitives.Popup" />を配置します。
      </summary>
      <param name="popup">配置するポップアップ。</param>
      <param name="point">ポップアップの位置。</param>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double,System.Windows.FlowDirection)">
      <summary>
        FrameworkElement 内の指定されたポイントが別の FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.FrameworkElement" />の位置を計算します。
      </summary>
      <param name="positionElement">配置する要素。</param>
      <param name="positionAnchor">
        配置する要素内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        参照として使用される FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="elementOffset">参照要素のオフセット（絶対位置）。</param>
      <param name="overlapHorizontal">要素間の水平方向の重なり（コーナーマッチングに使用）。</param>
      <param name="overlapVertical">要素間の垂直方向の重なり（コーナーマッチングに使用）。</param>
      <param name="flowDir">計算に使用される FlowDirection。</param>
      <returns>FrameworkElement が配置される絶対位置。</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.GetPosition(System.Windows.UIElement,System.Windows.Point)">
      <summary>要素の相対的な位置に基づいて絶対位置を返します</summary>
      <param name="element">指定された要素</param>
      <param name="point">指定された相対位置</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double)">
      <summary>
        FrameworkElement 内の指定されたポイントが別の FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.FrameworkElement" />の位置を計算します。
      </summary>
      <param name="positionElement">配置する要素。</param>
      <param name="positionAnchor">
        配置する要素内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        参照として使用される FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="elementOffset">参照要素のオフセット（絶対位置）。</param>
      <param name="overlapHorizontal">要素間の水平方向の重なり（コーナーマッチングに使用）。</param>
      <param name="overlapVertical">要素間の垂直方向の重なり（コーナーマッチングに使用）。</param>
      <returns>FrameworkElement が配置される絶対位置。</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
        Popup 内の指定されたポイントが FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.Controls.Primitives.Popup" />の位置を計算します。
      </summary>
      <param name="popup">配置するポップアップ。</param>
      <param name="popupAnchor">
        Popup 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="overlapHorizontal">要素間の水平方向の重なり（コーナーマッチングに使用）。</param>
      <param name="overlapVertical">要素間の垂直方向の重なり（コーナーマッチングに使用）。</param>
      <returns>ポップアップが配置される絶対位置</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
        Popup 内の指定されたポイントが FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.Controls.Primitives.Popup" />の位置を計算します。
      </summary>
      <param name="popup">配置するポップアップ。</param>
      <param name="popupAnchor">
        Popup 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <returns>ポップアップが配置される絶対位置</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
        FrameworkElement 内の指定されたポイントが別の FrameworkElement 内の指定されたポイントと一致するように、
        <see cref="T:System.Windows.FrameworkElement" />の位置を計算します。
      </summary>
      <param name="positionElement">配置する要素。</param>
      <param name="positionAnchor">
        配置する要素内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="element">
        参照として使用する
        <see cref="T:System.Windows.FrameworkElement" />。
      </param>
      <param name="elementAnchor">
        参照として使用される FrameworkElement 内のポイントを指定する
        <see cref="T:C1.WPF.Anchor" />値。
      </param>
      <param name="overlapHorizontal">要素間の水平方向の重なり（コーナーマッチングに使用）。</param>
      <param name="overlapVertical">要素間の垂直方向の重なり（コーナーマッチングに使用）。</param>
      <returns>FrameworkElement が配置される絶対位置。</returns>
    </member>
    <member name="T:C1.WPF.C1ProgressBar">
      <summary>C1ProgressBar は、操作の不確定な進捗状況を示すコントロールを表します。</summary>
      <summary>C1ProgressBar は、操作の不確定な進捗状況を示すコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.IsIndeterminateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressBar.IsIndeterminate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressBar.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressBar.IndeterminateForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressBar.IndeterminateForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ProgressBar" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressBar.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ProgressBar" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.TemplateSettings">
      <summary>コントロールのテンプレートで連結できる設定を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.IsIndeterminate">
      <summary>コントロールが不確定状態であるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBar.IndeterminateForeground">
      <summary>バーが不確定状態であるときに点を強調表示するために使用されるブラシを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1ProgressBarTemplateSettings">
      <summary>
        コントロールテンプレートで使用される
        <see cref="T:C1.WPF.C1ProgressBar" />の設定。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.IndicatorWidth">
      <summary>インジケータの幅を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseDiameter">
      <summary>
        テンプレート化された
        <see cref="T:C1.WPF.C1ProgressBar" />でアニメーション表示される Ellipse 要素のテンプレート定義の直径を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseOffset">
      <summary>
        テンプレート化された
        <see cref="T:C1.WPF.C1ProgressBar" />でアニメーション表示される Ellipse 要素のテンプレート定義のオフセット位置を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.ContainerAnimationStartPosition">
      <summary>
        <see cref="T:C1.WPF.C1ProgressBar" />をアニメーション表示するコンテナアニメーションの From ポイントを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.ContainerAnimationEndPosition">
      <summary>
        <see cref="T:C1.WPF.C1ProgressBar" />をアニメーション表示するコンテナアニメーションのターゲット To ポイントを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseAnimationWellPosition">
      <summary>
        <see cref="T:C1.WPF.C1ProgressBar" />をアニメーション表示する Ellipse アニメーションの停止ポイントを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.EllipseAnimationEndPosition">
      <summary>
        <see cref="T:C1.WPF.C1ProgressBar" />をアニメーション表示する Ellipse アニメーションの To ポイントを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ProgressBarTemplateSettings.IndicatorLengthDelta">
      <summary>インジケータの長さのデルタを取得します。これを使用して遷移を再配置できます。</summary>
    </member>
    <member name="E:C1.WPF.C1ProgressBarTemplateSettings.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.MaskFormat">
      <summary>
        <see cref="T:C1.WPF.C1MaskedTextBox" />内の値を書式設定する方法を定義します。
      </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePrompt">
      <summary>ユーザーによるテキスト入力と、すべてのプロンプト文字を返します。</summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludeLiterals">
      <summary>ユーザーによるテキスト入力と、マスクで定義されているすべてのリテラル文字を返します。</summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePromptAndLiterals">
      <summary>ユーザーによるテキスト入力と、マスクで定義されているすべてのリテラル文字およびすべてのプロンプト文字を返します。</summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.ExcludePromptAndLiterals">
      <summary>ユーザーによるテキスト入力のみを返します。</summary>
    </member>
    <member name="T:C1.WPF.C1MaskedTextBox">
      <summary>C1MaskedTextBox は、マスクを使用して、エンドユーザーが無効なデータを入力できないようにするエディタです。</summary>
      <summary>C1MaskedTextBox は、マスクを使用して、エンドユーザーが無効なデータを入力できないようにするエディタです。</summary>
    </member>
    <member name="T:C1.WPF.C1TextBoxBase">
      <summary>すべての ComponentOne テキストボックスコントロールの基本クラス。</summary>
      <remarks>
        <see cref="P:C1.Silverlight.C1TextBoxBase.Watermark" />プロパティと
        <see cref="P:C1.Silverlight.C1TextBoxBase.IsEnabled" />プロパティのほか、マウスオーバーとフォーカスのスタイルを追加します。
      </remarks>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.C1TextProperty">
      <summary>C1Text 依存関係プロパティを識別します。</summary>
      <remarks>このプロパティは、キーストロークごとに連結を更新する必要がある場合の回避策として使用されます。</remarks>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnIsFocusedChanged(System.Boolean)">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.IsFocused" />プロパティが変更されたときに呼び出されるコールバック。
      </summary>
      <param name="oldValue">IsFocused の以前の値。</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnTextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Text プロパティが変更された直後に呼び出されます。</summary>
      <param name="e">変更に関するデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.UpdateIsWatermarked">
      <summary>
        派生クラスは、派生クラスから見て
        <see cref="P:IsWatermarked" />の状態が変化した場合に、このメソッドを呼び出すことができます。このメソッドは、Text プロパティをクリアすることなく、IsWatermarked の状態を更新します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
        <see cref="E:System.Windows.UIElement.KeyDown" />イベントが発生したときに呼び出されます。
      </summary>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.ChangeVisualStateWatermark(System.Boolean)">
      <summary>Watermark 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.WatermarkProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.Watermark" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.SelectOnFocusProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.SelectOnFocus" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TextBoxBase.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TextBoxBase" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1TextBoxBase.KeyDown">
      <summary>
        <see cref="T:System.Windows.UIElement" />にフォーカスがあるときにキーボードのキーが押されると発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.C1Text">
      <summary>C1Text プロパティを取得または設定します。このプロパティは、キーストロークごとに連結を更新する必要がある場合の回避策として使用されます。</summary>
    </member>
    <member name="E:C1.WPF.C1TextBoxBase.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.IsWatermarked">
      <summary>ウォーターマークが表示されるかどうかを取得または設定します。</summary>
      <value>
        このテキストボックスがウォーターマークの場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.Watermark">
      <summary>ウォーターマークのコンテンツを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.SelectOnFocus">
      <summary>コントロールがフォーカスを受け取ったときにすべてのコントロールテキストが選択される条件を取得または設定します。</summary>
      <remarks>デフォルト値は OnDefaultSelection です。</remarks>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.CultureProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.Culture" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.UpdateValue">
      <summary>
        Silverlight バージョンのコントロールでは、コントロールがロードされていない場合に、
        <see cref="T:C1.WPF.C1MaskedTextBox" />の
        <see cref="P:C1.WPF.C1MaskedTextBox.Value" />プロパティと Text プロパティを強制的に更新します。WPF では何も行いません。
      </summary>
      <remarks>
        Silverlight では、
        <see cref="T:C1.WPF.C1MaskedTextBox" />がロードされていない場合、またはビジュアルツリーに含まれていない場合、Text プロパティの変化について通知を受けることがなく、
        <see cref="P:C1.WPF.C1MaskedTextBox.Value" />プロパティと Text プロパティを適切な時期に更新できないため、この動作が基本 TextBox コントロールから継承されています。コントロールがロードされていない間にこれらのプロパティの正しい値を取得する必要がある場合は、テキストの書式設定に影響する
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />、
        <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" />などのプロパティを変更した後に
        <see cref="M:C1.WPF.C1MaskedTextBox.UpdateValue" />メソッドを呼び出します。
        <para>Silverlight バージョンのコントロールがロードされている場合、および WPF バージョンのコントロールの場合はロード状態に関係なく常に、このメソッドは何も行いません。</para></remarks>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.OnMaskedTextChanged(C1.WPF.MaskedTextChangedEventArgs)">
      <summary>
        テキストボックスで、
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />に適合する一貫したコンテンツが変化したときに発生します。
      </summary>
      <see cref="E:MaskedTextChanged" />
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.Value" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.MaskProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.PromptCharProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.PromptChar" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.TextMaskFormatProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ReplaceModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.ReplaceMode" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1MaskedTextBox" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Culture">
      <summary>
        <see cref="T:C1.WPF.C1MaskedTextBox" />内の値を表示するために使用されるカルチャを設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.IsValid">
      <summary>コントロールに有効な入力が含まれるかどうかを決定する値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged">
      <summary>
        テキストボックスで、
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />に適合する一貫したコンテンツが変化したときに発生します。
      </summary>
      <remarks>
        ユーザー入力またはコードによって Text プロパティが変化した直後に、
        <see cref="T:C1.WPF.C1MaskedTextBox" />は、テキストと
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />との一貫性を維持するためにテキストを再更新します。このため、各ユーザー入力に対して TextChanged イベントが２回トリガされることがあります。これとは異なり、
        <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" />は、Text が
        <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />に適合する値に更新されたときにのみトリガされます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Value">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" />プロパティで指定されたとおりに書式設定されたコントロールのコンテンツを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Mask">
      <summary>入力マスクを取得または設定します。</summary>
      <remarks>
        <para>それぞれの入力位置でどんな文字クラスが入力可能かどうかを決定する文字列からマスクが構成されます。</para>
        <para>Valid mask characters are:</para>
        <para>
          <b>0</b>数値 (0-9)
        </para>
        <para>
          <b>9</b>数値またはスペース
        </para>
        <para>
          <b>#</b>数値、スペース、または記号 (+/-)
        </para>
        <para>
          <b>L</b>文字
        </para>
        <para>
          <b>?</b>文字またはスペース
        </para>
        <para>
          <b>A</b>文字または数値
        </para>
        <para>
          <b>a</b>文字、数値、またはスペース
        </para>
        <para>
          <b>&amp;</b>任意の文字（数値や記号も含む）
        </para>
        <para>
          <b>.</b>小数点記号
        </para>
        <para>
          <b>,</b>桁区切り記号
        </para>
        <para>
          <b>:</b>時刻の区切り
        </para>
        <para>
          <b>/</b>日付の区切り
        </para>
        <para>その他の文字はリテラル文字として扱われ、編集できない文字としてコントロール内に表示されます。</para>
        <para>例えば、マスク "000-0000" は 4 番目の文字以外は数値のみを入力可能で、4 番目の文字は常にダッシュ記号が表示されます。</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.PromptChar">
      <summary>ユーザーが入力する領域を示すために使用する文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.TextMaskFormat">
      <summary>
        <see cref="P:C1.WPF.C1MaskedTextBox.Value" />プロパティにリテラルとプロンプト文字が含まれているかどうかを指定する値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.ReplaceMode">
      <summary>入力中に新しい文字が挿入されるか、もしくは上書きされるかを示す値を取得または設定します。</summary>
      <remarks>入力した文字をキャレットの位置に挿入する場合にはこのプロパティを true に設定します。入力した文字をキャレットの位置の既存文字を上書きする場合にはこのプロパティを false に設定します。</remarks>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventArgs">
      <summary>
        <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:C1.WPF.MaskedTextChangedEventArgs" />クラスのインスタンスを作成します。
      </summary>
      <param name="newText">新しいテキスト。</param>
      <param name="oldText">古いテキスト。</param>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.OldText">
      <summary>古いテキストを取得します。</summary>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.NewText">
      <summary>新しいテキストを取得します。</summary>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventHandler">
      <summary>
        <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" />イベントを処理するメソッドを表します。
      </summary>
      <param name="sender">イベントの送信元。</param>
      <param name="e">イベントデータ。</param>
    </member>
    <member name="T:C1.WPF.C1NumericBox">
      <remarks>
        <list>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Format" />プロパティは、標準およびカスタム書式をサポートします。
          </item>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Watermark" />プロパティは、コントロールが空の場合のヘルプテキストを表示します。
          </item>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.AllowNull" />プロパティは、null 値に連結したり、null 値を表示できるようにします。
          </item>
        </list>コントロールが空であるか、null 値に連結されている場合、
        <see cref="P:C1.Silverlight.C1NumericBox.Value" />プロパティは
        <b>double.NaN</b>を返します。
      </remarks>
      <summary>C1NumericBox コントロールは、数値をさまざまな形式で表示して編集できる数値エディタです。</summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CultureProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Culture" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnValueChanged(C1.WPF.PropertyChangedEventArgs{System.Double})">
      <summary>
        <see cref="E:C1.WPF.C1NumericBox.ValueChanged" />イベントを発生させます。
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.Select(System.Int32,System.Int32)">
      <summary>開始位置と長さで指定されたテキストを選択します。</summary>
      <param name="start">選択の開始位置。</param>
      <param name="length">選択の長さ。</param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
      <summary>ButtonsVisibility 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FormatProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Format" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MaximumProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Maximum" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MinimumProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Minimum" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IncrementProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Increment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Value" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ShowButtonsProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.ShowButtons" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IsReadOnlyProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.IsReadOnly" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.TextAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionStartProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.SelectionStart" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionLengthProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.SelectionLength" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.AllowNullProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.AllowNull" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DelayProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Delay" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IntervalProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Interval" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.WatermarkProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Watermark" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.HandleUpDownKeysProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.HandleUpDownKeys" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.RangeValidationModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.RangeValidationMode" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectOnFocusProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.SelectOnFocus" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.FocusCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.DisabledCuesVisibility" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.SelectionBackground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.SelectionForeground" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CaretBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.CaretBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.ButtonBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.ButtonForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Culture">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />内の値を表示するために使用されるカルチャを設定します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1NumericBox.ValueChanged">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.Value" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Format">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />の Format の値を取得または設定します。
      </summary>
      <remarks>使用可能な値：N、C、F、N0、C0、F0、N1、C1 など。デフォルト値：F0。</remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Maximum">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />に入力できる最大値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Minimum">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />コントロールに入力できる最小値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Increment">
      <summary>ユーザーが［↑］/［↓］キーを押したときに適用されるインクリメント値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Value">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />の数値を取得または設定します。
      </summary>
      <remarks>
        null 値は、
        <b>Value</b>プロパティでは
        <b>double.NaN</b>として表されます。
        <see cref="P:C1.WPF.C1NumericBox.AllowNull" />プロパティも参照してください。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ShowButtons">
      <summary>Increment または Decrement のボタンを表示または非表示にします。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.IsReadOnly">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />が読み取り専用かどうかを決定する値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.TextAlignment">
      <summary>
        テキストを
        <see cref="T:C1.WPF.C1NumericBox" />内に配置する方法を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionStart">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />で選択されているテキストの開始位置を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionLength">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />の現在の選択範囲内の文字数を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.AllowNull">
      <summary>ユーザーが null 値を入力できるかどうかを取得または設定します。</summary>
      <remarks>
        null 値は、
        <b>Value</b>プロパティでは
        <b>double.NaN</b>としてエンコードされます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Delay">
      <summary>［Increase］および［Decrease］ボタンの遅延を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Interval">
      <summary>［Increase］および［Decrease］ボタンの間隔を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Watermark">
      <summary>コントロールが空のときに表示されるウォーターマークの内容を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.HandleUpDownKeys">
      <summary>コントロールが上/下矢印キー、［PageUp］キー、［PageDown］キーを処理するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.RangeValidationMode">
      <summary>Minimum と Maximum 間の範囲を検証するために使用されるモードを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectOnFocus">
      <summary>コントロールがフォーカスを受け取ったときにすべてのコントロールテキストが選択される条件を取得または設定します。</summary>
      <remarks>デフォルト値は OnDefaultSelection です。</remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがあるものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっているものを表示するかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.C1NumericBox.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1NumericBox.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.CaretBrush">
      <summary>
        入力コントロールの点滅カーソルの
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonBackground">
      <summary>
        コントロール内のボタンの背景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonForeground">
      <summary>
        コントロール内のボタンの前景に割り当てられる
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.RangeValidationMode">
      <summary>
        <see cref="T:C1.WPF.C1NumericBox" />の Maximum と Minimum の間の範囲の検証モード。
      </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.Always">
      <summary>このモードでは、範囲外の値を入力することはできません。</summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.AlwaysTruncate">
      <summary>このモードでは、範囲外の値を入力することはできません。制限を超えた値は切り捨てられます。</summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.OnLostFocus">
      <summary>値はフォーカスを失うと切り捨てられます。</summary>
    </member>
    <member name="T:C1.WPF.C1RangeSlider">
      <summary>C1RangeSlider コントロールでは、エンドユーザーが２つの Thumb コントロールをトラックに沿って移動することで、１つの範囲から２つの値を選択できるようにします。</summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1RangeSlider.UpperValueChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1RangeSlider.LowerValueChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnValueChanged(System.EventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1RangeSlider.ValueChanged" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.UpdateTrackLayout">
      <summary>このメソッドは、現在の最小値と最大値を受け取り、現在のコントロールの測定値を計算およびレイアウトします。</summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MaximumProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Maximum" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MinimumProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Minimum" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.LowerValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.LowerValue" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.UpperValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.UpperValue" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValueChangeProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.ValueChange" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.DelayProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Delay" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.IntervalProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Interval" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Orientation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.SmallValueChangeProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.SmallValueChange" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.IsFocusedProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.IsFocused" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValidationDecoratorStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.FocusBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.FocusBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RangeSlider" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.UpperValueChanged">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.UpperValue" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.LowerValueChanged">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.LowerValue" />プロパティが変化すると発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.ValueChanged">
      <summary>LowerValue プロパティまたは UpperValue プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Maximum">
      <summary>範囲コントロールの設定可能な最大値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Minimum">
      <summary>範囲コントロールの設定可能な最小値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.LowerValue">
      <summary>範囲コントロールの現在の小さい方の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.UpperValue">
      <summary>範囲コントロールの現在の大きい方の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValueChange">
      <summary>RangeBase コントロールの Upper/LowerValue に対して加算または減算する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Delay">
      <summary>RepeatButtons（LowerThumb スクロールボックスの左側と UpperThumb スクロールボックスの右側）が押されてからクリック動作のリピートを開始するまで待機する時間をミリ秒単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Interval">
      <summary>（LowerThumb スクロールボックスの左側と UpperThumb スクロールボックスの右側にある RepeatButtons で）クリック動作のリピートが開始された後のリピート間隔をミリ秒単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Orientation">
      <summary>C1RangeSlider の向き。</summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.OrientationChanged">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.Orientation" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.SmallValueChange">
      <summary>RangeBase コントロールの Upper/LowerValue に対して加算または減算する値を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.IsFocused">
      <summary>コントロールにフォーカスがある場合は、true を返します。</summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle">
      <summary>
        内部の
        <see cref="T:C1.WPF.C1ValidationDecorator" />に適用されるスタイルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.FocusBrush">
      <summary>
        フォーカスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.SelectOnFocusCondition">
      <summary>コントロールがフォーカスを受け取ったときにコントロールテキスト全体が選択される条件を定義します。</summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.Never">
      <summary>常にテキストを選択しません。</summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.Always">
      <summary>常にテキストを選択します。</summary>
    </member>
    <member name="F:C1.WPF.SelectOnFocusCondition.OnDefaultSelection">
      <summary>SelectionStart プロパティと SelectionLength プロパティが共に０に設定されている場合にのみテキストを選択します。</summary>
    </member>
    <member name="T:C1.WPF.C1HyperPanel">
      <summary>子要素を積み重ねて配置し、マウスの近くの要素に動的なズーム効果を適用します。</summary>
      <remarks>
        <para>
          <see cref="T:C1.Silverlight.C1HyperPanel" />は
          <see cref="T:System.Windows.Controls.StackPanel" />に似ていますが、ユーザーがパネル内にマウスを移動すると、動的なズーム効果が適用される点が異なります。マウスに近い子要素は通常のサイズで表示され、マウスから遠い要素は小さく表示されます。
        </para>
        <para>
          <see cref="P:C1.Silverlight.C1HyperPanel.Distribution" />プロパティと
          <see cref="P:C1.Silverlight.C1HyperPanel.MinElementScale" />プロパティを使用して、ズーム効果の強度を制御します。
        </para>
        <para>
          <see cref="P:C1.Silverlight.C1HyperPanel.ApplyOpacity" />プロパティを使用して、マウスから遠い要素を薄くします。
        </para>
        <para>
          子要素の
          <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" />プロパティと
          <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />プロパティを使用して、
          <see cref="T:C1.Silverlight.C1HyperPanel" />内での配置方法を決定します。
        </para>
        <para>
          ズーム効果を効果的に適用するために、
          <see cref="T:C1.Silverlight.C1HyperPanel" />は子要素の
          <see cref="P:System.Windows.UIElement.RenderTransform" />プロパティより優先します。子要素に独自の変換を適用する場合は、子要素を
          <see cref="T:C1.Silverlight.C1HyperPanel" />に追加する前に別のパネルに配置します。
        </para>
        <para>
          一部のネイティブ WPF 要素（
          <see cref="T:System.Windows.Controls.Button" />コントロールなど）は、必ずしも正しく自動サイズ設定されません。これらの要素は、
          <see cref="T:C1.Silverlight.C1HyperPanel" />に追加する前に、幅と高さを明示的に設定する必要があります。
        </para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.MeasureOverride(System.Windows.Size)">
      <summary>子要素に必要なレイアウト内のサイズを測定し、要素のサイズを決定します。</summary>
      <param name="availableSize">この要素が子要素に与えることができるサイズ。Infinity を指定すると、どのようなコンテンツにも要素のサイズを合わせられることを示すことができます。</param>
      <returns>この要素がレイアウトの際に必要と判断するサイズ。子要素のサイズの計算に基づきます。</returns>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.ArrangeOverride(System.Windows.Size)">
      <summary>子要素を配置し、要素のサイズを決定します。</summary>
      <param name="finalSize">親の内部で、この要素がそれ自体およびその子を配置するために使用する最終エリアです。</param>
      <returns>実際に使用するサイズ。</returns>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.Orientation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.DistributionProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.Distribution" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.ApplyOpacityProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.ApplyOpacity" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.CenterProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.Center" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.MinElementScaleProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.HorizontalContentAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.VerticalContentAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperPanel.VerticalContentAlignment" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1HyperPanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Orientation">
      <summary>子要素を並べる方向を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Distribution">
      <summary>中心近くにある要素に適用するズームの量を制御する 0.1～1.0 の間の値を取得または設定します。</summary>
      <remarks>
        <para>値を小さくすると、ズーム効果が上がります。マウスから遠い要素は、マウスに近い要素よりはるかに小さく表示されます。</para>
        <para>値を大きくすると、ズーム効果が下がります。マウスから遠い要素は、マウスに近い要素より少しだけ小さく表示されます。</para>
        <para>
          <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" />を設定することで、マウスから遠い要素をズームアウトする量を制限できます。たとえば、
          <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" />を 0.5 に設定すると、子要素は元のサイズの半分未満になりません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.ApplyOpacity">
      <summary>中心から遠くにある要素に適用する最小スケールを決定する０～１の間の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Center">
      <summary>
        <see cref="T:C1.WPF.C1HyperPanel" />のサイズをコントロールサイズに対するパーセント値で取得または設定します。
      </summary>
      <remarks>
        <para>中心近くの要素は、他の要素より大きく表示されます。</para>
        <para>この値は、マウスの移動と共に自動的に更新されます。</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.MinElementScale">
      <summary>中心から遠くにある要素に適用する最小スケールを決定する０～１の間の値を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.WPF.C1HyperPanel.Distribution" />プロパティを小さい値に設定するが、子要素がマウスから遠ざかっても小さくなり過ぎないようにする場合は、このプロパティが便利です。
        </para>
        <para>たとえば、このプロパティを 0.5 に設定すると、元のサイズの半分未満になりません。</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment">
      <summary>パネルのコンテンツの水平方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.VerticalContentAlignment">
      <summary>パネルのコンテンツの垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="T:C1.Silverlight.Resources.C1_Silverlight">
      <summary>強力に型付けされたリソースクラス（ローカライズされた文字列の参照などに使用）。</summary>
    </member>
    <member name="T:C1.Silverlight.Resources.Common`1">
      <summary>アプリケーションアセンブリからリソースを読み取る、強力に型付けされたリソースクラスのヘルパー基本クラス。</summary>
      <typeparam name="R">強力に型付けされたリソースサブクラス</typeparam>
    </member>
    <member name="P:C1.Silverlight.Resources.Common`1.ResourceManager">
      <summary>アプリケーションとアセンブリのリソースマネージャをロードします。</summary>
    </member>
    <member name="T:C1.Silverlight.Resources.Common`1.S">
      <summary>GetString の機能に必要なダミークラス。</summary>
    </member>
    <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>resourceManApp.GetString を呼び出します。それが失敗した場合は、resourceManC1.GetString を呼び出します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Culture">
      <summary>この強力に型付けされたリソースクラスを使用するすべてのリソースの参照において、現在のスレッドの CurrentUICulture プロパティをオーバーライドします。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Cancel">
      <summary>「Cancel（キャンセル）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Close">
      <summary>「Close（閉じる）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.CloseGlobal">
      <summary>「Close Selected Item（選択した項目を閉じる）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Menu">
      <summary>「Menu（メニュー）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Next">
      <summary>「Next（次へ）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.No">
      <summary>「No（いいえ）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.OK">
      <summary>「OK」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Pin">
      <summary>「Pin（固定）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Previous">
      <summary>「Previous（前へ）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.SelectAFile">
      <summary>「Select a file（ファイルの選択）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.UnPin">
      <summary>「UnPin（固定解除）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Yes">
      <summary>「Yes（はい）」に相当するローカライズされた文字列を検索します。</summary>
    </member>
    <member name="T:C1.WPF.C1DataTemplateSelector">
      <summary>カスタムロジックに基づいてデータテンプレートを適用する方法を提供します。</summary>
    </member>
    <member name="P:C1.WPF.C1DataTemplateSelector.Resources">
      <summary>ローカルで定義されたリソースディクショナリを取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalDataTemplate">
      <summary>C1HierarchicalPresenter（TreeViewItem など）をサポートする DataTemplate を表します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemsSource">
      <summary>このデータテンプレートの連結を取得または設定します。これは、データ階層内の次のレベルを表すコレクションの検索場所を示します。</summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemTemplate">
      <summary>生成された C1HierarchicalPresenter（TreeViewItem など）の ItemTemplate プロパティに適用する DataTemplate を取得または設定します。これは、データ階層内の次のレベルにある項目の表示方法を示します。</summary>
    </member>
    <member name="T:C1.WPF.C1StyleSelector">
      <summary>カスタムロジックに基づいてスタイルを適用する方法を提供します。</summary>
    </member>
    <member name="P:C1.WPF.C1StyleSelector.Resources">
      <summary>ローカルで定義されたリソース辞書を取得します。</summary>
    </member>
    <member name="T:C1.WPF.C1LinePanel">
      <summary>C1LinePanel は、１行または１列に項目のリストを配置します。</summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1LinePanel.Orientation" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.ReverseProperty">
      <summary>
        <see cref="P:C1.WPF.C1LinePanel.Reverse" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1LinePanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1LinePanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Orientation">
      <summary>子要素を並べる方向を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Reverse">
      <summary>項目の配置を上から下/左から右と下から上/右から左のどちらにするかを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.LineDefinitions">
      <summary>各項目にどの程度のスペースを割り当てるかを指定するコレクションを取得します。</summary>
    </member>
    <member name="T:C1.WPF.LineDefinition">
      <summary>
        <see cref="T:C1.WPF.C1LinePanel" />要素に適用される行または列固有のプロパティを定義します。
      </summary>
    </member>
    <member name="P:C1.WPF.LineDefinition.Length">
      <summary>
        <see cref="T:C1.WPF.LineDefinition" />の高さまたは幅を表す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.CancelSourceEventArgs">
      <summary>キャンセル可能なイベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.WPF.CancelSourceEventArgs.Source">
      <summary>イベントのソースを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.UnselectedContentMode">
      <summary>
        選択されていない、または選択されなくなった
        <see cref="T:C1.WPF.C1TabItem" />のコンテンツを
        <see cref="T:C1.WPF.C1TabControl" />が保持する方法を決定します。
      </summary>
    </member>
    <member name="F:C1.WPF.UnselectedContentMode.OutsideVisualTree">
      <summary>ビジュアルツリーには、選択された項目のコンテンツのみが含まれます。選択されていない項目のコンテンツは、ビジュアルツリーに存在しません。</summary>
    </member>
    <member name="F:C1.WPF.UnselectedContentMode.Collapsed">
      <summary>項目のコンテンツは、初めて選択されたときにビジュアルツリーに関連付けられます。項目の選択が解除されると、コンテンツは折りたたまれた状態でビジュアルツリーに保持されます。</summary>
    </member>
    <member name="T:C1.WPF.PinMode">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />が取り得るピン状態。
      </summary>
    </member>
    <member name="F:C1.WPF.PinMode.Unpinned">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />は、スクロール可能な
        <see cref="T:C1.WPF.C1TabItem" />です。
      </summary>
    </member>
    <member name="F:C1.WPF.PinMode.Pinned">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />は、スクロール不可能な固定された
        <see cref="T:C1.WPF.C1TabItem" />です。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorder">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />のヘッダーを含むコントロール。
        <see cref="!:C1TabHeaderAppareance" />で定義されるさまざまな外観をサポートします。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.ChangeVisualStateShape(System.Boolean)">
      <summary>Shape 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.ShapeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemBorder.Shape" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemBorder.CornerRadius" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TabItemBorder" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.Shape">
      <summary>タブの幾何学模様を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorderClipConverter">
      <summary>リボン境界の下部をクリップするために使用されるコンバータ。</summary>
    </member>
    <member name="T:C1.WPF.C1SlopedBorderAdjustConverter">
      <summary>パスのストロークがパスの位置の両側ではなく、内側にレンダリングされるように調整するために使用されるコンバータ。</summary>
    </member>
    <member name="T:C1.WPF.C1TabItemPresenter">
      <summary>
        繰り返しを防ぐために
        <see cref="T:C1.WPF.C1TabItem" />と C1DockTabItem の両方で使用される内部要素。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateSelection(System.Boolean)">
      <summary>Selection 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateTabStripPlacement(System.Boolean)">
      <summary>TabStripPlacement 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.IsSelectedProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.IsSelected" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabShapeProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.TabShape" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.CornerRadius" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabStripPlacementProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.TabStripPlacement" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.ShowSelectedCuesProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.MouseOverBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.MouseOverBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.PressedBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.PressedBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.SelectedBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.SelectedBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TabItemPresenter" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnApplyTemplate">
      <summary>関連するコントロールのパーツを参照できるように、コントロールのテンプレートをロードします。</summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（再構築レイアウトパスなど）が
        <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>依存プロパティの実効値が更新されている場合に呼び出されます。</summary>
      <param name="e">変更されたプロパティと、その古い値と新しい値を示すイベントデータ。</param>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.IsSelected">
      <summary>要素が現在選択されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabShape">
      <summary>コントロールのビジュアル形式を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.CornerRadius">
      <summary>要素の角を丸める度合いを表す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabStripPlacement">
      <summary>コントロール全体に相対的なタブ付きパネルの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues">
      <summary>コントロールの選択状態ビジュアル要素を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.C1TabItemPresenter.IsMouseOverChanged">
      <summary>
        <see cref="P:C1.WPF.C1TabItemPresenter.IsMouseOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.MouseOverBrush">
      <summary>
        マウスがあるコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.PressedBrush">
      <summary>
        クリックされたボタンを描画するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.SelectedBackground">
      <summary>
        選択されたコントロールを強調表示するために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1TabPanel">
      <summary>
        <see cref="T:C1.WPF.C1TabControl" />のコントロールテンプレートで使用される内部要素。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.ArrangeOverride(System.Windows.Size)">
      <summary>レイアウトの「Arrange」の受け渡し動作を提供します。</summary>
    </member>
    <member name="F:C1.WPF.C1TabPanel.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.C1TabPanel.Orientation" />依存関係プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1TabPanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TabPanel.Orientation">
      <summary>子要素を並べる方向を示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1TabPanelOverlapDirection">
      <summary>
        <see cref="T:C1.WPF.C1TabPanel" />内の項目の Z インデックス配置。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Right">
      <summary>右端の項目が背面。選択された項目が前面。</summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Left">
      <summary>左端の項目が背面。選択された項目が前面。</summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.RightLeftFromSelected">
      <summary>左端の項目が背面、右端の項目が背面、選択された項目が前面。</summary>
    </member>
    <member name="T:C1.WPF.C1TabItemShape">
      <summary>
        <see cref="!:C1TabItemHeader" />のサポートされている形状。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rectangle">
      <summary>四角のタブ形状。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rounded">
      <summary>丸いタブ形状。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Sloped">
      <summary>斜めのタブ形状。</summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Ribbon">
      <summary>リボンタブのような形状のタブ。</summary>
    </member>
    <member name="T:C1.WPF.C1TabItemCloseOptions">
      <summary>
        <see cref="T:C1.WPF.C1TabControl" />の［閉じる］ボタンのオプション。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.None">
      <summary>
        <see cref="T:C1.WPF.C1TabItem" />に［閉じる］ボタンは表示されません。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.InEachTab">
      <summary>
        各
        <see cref="T:C1.WPF.C1TabItem" />に［閉じる］ボタンが表示されます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.GlobalClose">
      <summary>
        ［閉じる］ボタンが１つだけ表示されます。このボタンが押されると、選択されている
        <see cref="T:C1.WPF.C1TabItem" />が閉じます。
      </summary>
    </member>
    <member name="T:C1.WPF.BackgroundGradientSuppressor">
      <summary>背景が透過であるか、単色ではない場合に、BackgroundGradient を非表示にします。</summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.GetBackground(System.Windows.DependencyObject)">
      <summary>Background 添付プロパティの値を取得します。</summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.SetBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>Background 添付プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.WPF.BackgroundGradientSuppressor.BackgroundProperty">
      <summary>Background 依存プロパティを識別します。</summary>
    </member>
    <member name="T:C1.WPF.C1DelegateCommand">
      <summary>
        execute および canExecute デリゲートから
        <see cref="T:System.Windows.Input.ICommand" />を作成するためのユーティリティクラス。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.#ctor(System.Action{System.Object})">
      <summary>
        <see cref="T:C1.WPF.C1DelegateCommand" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="execute">execute デリゲート。</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
      <summary>
        <see cref="T:C1.WPF.C1DelegateCommand" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="execute">execute デリゲート。</param>
      <param name="canExecute">canExecute デリゲート。</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.CanExecute(System.Object)">
      <summary>現在の状態でコマンドを実行できるかどうかを決定するメソッドを定義します。</summary>
      <param name="parameter">コマンドによって使用されるデータ。コマンドがデータを必要としない場合は、このオブジェクトを null に設定できます。</param>
      <returns>このコマンドを実行できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.Execute(System.Object)">
      <summary>コマンドが呼び出されるときに呼び出されるメソッドを定義します。</summary>
      <param name="parameter">コマンドによって使用されるデータ。コマンドがデータを必要としない場合は、このオブジェクトを null に設定できます。</param>
    </member>
    <member name="M:C1.WPF.C1DelegateCommand.RaiseCanExecuteChanged">
      <summary>
        <see cref="e:CanExecuteChanged" />イベントを発生させます。
      </summary>
    </member>
    <member name="E:C1.WPF.C1DelegateCommand.CanExecuteChanged">
      <summary>コマンドを実行する必要があるかどうかに影響する変更が発生したときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.C1PropertyPathHelper">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" />およびプロパティパスを処理するためのヘルパーメソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.GetPropertyPathValue(System.Object,System.String)">
      <summary>プロパティパスを項目に適用した結果の値を取得します。</summary>
      <param name="item">パスを適用する項目。</param>
      <param name="propertyPath">プロパティパス。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.CreateSelector``2(System.String)">
      <summary>
        指定されたオブジェクトで指定されたプロパティパスを評価するための関数を作成します。
        <example>プロパティパスが MyProperty1.MyProperty2 の場合は、i =&gt; i.MyProperty1.MyProperty2 という関数を返します。</example></summary>
      <typeparam name="T">アクセスされるプロパティパスを所有する要素のタイプ。</typeparam>
      <typeparam name="X">プロパティパス全体を評価した後の結果のタイプ。</typeparam>
      <param name="path">パス。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.CreateSelector``1(System.Type,System.String)">
      <summary>呼び出されたときに指定されたオブジェクトに対してパス表現を実行する関数を作成します。</summary>
      <remarks>作成される関数に渡されるオブジェクト型は、このメソッドで指定されたオブジェクト型と同じでなければなりません。そうでない場合は、例外が生成されます。</remarks>
      <typeparam name="X">
      </typeparam>
      <param name="type">作成される関数に渡されるオブジェクトの型。</param>
      <param name="path">評価されるパス。</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.C1ProjectThicknessConverter">
      <summary>Thickness 構造体の特定のメンバを抽出するために使用されるコンバータ。</summary>
    </member>
    <member name="T:C1.WPF.C1SideRadiusConverter">
      <summary>内側の要素の特定の CornerRadius をコントロールの CornerRadius に連結するために使用されるコンバータ。</summary>
    </member>
    <member name="T:C1.WPF.C1SideThicknessConverter">
      <summary>内側の要素の Thickness の特定の側をメインコントロールの Thickness に連結するために使用されるコンバータ。</summary>
    </member>
    <member name="T:C1.WPF.CustomConverter">
      <summary>値を変換する関数を受け取るコンバータ。</summary>
    </member>
    <member name="M:C1.WPF.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
      <summary>指定されたコンバータ関数を作成します。</summary>
      <param name="converterFunction">コンバータ関数。引数 - (value, type, parameter, culture)</param>
      <example>
        <code>var converter = CustomConverter.Create((value, type, parameter, culture)=&gt; { return; //ここにコンバータコードを置く。 });</code>
      </example>
      <returns>変換後の値</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
      <summary>指定されたコンバータ関数を作成します。</summary>
      <param name="converterFunction">コンバータ関数。(value, type, parameter, culture)</param>
      <param name="converterBackFunction">逆変換関数。(value, type, parameter, culture)</param>
      <example>
        <code>var converter = CustomConverter.Create((value, type, parameter, culture)=&gt; { return; //ここにコンバータコードを置く });</code>
      </example>
      <returns>変換後の値</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>UI で表示するためにソースデータをターゲットに渡す前に、ソースデータを変更します。</summary>
      <param name="value">ターゲットに渡されているソースデータ。</param>
      <param name="targetType">
        ターゲットの依存関係プロパティが求めるデータの
        <see cref="T:System.Type" />。
      </param>
      <param name="parameter">コンバータロジックで使用されるオプションパラメータ。</param>
      <param name="culture">変換のカルチャ。</param>
      <returns>ターゲットの依存関係プロパティに渡される値。</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
        ターゲットデータをソースオブジェクトに渡す前に、ターゲットデータを変更します。このメソッドは
        <see cref="F:System.Windows.Data.BindingMode.TwoWay" />結合でのみ呼び出されます。
      </summary>
      <param name="value">ソースに渡されているターゲットデータ。</param>
      <param name="targetType">
        ソースオブジェクトが求めるデータの
        <see cref="T:System.Type" />。
      </param>
      <param name="parameter">コンバータロジックで使用されるオプションパラメータ。</param>
      <param name="culture">変換のカルチャ。</param>
      <returns>ソースオブジェクトに渡される値。</returns>
    </member>
    <member name="T:C1.WPF.VisibilityConverter">
      <summary>Visibility と Boolean 間のコンバータ。</summary>
      <remarks>true = Visible、false = Collapsed。</remarks>
    </member>
    <member name="M:C1.WPF.VisibilityConverter.#ctor">
      <summary>
        <see cref="T:C1.WPF.VisibilityConverter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.VisibilityConverter.Opposite">
      <summary>
        この
        <see cref="T:C1.WPF.VisibilityConverter" />が逆向きであるかどうかを示す値を取得または設定します。
      </summary>
      <value>
        逆向きの場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="T:C1.WPF.ZoomToScaleTransformConverter">
      <summary>
        Double 値を
        <see cref="T:System.Windows.Media.ScaleTransform" />に変換します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1DragDropManager">
      <summary>Silverlight アプリケーション内のドラッグアンドドロップ操作の方法を提供します。</summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.ClearTargets">
      <summary>登録されているすべてのドロップ先を削除します。</summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.ClearSources">
      <summary>登録されているすべてのドラッグ元を削除します。</summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.RegisterDropTarget(System.Windows.UIElement,System.Boolean)">
      <summary>要素をドロップ先として登録（または登録解除）します。</summary>
      <param name="target">
        ドロップ先として機能する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="register">
        要素を登録する場合は
        <b>true</b>、登録解除する場合は
        <b>false</b>。
      </param>
      <remarks>
        <paramref name="target" />要素を透過にしないでください。透過にすると、マウスイベントを受け取らなくなるため、ドロップ先として機能しません。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.UnregisterDragSource(System.Windows.UIElement)">
      <summary>
        <see cref="T:System.Windows.UIElement" />をドラッグ元として登録解除します。
      </summary>
      <param name="source">
        ドラッグ元として機能しなくなる
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <remarks>このメソッドの呼び出しは、要素を効果なしのドラッグ元（DragDropEffect.None）として登録することと同じ効果があります。</remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.DragDropEffect)">
      <param name="effect">
        操作でサポートされる
        <see cref="T:C1.WPF.DragDropEffect" />。
      </param>
      <remarks>
        <para>
          <paramref name="e" />は必ずしも必要ではありませんが、ドラッグアンドドロップ操作はマウスアクションで開始されるため、通常は存在します。提供する
          <see cref="T:System.Windows.Input.MouseEventArgs" />がない場合は、代わりに
          <b>null</b>を渡します。
        </para>
        <para>
          このメソッドは、ドラッグ操作を開始するとすぐに戻ります。呼び出し元は、
          <see cref="E:C1.WPF.C1DragDropManager.DragStart" />、
          <see cref="E:C1.WPF.C1DragDropManager.DragEnter" />、
          <see cref="E:C1.WPF.C1DragDropManager.DragOver" />、および
          <see cref="E:C1.WPF.C1DragDropManager.DragDrop" />イベントを使用して、操作を監視および完了する必要があります。
        </para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragStart(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragStart" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragEnter(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragEnter" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragOver(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragOver" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragLeave(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragLeave" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragDrop(System.Windows.RoutedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragDrop" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.OnDragAutoScroll(C1.WPF.DragDropEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1DragDropManager.DragAutoScroll" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Windows.Input.MouseEventArgs" />。
      </param>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.DragThreshold">
      <summary>マウスがどれだけ移動したらドラッグ操作を開始するかをピクセル単位の距離で取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="M:C1.WPF.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Input.ModifierKeys)" />メソッドを使ってドラッグ元として登録されたオブジェクトのドラッグ動作に影響します。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScroll">
      <summary>
        <see cref="T:C1.WPF.C1DragDropManager" />がドロップ先を含む
        <see cref="T:System.Windows.Controls.ScrollViewer" />を自動的にスクロールするかどうかを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollEdge">
      <summary>マウスがドラッグ先要素の端にどの距離まで近付いたら自動スクロール処理を開始するかを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" />が true に設定されている場合にのみ適用されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollStep">
      <summary>自動スクロールステップごとにスクロールするピクセル数を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" />が true に設定されている場合にのみ適用されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.AutoScrollDelay">
      <summary>自動スクロールステップの時間間隔をミリ秒単位で取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.WPF.C1DragDropManager.AutoScroll" />が true に設定されている場合にのみ適用されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.Canvas">
      <summary>
        ドラッグアンドドロップ処理の表示に使用される
        <see cref="P:C1.Silverlight.C1DragDropManager.Canvas" />への参照を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.SourceMarker">
      <summary>
        ドラッグ元の強調表示に使用される
        <see cref="T:System.Windows.Controls.Border" />への参照を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1DragDropManager.TargetMarker">
      <summary>
        ドロップ場所を示すために使用される
        <see cref="T:System.Windows.Controls.Border" />を取得または設定します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragStart">
      <summary>ドラッグアンドドロップ処理が開始されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragEnter">
      <summary>ドラッグアンドドロップ処理中に、ポインタが登録されたドロップ先に入ったときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragOver">
      <summary>ドラッグアンドドロップ処理中に、ポインタが登録されたドロップ先上に移動したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragLeave">
      <summary>ドラッグアンドドロップ処理中に、ポインタが登録されたドロップ先から出たときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragDrop">
      <summary>ドラッグアンドドロップ処理の最後に、ユーザーが登録されたドロップ先上でマウスボタンを放したときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1DragDropManager.DragAutoScroll">
      <summary>
        ドロップ場所をビュー内に留めておくために
        <see cref="T:C1.WPF.C1DragDropManager" />が
        <see cref="T:System.Windows.Controls.ScrollViewer" />を自動的にスクロールした後で発生します。
      </summary>
      <remarks>
        <see cref="T:C1.WPF.DragDropEventArgs" />の
        <see cref="T:System.Windows.Controls.ScrollViewer" />プロパティには、更新された
        <see cref="T:System.Windows.Controls.ScrollViewer" />への参照が含まれます。
      </remarks>
    </member>
    <member name="T:C1.WPF.DragDropEffect">
      <summary>ユーザーがドラッグ元をドロップ先要素にドロップしたときに実行されるアクションを指定します。</summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.None">
      <summary>アクションなし。</summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.Move">
      <summary>ドラッグ元要素をドラッグ先要素に移動します。</summary>
    </member>
    <member name="F:C1.WPF.DragDropEffect.Copy">
      <summary>ドラッグ元要素をドラッグ先要素にコピーします。</summary>
    </member>
    <member name="T:C1.WPF.DragDropEventHandler">
      <summary>ドラッグアンドドロップイベントの処理に使用されるメソッド。</summary>
      <param name="source">イベントを発生したオブジェクト。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.WPF.DragDropEventArgs" />。
      </param>
    </member>
    <member name="T:C1.WPF.DragDropEventArgs">
      <summary>ドラッグアンドドロップイベントのデータを含むクラス。</summary>
    </member>
    <member name="M:C1.WPF.DragDropEventArgs.#ctor(System.Windows.RoutedEventArgs,System.Windows.UIElement,System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Controls.ScrollViewer)">
      <summary>
        <see cref="T:C1.WPF.DragDropEventArgs" />の新しいインスタンスを初期化します。
      </summary>
      <param name="e">
        マウスの状態情報を含む
        <see cref="T:System.Windows.RoutedEventArgs" />。
      </param>
      <param name="source">
        ドラッグ元として機能する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="target">
        ドロップ先として機能する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="effect">
        ドラッグ＆ドロップ処理の完了時に実行するアクションを指定する
        <see cref="T:C1.WPF.DragDropEffect" />。
      </param>
      <param name="scrollViewer">
        ドラッグ先の場所を表示するためにスクロールする
        <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" />。
      </param>
    </member>
    <member name="M:C1.WPF.DragDropEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>
        指定された
        <see cref="T:System.Windows.UIElement" />に相対的なマウス座標を取得します。
      </summary>
      <param name="relativeTo">
        戻り値の座標系を決定する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <returns>
        <paramref name="relativeTo" />パラメータで指定された
        <see cref="T:System.Windows.UIElement" />に相対的なマウス座標を含む
        <see cref="T:System.Windows.Point" />。
      </returns>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.DragSource">
      <summary>
        ドラッグ元として機能する
        <see cref="T:System.Windows.UIElement" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.DropTarget">
      <summary>
        ドロップ先として機能する
        <see cref="T:System.Windows.UIElement" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.Effect">
      <summary>
        ユーザーが
        <see cref="P:C1.WPF.DragDropEventArgs.DragSource" />要素を
        <see cref="P:C1.WPF.DragDropEventArgs.DropTarget" />要素にドロップしたときに適用される
        <see cref="T:C1.WPF.DragDropEffect" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.DragDropEventArgs.ScrollViewer">
      <summary>
        ドラッグアンドドロップ操作中にマウスがその端に近づくと自動的にスクロールする
        <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" />を取得または設定します。
      </summary>
      <remarks>
        <see cref="T:C1.WPF.C1DragDropManager" />は、デフォルトで
        <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" />を選択します。いくつかのスクロールビューアがネストされている場合は、最も内側のビューアがデフォルトで選択されます。呼び出し元は、このプロパティを目的の
        <see cref="P:C1.WPF.DragDropEventArgs.ScrollViewer" />への参照に設定することで、この動作を変更できます。
      </remarks>
    </member>
    <member name="T:C1.WPF.Extensions">
      <summary>他の複数のクラスに対して静的拡張メソッドを提供するクラスです。</summary>
    </member>
    <member name="M:C1.WPF.Extensions.FindParent``1(System.Windows.FrameworkElement)">
      <summary>特定の FrameworkElement の指定されたタイプの最初の親を見つけます。</summary>
      <returns>
        <returns>
          タイプが
          <typeparam name="T" />である最初のオブジェクト
        </returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetAllParents(System.Windows.FrameworkElement)">
      <summary>ビジュアルツリー内のすべての親を返します。</summary>
      <returns>ビジュアルツリー階層内の祖先フレームワーク要素のリスト</returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetVisualStateGroup(System.Windows.FrameworkElement,System.String)">
      <summary>仮想ツリーを検索して、指定された名前を持つ VisualStateGroup を取得します</summary>
      <param name="root">開始する要素</param>
      <param name="groupName">検索するグループの名前</param>
      <returns>見つかった場合はグループ。または null</returns>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>以前にこの依存プロパティが設定されておらず、要素のスタイルによってこのプロパティが設定されない場合に、連結を設定します。</summary>
      <typeparam name="T">ソースのタイプ</typeparam>
      <param name="target">ターゲット。</param>
      <param name="dp">設定される依存プロパティ。</param>
      <param name="source">ソース。</param>
      <param name="expr">ソースオブジェクトのプロパティを返す式。</param>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Windows.Data.IValueConverter)">
      <summary>以前にこの依存プロパティが設定されておらず、要素のスタイルによってこのプロパティが設定されない場合に、連結を設定します。</summary>
      <typeparam name="T">ソースのタイプ</typeparam>
      <param name="target">ターゲット。</param>
      <param name="dp">設定される依存プロパティ。</param>
      <param name="source">ソース。</param>
      <param name="expr">ソースオブジェクトのプロパティを返す式。</param>
      <param name="converter">作成された連結オブジェクトに適用されるコンバータ。</param>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}})">
      <summary>
        ポップアップを別の
        <see cref="T:System.Windows.FrameworkElement" />に相対的にします。
      </summary>
      <param name="popup">
        処理する
        <see cref="T:System.Windows.Controls.Primitives.Popup" />。
      </param>
      <param name="relativeElement">ポップアップの配置に使用される要素。</param>
      <param name="getLocations">
        ２つの要素の境界を示すコーナーを定義する
        <see cref="T:C1.WPF.AnchorMatching" />の順序付きリストを提供する関数。
      </param>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}},System.Func{System.Windows.Point},System.Func{System.Windows.Point})">
      <summary>
        ポップアップを別の
        <see cref="T:System.Windows.FrameworkElement" />に相対的にします。
      </summary>
      <param name="popup">
        処理する
        <see cref="T:System.Windows.Controls.Primitives.Popup" />。
      </param>
      <param name="relativeElement">ポップアップの配置に使用される要素。</param>
      <param name="getLocations">
        ２つの要素の境界を示すコーナーを定義する
        <see cref="T:C1.WPF.AnchorMatching" />の順序付きリストを提供する関数。
      </param>
      <param name="getPosition">ポップアップの現在の位置を取得する関数。</param>
      <param name="getReferencePosition">参照要素の現在の位置を取得する関数。</param>
    </member>
    <member name="M:C1.WPF.Extensions.GetAbsoluteUri(System.String)">
      <summary>
        相対または絶対 URI を表す文字列から絶対
        <see cref="T:System.Uri" />を返します。
      </summary>
      <param name="uriString">文字列形式の相対または絶対 URI。</param>
      <returns>
        パラメータ文字列から取得した絶対
        <see cref="T:System.Uri" />。
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.C1TransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
      <summary>
        <see cref="T:System.Windows.UIElement" />から指定されたオブジェクトに座標を変換するために使用できる変換オブジェクトを返します。
      </summary>
      <remarks>
        これは、
        <see cref="M:System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)" />の強化バージョンです。
        <see cref="T:System.Windows.Controls.Primitives.Popup" />内の UIElement と同様に、TransformToVisual が機能しない場合に機能します。
      </remarks>
      <param name="element">
        ソース座標を定義する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="visual">
        ターゲット座標を定義する
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <returns>
        <see cref="T:System.Windows.UIElement" />から指定されたオブジェクトに座標を変換するために使用できる変換オブジェクト。
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.Distance(System.Windows.Point,System.Windows.Point)">
      <summary>２つのポイント間の距離を返します。</summary>
      <param name="p1">１つのポイント。</param>
      <param name="p2">もう１つのポイント。</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.KeyboardUtil">
      <summary>キーボードユーティリティ。</summary>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Shift">
      <summary>［Shift］キーが押されているかどうかを示す値を取得します。</summary>
      <value>
        ［Shift］キーが押されている場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Ctrl">
      <summary>［Ctrl］キーが押されているかどうかを示す値を取得します。</summary>
      <value>
        ［Ctrl］キーが押されている場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Alt">
      <summary>［Alt］キーが押されているかどうかを示す値を取得します。</summary>
      <value>
        ［Ctrl］キーが押されている場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="T:C1.WPF.PropertyChangedEventArgs`1">
      <summary>OnPropertyChanged イベントのイベントデータを提供します。</summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.NewValue">
      <summary>変更後のプロパティの値。</summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.OldValue">
      <summary>変更前のプロパティの値。</summary>
    </member>
    <member name="T:C1.WPF.PropertyChangingEventArgs`1">
      <summary>OnPropertyChanging イベントのイベントデータを提供します。</summary>
    </member>
    <member name="P:C1.WPF.PropertyChangingEventArgs`1.Cancel">
      <summary>
        この
        <see cref="T:C1.WPF.PropertyChangingEventArgs`1" />がキャンセルされたかどうかを示す値を取得または設定します。
      </summary>
      <value>
        キャンセルの場合は
        <c>true</c>、そうでない場合は
        <c>false</c>。
      </value>
    </member>
    <member name="T:C1.WPF.ScrollBarCornerRadiusBuilder">
      <summary>スクロールバーボタンに適切な CornerRadius を提供するために、ScrollBar テンプレート内で使用される要素。</summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeftProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeft" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.TopRightProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopRight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeftProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeft" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRightProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.ScrollBarCornerRadiusBuilder.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopLeft">
      <summary>
        左上隅の値が
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />から取得されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.TopRight">
      <summary>
        右上隅の値が
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />から取得されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomLeft">
      <summary>
        左下隅の値が
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />から取得されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.BottomRight">
      <summary>
        右下隅の値が
        <see cref="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius" />から取得されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.ScrollBarCornerRadius">
      <summary>スクロールバー自体の角の丸みを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.ButtonCornerRadius">
      <summary>ボタンの角の丸みを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollBarCornerRadiusBuilder.Output">
      <summary>ボタンに適用される角の丸みを取得します。</summary>
    </member>
    <member name="E:C1.WPF.ScrollBarCornerRadiusBuilder.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerCornerRadiusBase">
      <summary>スクロールバーおよびスクロールコンテンツプレゼンタに適切な CornerRadius を提供するために、ScrollViewer テンプレート内で使用される要素。</summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.#ctor">
      <summary>
        <see cref="T:C1.WPF.ScrollViewerCornerRadiusBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadiusProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadius" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.UpdateOutput">
      <summary>依存値の１つが変更されたときに出力を更新します。</summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBase.RaisePropertyChanged(System.String)">
      <summary>プロパティ変更イベントを発生させます。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.CornerRadius">
      <summary>ScrollViewer で使用される CornerRadius を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.VerticalScrollBarVisibility">
      <summary>垂直スクロールバーの可視性を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBase.HorizontalScrollBarVisibility">
      <summary>水平スクロールバーの可視性を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.ScrollViewerCornerRadiusBase.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerCornerRadiusBuilder">
      <summary>スクロールバーに適切な CornerRadius を提供するために、ScrollViewer テンプレート内で使用される要素。</summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerCornerRadiusBuilder.OrientationProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Orientation" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerCornerRadiusBuilder.UpdateOutput">
      <summary>依存値の１つが変更されたときに出力を更新します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Orientation">
      <summary>このビルダーが使用されるスクロールバーの方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerCornerRadiusBuilder.Output">
      <summary>スクロールバーで使用される、結果の CornerRadius を取得します。</summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerContentPresenterClip">
      <summary>ScrollContentPresenter に適切なクリップを提供するために、ScrollViewer テンプレート内で使用される要素。</summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenterProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenter" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerContentPresenterClip.UpdateOutput">
      <summary>依存値の１つが変更されたときに出力を更新します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerContentPresenterClip.ScrollContentPresenter">
      <summary>クリップされるスクロールコンテンツプレゼンタを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerContentPresenterClip.Output">
      <summary>スクロールコンテンツプレゼンタで使用される、結果のクリップジオメトリを取得します。</summary>
    </member>
    <member name="T:C1.WPF.ScrollViewerTouchBehavior">
      <summary>スクロール領域を指でなぞってスクロールするためのタッチサポートを MS ScrollViewer に追加します。</summary>
    </member>
    <member name="M:C1.WPF.ScrollViewerTouchBehavior.GetTouchBehavior(System.Windows.Controls.ScrollViewer)">
      <summary>指定された ScrollViewer に関連付けられているタッチ動作を取得します。</summary>
      <param name="scrollViewer">タッチ動作がアタッチされているスクロールビューア。</param>
    </member>
    <member name="M:C1.WPF.ScrollViewerTouchBehavior.SetTouchBehavior(System.Windows.Controls.ScrollViewer,C1.WPF.ScrollViewerTouchBehavior)">
      <summary>ScrollViewer にタッチ動作を設定します。</summary>
      <param name="scrollViewer">指でスクロールできるようにするスクロールビューア。</param>
      <param name="value">タッチ動作のインスタンス。</param>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.TouchBehaviorProperty">
      <summary>TouchBehavior 添付プロパティを識別します。</summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.HasInertiaProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerTouchBehavior.HasInertia" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.PanningDirectionProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerTouchBehavior.PanningDirection" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipeProperty">
      <summary>
        <see cref="P:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipe" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.HasInertia">
      <summary>タッチスクロールに慣性を適用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.PanningDirection">
      <summary>パン方向を取得または設定します。</summary>
      <remarks>これは、IgnoreSwipe が true に設定されている場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.WPF.ScrollViewerTouchBehavior.IgnoreSwipe">
      <summary>スワイプジェスチャを無視するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.SmallShapePresenter">
      <summary>内部クラス。Path などの Shape オブジェクトを SmallShapePresenter でラップして、MaxHeight/MaxWidth が無限大未満の場合に、形状がすべての空きスペースを占有しないようにします。</summary>
    </member>
    <member name="M:C1.WPF.SmallShapePresenter.MeasureOverride(System.Windows.Size)">
      <summary>レイアウトの Measure の受け渡し動作を提供します。</summary>
    </member>
    <member name="T:C1.WPF.SourcedEventArgs">
      <summary>イベントを発生したオブジェクトとは異なるソースのイベントのデータを含みます。</summary>
    </member>
    <member name="P:C1.WPF.SourcedEventArgs.Source">
      <summary>イベントのソースを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.VTreeHelper">
      <summary>
        <see cref="T:C1.WPF.VTreeHelper" />クラスは、ビジュアルツリー内のノードに関連する一般的なタスクを実行するユーティリティメソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildOfType(System.Windows.DependencyObject,System.Type)">
      <summary>指定された親内にある指定された型の最初の子ビジュアルオブジェクトを返します。</summary>
      <param name="reference">
        <see cref="T:System.Windows.DependencyObject" />として参照される親ビジュアルオブジェクト。
      </param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <returns>指定された型のビジュアルオブジェクト。</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildrenOfType(System.Windows.DependencyObject,System.Type,System.Collections.Generic.IList{System.Windows.DependencyObject}@)">
      <summary>指定された親内にある指定された型のすべての子ビジュアルオブジェクトを返します。</summary>
      <param name="reference">
        <see cref="T:System.Windows.DependencyObject" />として参照される親ビジュアルオブジェクト。
      </param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <param name="list">
        見つかったオブジェクトが格納された
        <see cref="T:System.Collections.Generic.IList`1" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type)">
      <summary>
        指定された型のビジュアルオブジェクトの親を表す
        <see cref="T:System.Windows.DependencyObject" />値を返します。このメソッドは、目的の親要素が見つかるか、親要素が null になるまで、ビジュアルツリーを検索します。
      </summary>
      <param name="reference">親を返すビジュアルオブジェクト。</param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <returns>ビジュアルオブジェクトの親。</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject)">
      <summary>
        指定された型のビジュアルオブジェクトの親を表す
        <see cref="T:System.Windows.DependencyObject" />値を返します。このメソッドは、目的の親要素が見つかるか、親要素が指定された endObject になるまで、ビジュアルツリーを検索します。
      </summary>
      <param name="reference">親を返すビジュアルオブジェクト。</param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <param name="endObject">検索の終了点を表すビジュアルオブジェクト。</param>
      <returns>ビジュアルオブジェクトの親。</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Boolean)">
      <summary>
        指定された型のビジュアルオブジェクトの親を表す
        <see cref="T:System.Windows.DependencyObject" />値を返します。このメソッドは、目的の親要素が見つかるか、親要素が null になるまで、ビジュアルツリーを検索します。
      </summary>
      <param name="reference">親を返すビジュアルオブジェクト。</param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <param name="lookOutsideVisualTree">VisualTree の外部で検索を続行するかどうかを指定します。</param>
      <returns>ビジュアルオブジェクトの親。</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject,System.Boolean)">
      <summary>
        指定された型のビジュアルオブジェクトの親を表す
        <see cref="T:System.Windows.DependencyObject" />値を返します。このメソッドは、目的の親要素が見つかるか、親要素が指定された endObject になるまで、ビジュアルツリーを検索します。
      </summary>
      <param name="reference">親を返すビジュアルオブジェクト。</param>
      <param name="type">
        検索する子要素の
        <see cref="T:System.Type" />。
      </param>
      <param name="endObject">検索の終了点を表すビジュアルオブジェクト。</param>
      <param name="lookOutsideVisualTree">VisualTree の外部で検索を続行するかどうかを指定します。</param>
      <returns>ビジュアルオブジェクトの親。</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetFirstParent(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Type},System.Windows.DependencyObject)">
      <summary>
        指定された型のいずれかであるビジュアルオブジェクトの最初の親を表す
        <see cref="T:System.Windows.DependencyObject" />値を返します。このメソッドは、目的の親要素が見つかるか、親要素が指定された endObject になるまで、ビジュアルツリーを検索します。
      </summary>
      <param name="reference">親を返すビジュアルオブジェクト。</param>
      <param name="types">
        検索する型の
        <see cref="T:System.Collections.Generic.IList`1" />リスト。
      </param>
      <param name="endObject">検索の終了点を表すビジュアルオブジェクト。</param>
      <returns>ビジュアルオブジェクトの親。</returns>
    </member>
    <member name="T:C1.WPF.C1HyperlinkButton">
      <summary>ハイパーリンクを表示するボタンコントロールを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1HyperlinkButton" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.OnApplyTemplate">
      <summary>
        派生クラスでオーバーライドされた場合は、アプリケーションコードまたは内部プロセスが
        <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />を呼び出すたびに呼び出されます。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperlinkButton.NavigateUriProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperlinkButton.NavigateUri" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1HyperlinkButton.TargetNameProperty">
      <summary>
        <see cref="P:C1.WPF.C1HyperlinkButton.TargetName" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.NavigateUri">
      <summary>
        <see cref="T:C1.WPF.C1HyperlinkButton" />が起動されたときに移動する先の URI を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.TargetName">
      <summary>
        <see cref="T:C1.WPF.C1HyperlinkButton" />のターゲットウィンドウまたはフレームの名前を取得または設定します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1DragHelper.FinalizeHelper">
      <summary>すべてのイベントハンドラをデタッチし、キャプチャした要素を解放します。</summary>
    </member>
    <member name="M:C1.WPF.C1ScrollHelper.FinalizeHelper">
      <summary>すべてのイベントハンドラをデタッチします。</summary>
    </member>
    <member name="M:C1.WPF.C1TapHelper.FinalizeHelper">
      <summary>すべてのイベントハンドラをデタッチします。</summary>
    </member>
    <member name="M:C1.WPF.C1ZoomHelper.FinalizeHelper">
      <summary>すべてのイベントハンドラをデタッチします。</summary>
    </member>
    <member name="T:C1.WPF.IC1ContextMenu">
      <summary>コンテキストメニューインタフェースを定義します。</summary>
    </member>
    <member name="M:C1.WPF.IC1ContextMenu.Show(System.Windows.FrameworkElement,System.Windows.Point)">
      <summary>指定された位置にコンテキストメニューを表示します。</summary>
      <param name="placementTarget">コンテキストメニューが関連付けられるコントロールを 指定します。</param>
      <param name="offset">コンテキストメニューが表示される場所のオフセット座標。 この座標は、control パラメータで指定されたコントロールに相対的です。</param>
    </member>
    <member name="P:C1.WPF.IC1ContextMenu.PlacementTarget">
      <summary>コンテキストメニューが開かれて相対的に配置されるときの基準になる FrameworkElement を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1ContextMenuService">
      <summary>コンテキストメニューを表示するための静的メソッドを提供するサービスを表します。</summary>
    </member>
    <member name="M:C1.WPF.C1ContextMenuService.GetContextMenu(System.Windows.DependencyObject)">
      <summary>コントロールのコンテキストメニューを取得します。</summary>
      <param name="element">コンテキストメニューが取得されるコントロール。</param>
      <returns>コントロールのコンテキストメニュー。</returns>
    </member>
    <member name="M:C1.WPF.C1ContextMenuService.SetContextMenu(System.Windows.DependencyObject,C1.WPF.IC1ContextMenu)">
      <summary>コントロールのコンテキストメニューを設定します。</summary>
      <param name="element">コンテキストメニューがアタッチされるコントロール。</param>
      <param name="value">設定するコンテキストメニュー。</param>
    </member>
    <member name="F:C1.WPF.C1ContextMenuService.ContextMenuProperty">
      <summary>ContextMenu 依存プロパティを識別します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewerPanel.AfterItemMeasure(System.Int32,System.Windows.FrameworkElement)">
      <summary>スクロール中の構造を更新するために、項目が測定された後に呼び出されます。</summary>
      <param name="index">測定された項目のインデックス。</param>
      <param name="child">測定された子。</param>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.AfterItemMeasure(System.Int32,System.Windows.FrameworkElement)">
      <summary>スクロール中の構造を更新するために、項目が測定された後に呼び出されます。</summary>
      <param name="index">測定された項目のインデックス。</param>
      <param name="child">測定された子。</param>
    </member>
    <member name="T:C1.WPF.C1RadialColorItem">
      <summary>C1RadialMenu コントロール内で使用される色選択用の項目。</summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenuItem">
      <summary>C1RadialMenu コントロール内の選択可能な１つの項目を表します。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>Common 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>Click イベントを発生させて、クリックアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnChecked(C1.WPF.SourcedEventArgs)">
      <summary>Checked イベントを発生させて、項目をチェックするアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>Unchecked イベントを発生させて、項目のチェックを外すアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnHeaderChanged(System.Object)">
      <summary>
        <see cref="P:Header" />プロパティの値が変更されたときに呼び出されます。
      </summary>
      <param name="oldValue">古い値。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.ChangeVisualStateHighlighted(System.Boolean)">
      <summary>Highlighted 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.Angle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ExpandAreaThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.ExpandAreaThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CenterPointProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.CenterPoint" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.OuterArcProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.OuterArc" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ExpandArcProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.ExpandArc" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CheckArcProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.CheckArc" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CommandProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.Command" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CommandParameterProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.CommandParameter" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.GroupNameProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.GroupName" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.Header" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.HeaderTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AccentBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.AccentBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IconProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.Icon" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IconStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IconStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsCheckableProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IsCheckable" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsCheckedProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IsChecked" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsHighlightedProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IsHighlighted" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsPointerOverProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IsPointerOver" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.TextAlignment" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextDecorationsProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.TextDecorations" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.TextWrappingProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.TextWrapping" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ToolTipProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.ToolTip" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ShowSelectedItemProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SelectedItemOptionsProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.SelectedItemOptions" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SelectedIndexProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.SelectedIndex" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.AutoSelectProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.AutoSelect" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.IsSelectableProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.IsSelectable" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.SectorCountProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.SectorCount" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.DisplayIndexProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.DisplayIndex" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.ItemContainerStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.ItemContainerStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.FocusCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.DisabledCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.HeaderBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.HeaderForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.HeaderForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenuItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItem.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1RadialMenuItem" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Click">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenuItem" />がクリックされると発生します。
      </summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Checked">
      <summary>C1RadialMenuItem がチェックされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.Unchecked">
      <summary>C1RadialMenuItem のチェックが外されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Index">
      <summary>
        親項目コレクション内のこの
        <see cref="T:C1.WPF.C1RadialMenuItem" />のインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HasItems">
      <summary>ItemsControl に項目が含まれているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HasContent">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenuItem" />にサブ項目やその他のコンテンツが含まれているかどうかを示す値を取得します。
      </summary>
      <remarks>セパレータとして使用される空の項目に対してこのプロパティは false を返します。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ParentItem">
      <summary>
        この項目の親である
        <see cref="T:System.Windows.Controls.ItemsControl" />を取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Menu">
      <summary>
        この項目の親の
        <see cref="T:C1.WPF.C1RadialMenu" />を識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Angle">
      <summary>項目の角度を取得または設定します。</summary>
      <remarks>このプロパティは、C1RadialPanel パネルで設定されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ExpandAreaThickness">
      <summary>展開領域の厚みを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CenterPoint">
      <summary>現在の C1RadialMenuItem を表す扇形を描画するために xaml で使用される円の中心の座標を取得します。</summary>
      <remarks>このプロパティは、C1RadialPanel パネルで設定されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.OuterArc">
      <summary>現在の C1RadialMenuItem を表す扇形を描画するために xaml で使用される外側円弧の定義を取得します。</summary>
      <remarks>このプロパティは、C1RadialPanel パネルで設定されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ExpandArc">
      <summary>展開領域円弧の定義を取得します。</summary>
      <remarks>このプロパティは、C1RadialPanel パネルで設定されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CheckArc">
      <summary>チェック円弧の定義を取得します。</summary>
      <remarks>このプロパティは、C1RadialPanel パネルで設定されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Command">
      <summary>このボタンが押されたときに呼び出されるコマンドを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CommandParameter">
      <summary>Command プロパティに渡すパラメータを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.GroupName">
      <summary>相互に排他的なメニュー項目（チェック可能な場合）を指定するための名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Header">
      <summary>このコントロールのヘッダーを取得または設定します。</summary>
      <remarks>ToolTip プロパティが設定されていない場合は、ツールチップにもこのプロパティが表示されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderTemplate">
      <summary>ヘッダーの表示に使用されるデータテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.AccentBrush">
      <summary>
        小さなメニュー部分に色を付けるために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.Icon">
      <summary>C1RadialMenuItem に表示されるアイコンを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IconStyle">
      <summary>アイコンの表示に使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsCheckable">
      <summary>C1RadialMenuItem をチェックできるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsChecked">
      <summary>C1RadialMenuItem がチェックされているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsHighlighted">
      <summary>C1RadialMenuItem が強調表示されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsPointerOver">
      <summary>ポインタがこの要素の上にあるかどうかを示す値を取得します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenuItem.IsPointerOverChanged">
      <summary>
        <see cref="P:IsPointerOver" />プロパティが変更されたときに発生するイベントです。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextAlignment">
      <summary>ヘッダー内のテキストコンテンツの水平方向の配置を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextDecorations">
      <summary>ヘッダーのテキストに適用される効果が含まれる TextDecorationCollection を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.TextWrapping">
      <summary>ヘッダー内でテキストの折り返し方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ToolTip">
      <summary>このコントロールのツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem">
      <summary>選択されているサブ項目のアイコン、ヘッダー、チェック記号を現在の項目に表示するかどうかを決定します。</summary>
      <remarks>このプロパティは、サブ項目を含む項目でのみ有効です。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SelectedItemOptions">
      <summary>選択されているサブ項目のどの部分を現在の項目に表示するかを決定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.WPF.C1RadialMenuItem.ShowSelectedItem" />プロパティが true の場合に、サブ項目を持つ項目で有効です。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SelectedIndex">
      <summary>現在選択されているサブ項目のインデックスを取得または設定します。</summary>
      <remarks>このプロパティは、サブ項目を含む項目でのみ有効です。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.AutoSelect">
      <summary>エンドユーザーの選択に基づいて C1RadialMenuItem が SelectedIndex プロパティを更新するかどうかを決定します。</summary>
      <remarks>このプロパティは、サブ項目を含む項目でのみ有効です。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.IsSelectable">
      <summary>エンドユーザーの選択に基づいて SelectedIndex プロパティが変更されたときに、この項目を考慮するかどうかを決定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.SectorCount">
      <summary>メニューに表示するセクターの数を取得または設定します。</summary>
      <remarks>このプロパティは、項目にサブ項目がある場合にのみ有効です。このプロパティが -1 に設定されている場合、セクター数はメニュー項目の数で定義されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.DisplayIndex">
      <summary>親サブメニューでこの項目のレイアウトに使用されるこの項目の０から始まるインデックスを取得または設定します。</summary>
      <remarks>デフォルト値は -1 です。その場合、実際の項目インデックスは親 Items コレクション内の位置で定義されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.ItemContainerStyle">
      <summary>項目コンテナの表示に使用される項目コンテナスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがある項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっている項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderBackground">
      <summary>ヘッダーの背景ブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.HeaderForeground">
      <summary>ヘッダーの前景ブラシを取得または設定します。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>Click イベントを発生させて、クリックアクションに応答します。</summary>
      <param name="e">SourcedEventArgs のデータを提供します。</param>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.BrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.Brush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.ColorProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.Color" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.FocusCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialColorItem.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.DisabledCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialColorItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItem.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1RadialColorItem" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.HasContent">
      <summary>
        <see cref="T:C1.WPF.C1RadialColorItem" />にサブ項目やその他のコンテンツが含まれているかどうかを示す値を取得します。
      </summary>
      <remarks>セパレータとして使用される空の項目に対してこのプロパティは false を返します。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Index">
      <summary>
        親項目コレクション内のこの
        <see cref="T:C1.WPF.C1RadialColorItem" />のインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Brush">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.Brush" />プロパティを取得または設定します。
      </summary>
      <remarks>
        このプロパティは、アプリケーションで
        <see cref="P:C1.WPF.C1RadialColorItem.Color" />プロパティが設定されている場合に自動的に設定されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.Color">
      <summary>
        <see cref="P:C1.WPF.C1RadialColorItem.Color" />プロパティを取得または設定します。
      </summary>
      <remarks>
        このプロパティは、アプリケーションで
        <see cref="P:C1.WPF.C1RadialColorItem.Brush" />プロパティが設定されている場合に自動的に設定されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがある項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItem.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっている項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenu">
      <summary>C1RadialMenu コントロールは、従来のコンテキストメニューの代わりに使用できるタッチ操作向きのコントロールです。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
        <see cref="E:Closing" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.ComponentModel.CancelEventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnOpening(System.ComponentModel.CancelEventArgs)">
      <summary>
        <see cref="E:Opening" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.ComponentModel.CancelEventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnOpened(System.EventArgs)">
      <summary>
        <see cref="E:Opened" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnClosed(System.EventArgs)">
      <summary>
        <see cref="E:Closed" />イベントを発生させます。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />インスタンス。
      </param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnCollapsing(System.ComponentModel.CancelEventArgs)">
      <summary>Collapsing イベントを発生させます。</summary>
      <param name="e">CancelEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnCollapsed(System.EventArgs)">
      <summary>Collapsed イベントを発生させます。</summary>
      <param name="e">EventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnExpanding(System.ComponentModel.CancelEventArgs)">
      <summary>Expanding イベントを発生させます。</summary>
      <param name="e">CancelEventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnExpanded(System.EventArgs)">
      <summary>Expanded イベントを発生させます。</summary>
      <param name="e">EventArgs のデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemClick" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemOpening" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemOpened(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemOpened" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemClosing" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemClosed(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemClosed" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemChecked(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemChecked" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnItemUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
        <see cref="E:C1.WPF.C1RadialMenu.ItemUnchecked" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnAutoCollapseChanged(System.Boolean)">
      <summary>プロパティ AutoCollapse が変更されたときに呼び出されます。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Show(System.Windows.FrameworkElement,System.Windows.Point)">
      <summary>指定された位置にラジアルメニューを表示します。</summary>
      <remarks>このメソッドは、折りたたまれた状態でメニューを表示します。</remarks>
      <param name="placementTarget">コンテキストメニューが関連付けられるコントロールを 指定します。</param>
      <param name="offset">コンテキストメニューが表示される場所のオフセット座標。 この座標は、control パラメータで指定されたコントロールに相対的です。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Show(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
      <summary>指定された位置にラジアルメニューを表示します。</summary>
      <param name="placementTarget">コンテキストメニューが関連付けられるコントロールを 指定します。</param>
      <param name="offset">コンテキストメニューが表示される場所のオフセット座標。 この座標は、control パラメータで指定されたコントロールに相対的です。</param>
      <param name="expand">メニューを展開した状態で開くかどうかを指定します。</param>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Hide">
      <summary>メニューを非表示にします。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Expand">
      <summary>メニューを展開します。</summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.Collapse">
      <summary>メニューを折りたたみます。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.CurrentItemProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.CurrentItem" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.AutoCollapseProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.AutoCollapse" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ExpandAreaThicknessProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ExpandAreaThickness" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.AccentBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.AccentBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.IconProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.Icon" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ItemIconStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ItemIconStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ColorItemStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ColorItemStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.RadialSliderStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.RadialSliderStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.NavigationButtonRelativeSizeProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.NavigationButtonRelativeSize" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.NavigationButtonStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.NavigationButtonStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.OffsetProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.Offset" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.PlacementTargetProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.PlacementTarget" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ToolTipPlacementProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ToolTipPlacement" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ToolTipTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ToolTipTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.ShowToolTipProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.ShowToolTip" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.SectorCountProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.SectorCount" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenu.BackIconProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenu.BackIcon" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenu" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Closing">
      <summary>C1RadialMenu が閉じようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Opening">
      <summary>C1RadialMenu が開こうとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Opened">
      <summary>C1RadialMenu が開かれたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Closed">
      <summary>C1RadialMenu が閉じられたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Collapsing">
      <summary>C1RadialMenu が折りたたまれようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Collapsed">
      <summary>C1RadialMenu が折りたたまれたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Expanding">
      <summary>C1RadialMenu が展開されようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.Expanded">
      <summary>C1RadialMenu が展開されたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClick">
      <summary>C1RadialMenuItem がクリックされると発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemOpening">
      <summary>C1RadialMenuItem が開こうとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemOpened">
      <summary>C1RadialMenuItem が開かれたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClosing">
      <summary>C1RadialMenuItem が閉じようとするときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemClosed">
      <summary>C1RadialMenuItem が閉じられるときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemChecked">
      <summary>C1RadialMenuItem がチェックされたときに発生します。</summary>
    </member>
    <member name="E:C1.WPF.C1RadialMenu.ItemUnchecked">
      <summary>C1RadialMenuItem のチェックが外されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.HasItems">
      <summary>ItemsControl に項目が含まれているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.IsCollapsed">
      <summary>メニューが折りたたまれているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.RootElement">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールのルート可視要素を取得します。
      </summary>
      <remarks>C1RadialMenu コントロールを基準にしてポップアップを表示する必要がある場合は、PlacementTarget として RootElement を使用します。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.CurrentItem">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenu" />UI で現在表示されている項目の所有元の C1RadialMenu または C1RadialMenuItem コントロールを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.AutoCollapse">
      <summary>ユーザーがメニューの外側をクリックしたときに自動的にメニューを閉じるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ExpandAreaThickness">
      <summary>展開領域の厚みを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.AccentBrush">
      <summary>
        小さなメニュー部分に色を付けるために使用される
        <see cref="T:System.Windows.Media.Brush" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.Icon">
      <summary>C1RadialMenu に表示されるアイコンを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ItemIconStyle">
      <summary>アイコンの表示に使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ColorItemStyle">
      <summary>C1RadialColorItem の表示に使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.RadialSliderStyle">
      <summary>C1RadialSlider の表示に使用されるスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.NavigationButtonRelativeSize">
      <summary>メニューサイズを基準にしたナビゲーションボタンサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.NavigationButtonStyle">
      <summary>ナビゲーションボタンに適用するスタイルを表します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.Offset">
      <summary>ポインタ位置に対する C1RadialMenu の相対オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.PlacementTarget">
      <summary>C1RadialMenu が開かれて相対的に配置されるときの基準になる FrameworkElement を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ToolTipPlacement">
      <summary>ツールチップの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ToolTipTemplate">
      <summary>ツールチップの表示に使用されるデータテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.ShowToolTip">
      <summary>コントロールの個々の項目にツールチップを表示するかどうかを決定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.SectorCount">
      <summary>メニューに表示するセクターの数を取得または設定します。</summary>
      <remarks>デフォルト値は -1 です。その場合、実際のセクター数はメニュー項目の数で定義されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialMenu.BackIcon">
      <summary>C1RadialMenu に表示される戻るアイコンを取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.SelectedItemOptions">
      <summary>選択されている項目のどの部分を親 C1RadialMenuItem に表示するかを決定します。</summary>
      <remarks>項目のチェック記号はオプションに含まれません。これは、チェックボックス付きの項目には常に表示されます。</remarks>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.None">
      <summary>なし。</summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.Header">
      <summary>ヘッダー。</summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.Icon">
      <summary>アイコン。</summary>
    </member>
    <member name="F:C1.WPF.SelectedItemOptions.All">
      <summary>すべての部分。</summary>
    </member>
    <member name="T:C1.WPF.C1RadialMenuItemsPresenter">
      <summary>
        項目を配置する場所を指定するために
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールのテンプレート内で使用されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItemsPresenter.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenuItemsPresenter" />コントロールの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialMenuItemsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>指定された項目を表示するために指定された要素を準備します。</summary>
      <param name="element">指定された項目を表示するときに使用される要素。</param>
      <param name="item">表示する項目。</param>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItemsPresenter.Menu">
      <summary>
        親
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールを識別します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1RadialColorItemsPresenter">
      <summary>
        C1RadialColorItem のサブメニューを配置する場所を指定するために
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールのテンプレート内で使用されます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItemsPresenter.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialColorItemsPresenter" />コントロールの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialColorItemsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>指定された項目を表示するために指定された要素を準備します。</summary>
      <param name="element">指定された項目を表示するときに使用される要素。</param>
      <param name="item">表示する項目。</param>
    </member>
    <member name="P:C1.WPF.C1RadialColorItemsPresenter.Menu">
      <summary>
        親
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールを識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialColorItemsPresenter.CurrentItem">
      <summary>
        親
        <see cref="T:C1.WPF.C1RadialColorItem" />項目を識別します。
      </summary>
      <remarks>
        <see cref="T:C1.WPF.C1RadialMenu" />は、
        <see cref="T:C1.WPF.C1RadialColorItem" />サブメニューが開かれる前に、その都度このプロパティ値を更新します。
      </remarks>
    </member>
    <member name="T:C1.WPF.C1RadialBackgroundPresenter">
      <summary>
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールテンプレートで使用する補助コントロール。
      </summary>
      <remarks>指定された ItemContainerStyle を使用して ContentControls に項目をラップし、項目の背景をラッパー ContentControl に伝搬します。</remarks>
    </member>
    <member name="M:C1.WPF.C1RadialBackgroundPresenter.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialBackgroundPresenter" />コントロールの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialBackgroundPresenter.Menu">
      <summary>
        親
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールを識別します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1RadialNumericItem">
      <summary>C1RadialMenu コントロール内で使用される数値項目選択用の項目。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.ValueProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.Value" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MinimumProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.Minimum" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MaximumProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.Maximum" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.IntervalProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.Interval" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.GaugeStartAngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.GaugeStartAngle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkStartAngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.MarkStartAngle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkEndAngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.MarkEndAngle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.SliderMarginProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.SliderMargin" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.PointerStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.PointerStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.MarkStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.MarkStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.FocusCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.FocusCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialNumericItem.DisabledCuesVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.DisabledCuesVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialNumericItem.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialNumericItem" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialNumericItem.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1RadialNumericItem" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Value">
      <summary>
        <see cref="P:C1.WPF.C1RadialNumericItem.Value" />プロパティを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Minimum">
      <summary>
        <see cref="T:C1.WPF.C1RadialNumericItem" />の最小値。
      </summary>
      <remarks>設定しない場合は、Items コレクションの最小値が使用されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Maximum">
      <summary>
        <see cref="T:C1.WPF.C1RadialNumericItem" />の最大値。
      </summary>
      <remarks>設定しない場合は、Items コレクションの最大値が使用されます。</remarks>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.Interval">
      <summary>Items コレクションが空の場合に項目を生成するための値間隔。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.GaugeStartAngle">
      <summary>円形ゲージの開始角度を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkStartAngle">
      <summary>最初のマークを配置する角度を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkEndAngle">
      <summary>最後のマークを配置する角度を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.SliderMargin">
      <summary>円形スライダのマージン。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.PointerStyle">
      <summary>円形スライダのポインタの表示に使用するスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.MarkStyle">
      <summary>円形スライダのマークの表示に使用するスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.FocusCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、フォーカスがある項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialNumericItem.DisabledCuesVisibility">
      <summary>コントロールのビジュアル要素のうち、無効になっている項目を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.WPF.C1RadialPanel">
      <summary>円の StartAngle から EndAngle まで時計回りに子要素を配置します。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcRelativeRadiusProperty">
      <summary>この添付プロパティは、指定された要素の ArcSegmentDefinition 添付プロパティを 計算するために使用される相対半径を指定します。 デフォルト値は 1.0 です。</summary>
      <remarks>
        実際の円弧半径は、
        <see cref="T:C1.WPF.C1RadialPanel" />半径に ArcRelativeRadius プロパティの値を掛けて計算されます。 このプロパティが親 ItemsControl に設定されている場合、C1RadialPanel は、個々の項目の ArcSegmentDefinition の計算でこのプロパティを使用します。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcRelativeRadius(System.Windows.DependencyObject)">
      <summary>相対円弧半径値を取得します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcRelativeRadius(System.Windows.DependencyObject,System.Double)">
      <summary>相対円弧半径値を設定します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcThicknessProperty">
      <summary>この添付プロパティは、要素コントロールテンプレートで使用される円弧の太さを指定します。</summary>
      <remarks>このプロパティが親 ItemsControl に設定されている場合、C1RadialPanel は、個々の項目にこのプロパティを設定し、 個々の項目の ArcSegmentDefinition の計算にこのプロパティを使用します。</remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcThickness(System.Windows.DependencyObject)">
      <summary>円弧の太さ値を取得します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcThickness(System.Windows.DependencyObject,System.Double)">
      <summary>円弧の太さ値を設定します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.ArcSegmentDefinitionProperty">
      <summary>
        この添付プロパティは、要素コントロールテンプレートで使用される
        <see cref="T:C1.WPF.ArcSegmentDef" />オブジェクトを保持します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetArcSegmentDefinition(System.Windows.DependencyObject)">
      <summary>
        <see cref="T:C1.WPF.ArcSegmentDef" />の値を取得します。
      </summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetArcSegmentDefinition(System.Windows.DependencyObject,C1.WPF.ArcSegmentDef)">
      <summary>
        <see cref="T:C1.WPF.ArcSegmentDef" />の値を設定します。
      </summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.AngleProperty">
      <summary>この添付プロパティは、要素の配置に使用する明示的な角度を指定します。</summary>
      <remarks>
        <see cref="T:C1.WPF.C1RadialPanel" />は、
        <see cref="T:C1.WPF.C1RadialMenuItem" />から派生されていないすべての子に自動的にこのプロパティを設定します。
      </remarks>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.GetAngle(System.Windows.DependencyObject)">
      <summary>角度値を取得します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.SetAngle(System.Windows.DependencyObject,System.Double)">
      <summary>角度値を設定します。</summary>
      <param name="obj">この添付プロパティを持つ要素。</param>
      <param name="value">
      </param>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.StartAngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialPanel.StartAngle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.EndAngleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialPanel.EndAngle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialPanel.RotateChildrenProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialPanel.RotateChildren" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialPanel.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialPanel" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.SetExplicitAngles">
      <summary>
        このパネルが子要素に Angle 添付プロパティを設定するかどうかを判定する
        <see cref="T:System.Boolean" />値を取得または設定します。 デフォルト値は False です。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.StartAngle">
      <summary>最初の子要素を配置する角度を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.EndAngle">
      <summary>最後の子要素を配置する角度を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialPanel.RotateChildren">
      <summary>パネルの子要素に RotateTransform を適用するかどうかを指定する値を取得または設定します。</summary>
      <remarks>子の向きを維持する場合は、このプロパティを false に設定します。</remarks>
    </member>
    <member name="T:C1.WPF.C1RadialSlider">
      <summary>
        数値を選択するための円形スライダを表示するために、
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールのテンプレート内で使用されます。
      </summary>
      <summary>数値を選択するための円形スライダを表示するコントロール。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialSlider.PointerStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialSlider.PointerStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1RadialSlider.CircularBrushProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialSlider.CircularBrush" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>指定された項目を表示するために指定された要素を準備します。</summary>
      <param name="element">指定された項目を表示するときに使用される要素。</param>
      <param name="item">表示する項目。</param>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1RadialSlider" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1RadialSlider.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1RadialSlider" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.PointerStyle">
      <summary>ポインタの描画に使用するスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.CircularBrush">
      <summary>円形ゲージを表示するためにコントロールテンプレート内で使用される円形ブラシを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1RadialSlider.Menu">
      <summary>
        親
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールを識別します。
      </summary>
    </member>
    <member name="T:C1.WPF.AngleConverter">
      <summary>指定された double 値をパラメータ値に掛けます。</summary>
    </member>
    <member name="M:C1.WPF.AngleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>指定された double 値をパラメータ値に掛けます。</summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.AngleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>何も行いません。</summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.DoubleToThicknessConverter">
      <summary>double 値を両側の均等な厚みに変換します。</summary>
    </member>
    <member name="M:C1.WPF.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>double 値を両側の均等な厚みに変換します。</summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>何も行いません。</summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.ArcSegmentDef">
      <summary>xaml で ArcSegment の描画に使用できる円弧定義プロパティを保持します。</summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.Size">
      <summary>円弧の x 半径と y 半径を Size 構造体として取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.StartPoint">
      <summary>楕円弧の開始点を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.ArcSegmentDef.EndPoint">
      <summary>楕円弧の終了点を取得または設定します。</summary>
    </member>
    <member name="E:C1.WPF.ArcSegmentDef.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.WPF.ExpandButtonTagConverter">
      <summary>クリアスタイルの場合、ExpandButton タグは null になり、double に変換できなくなります。</summary>
    </member>
    <member name="M:C1.WPF.C1Menu.Close">
      <summary>開いているすべてのサブメニューを強制的に閉じます。</summary>
    </member>
    <member name="T:C1.WPF.C1ProgressIndicator">
      <summary>アプリケーションのビジー状態を示すビジュアル要素。</summary>
      <summary>C1ProgressIndicator は、アプリケーションのビジー状態を示すコントロールを表します。</summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.IsActiveProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.IsActive" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.Header" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderTemplateProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderTemplate" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontFamilyProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontFamily" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontSizeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontSize" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontStretchProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontStretch" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontStyleProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontStyle" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderFontWeightProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderFontWeight" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderPaddingProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderPadding" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignment" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignmentProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignment" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderBackgroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderBackground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ProgressIndicator.HeaderForegroundProperty">
      <summary>
        <see cref="P:C1.WPF.C1ProgressIndicator.HeaderForeground" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressIndicator.#ctor">
      <summary>
        <see cref="T:C1.WPF.C1ProgressIndicator" />の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ProgressIndicator.OnApplyTemplate">
      <summary>
        新しいテンプレートが適用されたときに、
        <see cref="T:C1.WPF.C1ProgressIndicator" />コントロールのビジュアルツリーを作成します。
      </summary>
      <remarks>
        このメソッドは、アプリケーションコードや内部処理（リビルドレイアウトパスなど）が
        <see cref="M:ApplyTemplate" />メソッドを呼び出すときに必ず呼び出されます。
      </remarks>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.IsActive">
      <summary>コントロールがアクティブな状態であるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.Header">
      <summary>このコントロールのヘッダーを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderTemplate">
      <summary>ヘッダーの表示に使用されるデータテンプレートを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontFamily">
      <summary>ヘッダーのフォントファミリを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontSize">
      <summary>ヘッダーのフォントサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontStretch">
      <summary>ヘッダーのフォントストレッチを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontStyle">
      <summary>ヘッダーのフォントスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderFontWeight">
      <summary>ヘッダーのフォントウェイトを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderPadding">
      <summary>ヘッダーのパディングを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HorizontalHeaderAlignment">
      <summary>ヘッダーの HorizontalContentAlignment を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.VerticalHeaderAlignment">
      <summary>ヘッダーの VerticalContentAlignment を取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderBackground">
      <summary>ヘッダーの背景ブラシを取得または設定します。</summary>
    </member>
    <member name="P:C1.WPF.C1ProgressIndicator.HeaderForeground">
      <summary>ヘッダーの前景ブラシを取得または設定します。</summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.ChangeVisualStateFocus(System.Boolean)">
      <summary>Focus 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。</summary>
    </member>
    <member name="M:C1.WPF.Extensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
      <summary>この四角形が rect と重なるかどうかを判定します。</summary>
      <param name="r">テストする四角形。</param>
      <param name="rect">テストするもう１つの四角形。</param>
      <returns>共通部分がある場合は true を返し、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:C1.WPF.Extensions.Contains(System.Windows.Rect,System.Windows.Rect)">
      <summary>１つの四角形の領域が別の構造体の内部に完全に含まれるかどうかを判定します。</summary>
      <param name="r">テストする四角形。</param>
      <param name="rect">もう１つの四角形。</param>
      <returns>
        <paramref name="rect" />で表される四角形領域が
        <paramref name="r" />構造体内に完全に含まれる場合は true を返します。そうでない場合は false を返します。
      </returns>
    </member>
    <member name="T:C1.WPF.TypeEx">
      <summary>
        <see cref="T:C1.WPF.TypeEx" />クラスは、
        <see cref="T:System.Type" />クラスに便利な拡張メソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.WPF.TypeEx.New``1(System.Type)">
      <summary>デフォルトコンストラクタを使用して、この型の新しいインスタンスを作成します。</summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">タイプ。</param>
      <returns>T 型の新しいインスタンス。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.New(System.Type)">
      <summary>デフォルトコンストラクタを使用して、この型の新しいインスタンスを作成します。</summary>
      <param name="type">タイプ。</param>
      <returns>T 型の新しいインスタンス。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetDefaultPublicCtor(System.Type)">
      <summary>指定されたタイプのパラメータなしデフォルトパブリックインスタンスコンストラクタを返します。</summary>
      <param name="type">タイプ。</param>
      <returns>存在する場合は、指定されたタイプのデフォルトコンストラクタを返し、そうでない場合は Null を返します。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.New``1(System.Type,System.Action{``0})">
      <summary>デフォルトコンストラクタを使用して、この型の新しいインスタンスを作成します。</summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">タイプ。</param>
      <param name="initializers">初期化子。</param>
      <returns>T 型の新しいインスタンス。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetNonNullableType(System.Type)">
      <summary>null 可能な型の基底の型を返します。 たとえば、Type = double? の場合は、double を返します。</summary>
      <param name="type">型。</param>
      <returns>基底の型。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNullableType(System.Type)">
      <summary>型が null 可能な型である場合は、true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が null 可能の場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumeric(System.Type)">
      <summary>型が数値データ型 （double、float、int、uint、long、ulong、short、ushort、sbyte、byte、または decimal）の場合は、true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が数値の場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegral(System.Type)">
      <summary>型が整数データ型 （int、uint、long、ulong、short、ushort、sbyte、または byte）の場合は、true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が整数である場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegralSigned(System.Type)">
      <summary>型が符号付き整数データ型 （int、long、short、または sbyte）の場合は true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が符号付き整数である場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericIntegralUnsigned(System.Type)">
      <summary>型が符号なし整数データ型 （uint、ulong、ushort、または byte）の場合は、true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が符号なし整数である場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.IsNumericNonIntegral(System.Type)">
      <summary>型が整数以外の数値データ型 （double、float、または decimal）の場合は、true を返します。</summary>
      <param name="type">型。</param>
      <returns>型が整数以外の数値の場合は true。</returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetEnumValues``1(System.Type)">
      <summary>Enum 型（Type.IsEnum == true）の値を返します。</summary>
      <typeparam name="T">Enum 型。</typeparam>
      <param name="enumType">Enum 型。</param>
      <returns>Enum 型の値のリスト。</returns>
    </member>
    <member name="P:C1.WPF.C1TreeView.Panel">
      <summary>この項目コントロールに関連付けられているパネルを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.EditControl">
      <summary>編集モードの場合に表示されるコントロール。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.Panel">
      <summary>この項目コントロールに関連付けられているパネルを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewer.ScrollViewer">
      <summary>この項目コントロールに属するスクロールビューアテンプレートパーツを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.GeneratorForPanel">
      <summary>このパネルの項目コンテナジェネレータを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.ScrollViewer">
      <summary>このパネルに関連付けられているスクロールビューアを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1ListViewerPanel.MeasureSize">
      <summary>MeasureOverride メソッドの呼び出しで項目の測定に使用されるサイズを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.ScrollViewer">
      <summary>このパネルに関連付けられているスクロールビューアを取得します。</summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.MeasureSize">
      <summary>MeasureOverride メソッドの呼び出しで項目の測定に使用されるサイズを取得します。</summary>
    </member>
    <member name="M:C1.WPF.Extensions.Deflate(System.Windows.Rect@,System.Windows.Thickness)">
      <summary>
        指定された量で
        <see cref="T:System.Windows.Rect" />構造体を縮小します。
      </summary>
      <param name="r">
        <see cref="T:System.Windows.Rect" />構造体。
      </param>
      <param name="th">
        この
        <see cref="T:System.Windows.Rect" />構造体を縮小させる量を定義する
        <see cref="T:System.Windows.Thickness" />構造体。
      </param>
    </member>
    <member name="M:C1.WPF.Extensions.Inflate(System.Windows.Rect@,System.Double,System.Double)">
      <summary>
        指定された量で
        <see cref="T:System.Windows.Rect" />構造体を拡大します。
      </summary>
      <param name="r">
        <see cref="T:System.Windows.Rect" />構造体。
      </param>
      <param name="dx">
        この
        <see cref="T:System.Windows.Rect" />構造体を水平方向に拡大する量。
      </param>
      <param name="dy">
        この
        <see cref="T:System.Windows.Rect" />構造体を垂直方向に拡大する量。
      </param>
    </member>
    <member name="M:C1.WPF.C1TreeView.OnAutoSearchBufferChanged(C1.WPF.AutoSearchBufferChangedEventArgs)">
      <summary>
        <see cref="E:C1.Silverlight.C1TreeView.AutoSearchBufferChanged" />イベントを発生させます。
      </summary>
      <param name="e">イベントのデータを提供します。</param>
    </member>
    <member name="E:C1.WPF.C1TreeView.AutoSearchBufferChanged">
      <summary>検索テキストが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsFirstLevel">
      <summary>現在の項目が第１レベルのサブメニューかどうかを示します。</summary>
    </member>
    <member name="T:C1.WPF.AutoSearchBufferChangedEventArgs">
      <summary>AutoSearchBufferChanged イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.WPF.AutoSearchBufferChangedEventArgs.Indexes">
      <summary>インデックスのコレクション。</summary>
    </member>
    <member name="P:C1.WPF.AutoSearchBufferChangedEventArgs.SearchBuffer">
      <summary>検索バッファの値を取得します。</summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewPanel.BringIndexIntoView(System.Int32)">
      <summary>インデックスをビューポート内に移動します。</summary>
      <param name="index">
      </param>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.RangeSliderBarVisibilityProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.RangeSliderBarVisibility" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.RangeSliderBarVisibility">
      <summary>C1RangeSlider バーを表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.WPF.C1DragDropManager.RegisterDragSource(System.Windows.UIElement,C1.WPF.DragDropEffect,System.Windows.Input.ModifierKeys,System.Boolean)">
      <remarks>
        <para>
          <see cref="T:System.Windows.UIElement" />がドラッグ元として登録されると、
          <see cref="T:C1.WPF.C1DragDropManager" />は その要素のマウスイベントを監視し、ユーザーが要素上でマウスボタンを押して要素を数ピクセル移動すると、 自動的にドラッグアンドドロップ操作を開始します。
        </para>
        <para>
          これは便宜的なメソッドで、必ずしも必要ではありません。ドラッグ元として使用するオブジェクトの マウスイベントを処理し、
          <see cref="M:C1.WPF.C1DragDropManager.DoDragDrop(System.Windows.UIElement,System.Windows.Input.MouseEventArgs,C1.WPF.DragDropEffect)" />メソッドを明示的に 呼び出すこともできます。
        </para>
        <para>
          ドラッグ元の要素を登録解除するには、
          <b>RegisterDragSource</b>メソッドを呼び出して、 その要素と
          <b>DragDropEffect.None</b>を渡します。
        </para>
        <para>
          マウスイベントを発生する要素だけを自動的なドラッグ元として使用できることに注意してください。 たとえば、
          <see cref="T:System.Windows.Controls.Button" />コントロールや
          <see cref="T:System.Windows.Controls.TextBox" />コントロールはマウスイベントを内部で使用してしまうため、
          <see cref="T:C1.WPF.C1DragDropManager" />はこれらのコントロールのマウスイベントを受け取りません。 したがって、これらのコントロールを自動的なドラッグ元として使用することはできません。
        </para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1RadialMenu.GoBack">
      <summary>
        エンドユーザーが戻るボタンをクリックした場合と同様に、
        <see cref="T:C1.WPF.C1RadialMenu" />コントロールを１レベル上に進めます。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TileListBoxPanel.GetItemPosition(System.Int32)">
      <summary>このパネル内の項目の推定位置を取得します。</summary>
      <param name="index">照会される項目のインデックス。</param>
    </member>
    <member name="M:C1.WPF.C1TileListBox.InitializeScrollViewerPart">
      <summary>スクロールビューアパートを初期化します。</summary>
    </member>
    <member name="M:C1.WPF.C1ListViewer.BringIndexIntoView(System.Int32,System.Nullable{System.Windows.Rect},System.Boolean,System.Action)">
      <summary>指定されたインデックスをビューに表示します。</summary>
      <param name="index">ビューに表示するインデックス。</param>
      <param name="subOffset">より詳細なポイントにスクロールするために使用できる項目内のサブ領域。</param>
      <param name="changeZoomIfNecessary">true にすると、領域全体が表示されるようにズームが変更されます。</param>
      <param name="completed">アニメーションが完了したときに呼び出されるアクション。</param>
    </member>
    <member name="P:C1.WPF.C1RadialMenuItem.CollapseOnClick">
      <summary>ユーザーが子項目を持たない項目をクリックしたときに自動的にメニューを閉じるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.WPF.C1RadialMenuItem.CollapseOnClickProperty">
      <summary>
        <see cref="P:C1.WPF.C1RadialMenuItem.CollapseOnClick" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="M:C1.WPF.Extensions.Inflate(System.Windows.Rect@,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Rect" />構造体を指定された量だけ拡大します。
      </summary>
      <param name="r">
        <see cref="T:System.Windows.Rect" />構造体。
      </param>
      <param name="left">
        この
        <see cref="T:System.Windows.Rect" />を左から拡大する量。
      </param>
      <param name="top">
        この
        <see cref="T:System.Windows.Rect" />を上から拡大する量。
      </param>
      <param name="right">
        この
        <see cref="T:System.Windows.Rect" />を右から拡大する量。
      </param>
      <param name="bottom">
        この
        <see cref="T:System.Windows.Rect" />を下から拡大する量。
      </param>
    </member>
    <member name="M:C1.WPF.TypeEx.GetDefaultProperties(System.Type)">
      <summary>指定されたタイプのデフォルトプロパティを取得します。</summary>
      <param name="type">タイプ。</param>
      <returns>
        プロパティが見つかった場合は
        <see cref="T:System.Collections.Generic.IEnumerable`1" />インスタンスリスト。
      </returns>
    </member>
    <member name="M:C1.WPF.TypeEx.GetIndexerProperties(System.Type)">
      <summary>指定されたタイプのインデクサプロパティを取得します。</summary>
      <param name="type">タイプ。</param>
      <returns>
        プロパティが見つかった場合は
        <see cref="T:System.Collections.Generic.IEnumerable`1" />インスタンスリスト。
      </returns>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ScrollBehavior">
      <summary>選択された領域の外でマウスクリックが行われたときに、スクロールボックスがどのように移動するかを取得または設定します。</summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ScrollBehaviorProperty">
      <summary>
        <see cref="P:C1.WPF.C1RangeSlider.ScrollBehavior" />依存プロパティを識別します。
      </summary>
    </member>
    <member name="T:C1.WPF.RangeSliderScrollBehavior">
      <summary>選択された領域の外でマウスクリックが行われたときに、スクロールボックスがどのように移動するかを指定します。</summary>
    </member>
    <member name="F:C1.WPF.RangeSliderScrollBehavior.None">
      <summary>スクロールボックスは両方とも移動しません。</summary>
    </member>
    <member name="F:C1.WPF.RangeSliderScrollBehavior.Thumb">
      <summary>近い方のスクロールボックスがマウスの方向に大きく移動します。</summary>
    </member>
    <member name="F:C1.WPF.RangeSliderScrollBehavior.Range">
      <summary>両方のスクロールボックスがマウスの方向に大きく移動します。</summary>
    </member>
    <member name="M:C1.WPF.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix@,System.Windows.Media.Matrix@)">
      <summary>左の行列を右の行列で乗算し、 得られた行列を出力パラメータで返します。</summary>
      <param name="left">乗算する最初の行列。</param>
      <param name="right">左の行列に乗算する行列（乗算における右の行列）。</param>
      <param name="result">2 つの行列を乗算した結果。</param>
    </member>
    <member name="M:C1.WPF.Extensions.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>左の行列を右の行列で乗算します。</summary>
      <param name="left">乗算する最初の行列。</param>
      <param name="right">左の行列に乗算する行列（乗算における右の行列）。</param>
      <returns>2 つの行列を乗算した結果。</returns>
    </member>
    <member name="M:C1.WPF.Extensions.Transform(System.Windows.Media.Matrix,System.Double,System.Double)">
      <summary>この行列に基づいて点を変換します。</summary>
      <param name="matrix">変換を定義する行列。</param>
      <param name="x">点の x 座標。</param>
      <param name="y">点の y 座標。</param>
      <returns>点の変換の結果。</returns>
    </member>
    <member name="M:C1.WPF.C1TapHelper.#ctor(System.Windows.UIElement,System.Boolean,System.Boolean)">
      <summary>
        Tap イベントとオプションの DoubleTap イベントだけを処理する
        <see cref="T:C1.WPF.C1TapHelper" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="element">
        タップジェスチャを監視する対象の
        <see cref="T:System.Windows.UIElement" />。
      </param>
      <param name="doubleTapped">要素が DoubleTap イベントを監視するかどうかを指定します。</param>
      <param name="handledEventsToo">マウスイベントが既に処理された後もタップジェスチャを監視するかどうかを示します。(これは、マウスジェスチャにのみ適用されます)</param>
      <remarks>すべてのイベントを処理する必要がない場合は、このコンストラクタを使用してメモリとパフォーマンスを節約します。</remarks>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.PixelsToUnits(System.Double)">
      <summary>
        ピクセルを範囲スライダ内の対応する単位値に変換します。
      </summary>
      <param name="pixels">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.C1TreeViewItem.Panel">
      <summary>
        この項目コントロールに関連付けられているパネルを取得します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1TreeViewPanel.TreeView">
      <summary>
        このパネルの親の <see cref="T:C1.WPF.C1TreeView" /> を識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedItems">
      <summary>
        複数選択モードでの選択項目のコレクションを取得します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.SelectAll">
      <summary>
        複数選択モードですべてのデータ項目を選択します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.UnselectAll">
      <summary>
        複数選択モードですべてのデータ項目を選択解除します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectionMode">
      <summary>
        選択モードを取得または設定します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionModeProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.SelectionMode" /> 依存プロパティを識別します。
      </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MultipleSelectionSeparator">
      <summary>
        複数選択モードでテキストヘッダーのセパレータを取得または設定します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MultipleSelectionSeparatorProperty">
      <summary>
        <see cref="P:C1.WPF.C1ComboBox.MultipleSelectionSeparator" /> 依存プロパティを識別します。
      </summary>
    </member>
    <member name="T:C1.WPF.C1ComboBoxSelectionMode">
      <summary>
        C1ComboBox の選択モード
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxSelectionMode.Single">
      <summary>
        単一項目の選択を許可します。
      </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxSelectionMode.Multiple">
      <summary>
        複数の選択を許可します。
      </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.MoveListBox(System.Windows.Input.Key,System.Int32,System.Int32@)">
      <summary>
        キーが押されたときの ListBox 内の次の項目を取得します。
        独自のキーボード選択方式を実装する場合は、これをオーバーライドできます。
      </summary>
      <param name="key">押されたキー。</param>
      <param name="index">現在選択されているインデックス。</param>
      <param name="newIndex">新しく選択されたインデックス。</param>
      <returns>キーが処理された場合は true。</returns>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectionChanged">
      <summary>
        複数選択モードで選択項目が変更されたときに発生するイベント。
      </summary>
    </member>
    <member name="M:C1.WPF.C1TreeViewItem.ChangeVisualStateItemLine(System.Boolean,System.Boolean)">
      <summary>
        ItemLine 表示状態グループの現在の表示状態をオブジェクトのプロパティに一致するように更新します。
      </summary>
    </member>
  </members>
</doc>